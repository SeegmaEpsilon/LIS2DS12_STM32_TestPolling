
LIS2DS12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a5c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  08007c00  08007c00  00017c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008194  08008194  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800819c  0800819c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800819c  0800819c  0001819c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081a0  080081a0  000181a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080081a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001dc  08008380  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000036c  08008380  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d45  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f8  00000000  00000000  00032f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00035450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e70  00000000  00000000  00036398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b95  00000000  00000000  00037208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ccc  00000000  00000000  0004ed9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090e82  00000000  00000000  0005fa69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f08eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005214  00000000  00000000  000f0940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007be4 	.word	0x08007be4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007be4 	.word	0x08007be4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f94f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f003 fd5c 	bl	80049a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f967 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f92f 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000274 	.word	0x20000274

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000274 	.word	0x20000274

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff feb6 	bl	8000f7c <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d008      	beq.n	8001230 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e052      	b.n	80012d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0216 	bic.w	r2, r2, #22
 800123e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <HAL_DMA_Abort+0x62>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0208 	bic.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001280:	e013      	b.n	80012aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001282:	f7ff fe7b 	bl	8000f7c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b05      	cmp	r3, #5
 800128e:	d90c      	bls.n	80012aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2220      	movs	r2, #32
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2203      	movs	r2, #3
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e015      	b.n	80012d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1e4      	bne.n	8001282 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00c      	b.n	8001316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2205      	movs	r2, #5
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x300>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x304>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	88fb      	ldrh	r3, [r7, #6]
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001676:	4a05      	ldr	r2, [pc, #20]	; (800168c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	88fb      	ldrh	r3, [r7, #6]
 800167a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	4618      	mov	r0, r3
 8001680:	f002 fdce 	bl	8004220 <HAL_GPIO_EXTI_Callback>
  }
}
 8001684:	bf00      	nop
 8001686:	3708      	adds	r7, #8
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40013c00 	.word	0x40013c00

08001690 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e264      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d075      	beq.n	800179a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016ae:	4ba3      	ldr	r3, [pc, #652]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
 80016b6:	2b04      	cmp	r3, #4
 80016b8:	d00c      	beq.n	80016d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4ba0      	ldr	r3, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016c2:	2b08      	cmp	r3, #8
 80016c4:	d112      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016c6:	4b9d      	ldr	r3, [pc, #628]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016d2:	d10b      	bne.n	80016ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d4:	4b99      	ldr	r3, [pc, #612]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d05b      	beq.n	8001798 <HAL_RCC_OscConfig+0x108>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d157      	bne.n	8001798 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e23f      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f4:	d106      	bne.n	8001704 <HAL_RCC_OscConfig+0x74>
 80016f6:	4b91      	ldr	r3, [pc, #580]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a90      	ldr	r2, [pc, #576]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e01d      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800170c:	d10c      	bne.n	8001728 <HAL_RCC_OscConfig+0x98>
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a8a      	ldr	r2, [pc, #552]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	4b88      	ldr	r3, [pc, #544]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a87      	ldr	r2, [pc, #540]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	e00b      	b.n	8001740 <HAL_RCC_OscConfig+0xb0>
 8001728:	4b84      	ldr	r3, [pc, #528]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a83      	ldr	r2, [pc, #524]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800172e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b81      	ldr	r3, [pc, #516]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a80      	ldr	r2, [pc, #512]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800173a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d013      	beq.n	8001770 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff fc18 	bl	8000f7c <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff fc14 	bl	8000f7c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e204      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0xc0>
 800176e:	e014      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001770:	f7ff fc04 	bl	8000f7c <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fc00 	bl	8000f7c <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e1f0      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178a:	4b6c      	ldr	r3, [pc, #432]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1f0      	bne.n	8001778 <HAL_RCC_OscConfig+0xe8>
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d063      	beq.n	800186e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017a6:	4b65      	ldr	r3, [pc, #404]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00b      	beq.n	80017ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ba:	2b08      	cmp	r3, #8
 80017bc:	d11c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017be:	4b5f      	ldr	r3, [pc, #380]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d116      	bne.n	80017f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d001      	beq.n	80017e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1c4      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e2:	4b56      	ldr	r3, [pc, #344]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	4952      	ldr	r1, [pc, #328]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017f6:	e03a      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d020      	beq.n	8001842 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_OscConfig+0x2b0>)
 8001802:	2201      	movs	r2, #1
 8001804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fbb9 	bl	8000f7c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fbb5 	bl	8000f7c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e1a5      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001820:	4b46      	ldr	r3, [pc, #280]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182c:	4b43      	ldr	r3, [pc, #268]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	691b      	ldr	r3, [r3, #16]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	4940      	ldr	r1, [pc, #256]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800183c:	4313      	orrs	r3, r2
 800183e:	600b      	str	r3, [r1, #0]
 8001840:	e015      	b.n	800186e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <HAL_RCC_OscConfig+0x2b0>)
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fb98 	bl	8000f7c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001850:	f7ff fb94 	bl	8000f7c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e184      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001862:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1f0      	bne.n	8001850 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	2b00      	cmp	r3, #0
 8001878:	d030      	beq.n	80018dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	695b      	ldr	r3, [r3, #20]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d016      	beq.n	80018b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_OscConfig+0x2b4>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001888:	f7ff fb78 	bl	8000f7c <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001890:	f7ff fb74 	bl	8000f7c <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e164      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80018a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x200>
 80018ae:	e015      	b.n	80018dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b0:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_OscConfig+0x2b4>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018b6:	f7ff fb61 	bl	8000f7c <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018be:	f7ff fb5d 	bl	8000f7c <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e14d      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b1a      	ldr	r3, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80018d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a0 	beq.w	8001a2a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b0c      	ldr	r3, [pc, #48]	; (800193c <HAL_RCC_OscConfig+0x2ac>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_OscConfig+0x2b8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d121      	bne.n	800196a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_RCC_OscConfig+0x2b8>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_RCC_OscConfig+0x2b8>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff fb23 	bl	8000f7c <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e011      	b.n	800195e <HAL_RCC_OscConfig+0x2ce>
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	42470000 	.word	0x42470000
 8001944:	42470e80 	.word	0x42470e80
 8001948:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800194c:	f7ff fb16 	bl	8000f7c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e106      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800195e:	4b85      	ldr	r3, [pc, #532]	; (8001b74 <HAL_RCC_OscConfig+0x4e4>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0f0      	beq.n	800194c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d106      	bne.n	8001980 <HAL_RCC_OscConfig+0x2f0>
 8001972:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a80      	ldr	r2, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	e01c      	b.n	80019ba <HAL_RCC_OscConfig+0x32a>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b05      	cmp	r3, #5
 8001986:	d10c      	bne.n	80019a2 <HAL_RCC_OscConfig+0x312>
 8001988:	4b7b      	ldr	r3, [pc, #492]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 800198a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800198c:	4a7a      	ldr	r2, [pc, #488]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 800198e:	f043 0304 	orr.w	r3, r3, #4
 8001992:	6713      	str	r3, [r2, #112]	; 0x70
 8001994:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001998:	4a77      	ldr	r2, [pc, #476]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 800199a:	f043 0301 	orr.w	r3, r3, #1
 800199e:	6713      	str	r3, [r2, #112]	; 0x70
 80019a0:	e00b      	b.n	80019ba <HAL_RCC_OscConfig+0x32a>
 80019a2:	4b75      	ldr	r3, [pc, #468]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	4a74      	ldr	r2, [pc, #464]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6713      	str	r3, [r2, #112]	; 0x70
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 80019b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b2:	4a71      	ldr	r2, [pc, #452]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 80019b4:	f023 0304 	bic.w	r3, r3, #4
 80019b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff fadb 	bl	8000f7c <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019ca:	f7ff fad7 	bl	8000f7c <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d8:	4293      	cmp	r3, r2
 80019da:	d901      	bls.n	80019e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019dc:	2303      	movs	r3, #3
 80019de:	e0c5      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019e0:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 80019e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e4:	f003 0302 	and.w	r3, r3, #2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0ee      	beq.n	80019ca <HAL_RCC_OscConfig+0x33a>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ee:	f7ff fac5 	bl	8000f7c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f4:	e00a      	b.n	8001a0c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f7ff fac1 	bl	8000f7c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e0af      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a0c:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1ee      	bne.n	80019f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d105      	bne.n	8001a2a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a55      	ldr	r2, [pc, #340]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 809b 	beq.w	8001b6a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a34:	4b50      	ldr	r3, [pc, #320]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 030c 	and.w	r3, r3, #12
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d05c      	beq.n	8001afa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d141      	bne.n	8001acc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a48:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_OscConfig+0x4ec>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fa95 	bl	8000f7c <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a56:	f7ff fa91 	bl	8000f7c <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e081      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	69da      	ldr	r2, [r3, #28]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	431a      	orrs	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	019b      	lsls	r3, r3, #6
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	085b      	lsrs	r3, r3, #1
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	041b      	lsls	r3, r3, #16
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	061b      	lsls	r3, r3, #24
 8001a98:	4937      	ldr	r1, [pc, #220]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_RCC_OscConfig+0x4ec>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa4:	f7ff fa6a 	bl	8000f7c <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aaa:	e008      	b.n	8001abe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fa66 	bl	8000f7c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d901      	bls.n	8001abe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e056      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001abe:	4b2e      	ldr	r3, [pc, #184]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCC_OscConfig+0x41c>
 8001aca:	e04e      	b.n	8001b6a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_RCC_OscConfig+0x4ec>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa53 	bl	8000f7c <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fa4f 	bl	8000f7c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03f      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1f0      	bne.n	8001ada <HAL_RCC_OscConfig+0x44a>
 8001af8:	e037      	b.n	8001b6a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e032      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b06:	4b1c      	ldr	r3, [pc, #112]	; (8001b78 <HAL_RCC_OscConfig+0x4e8>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d028      	beq.n	8001b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d121      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d11a      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d111      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4c:	085b      	lsrs	r3, r3, #1
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b60:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e000      	b.n	8001b6c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40007000 	.word	0x40007000
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	42470060 	.word	0x42470060

08001b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e0cc      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b94:	4b68      	ldr	r3, [pc, #416]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d90c      	bls.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b65      	ldr	r3, [pc, #404]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b63      	ldr	r3, [pc, #396]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b8      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d020      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a58      	ldr	r2, [pc, #352]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	4a52      	ldr	r2, [pc, #328]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b50      	ldr	r3, [pc, #320]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	494d      	ldr	r1, [pc, #308]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d044      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1e:	4b47      	ldr	r3, [pc, #284]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e07f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d107      	bne.n	8001c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3e:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d109      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e06f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c4e:	4b3b      	ldr	r3, [pc, #236]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e067      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c5e:	4b37      	ldr	r3, [pc, #220]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f023 0203 	bic.w	r2, r3, #3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	4934      	ldr	r1, [pc, #208]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c70:	f7ff f984 	bl	8000f7c <HAL_GetTick>
 8001c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	e00a      	b.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c78:	f7ff f980 	bl	8000f7c <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e04f      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8e:	4b2b      	ldr	r3, [pc, #172]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 020c 	and.w	r2, r3, #12
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d1eb      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca0:	4b25      	ldr	r3, [pc, #148]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d20c      	bcs.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cae:	4b22      	ldr	r3, [pc, #136]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	b2d2      	uxtb	r2, r2
 8001cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cb6:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d001      	beq.n	8001cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e032      	b.n	8001d2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4916      	ldr	r1, [pc, #88]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d009      	beq.n	8001d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	490e      	ldr	r1, [pc, #56]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d06:	f000 f821 	bl	8001d4c <HAL_RCC_GetSysClockFreq>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	490a      	ldr	r1, [pc, #40]	; (8001d40 <HAL_RCC_ClockConfig+0x1c0>)
 8001d18:	5ccb      	ldrb	r3, [r1, r3]
 8001d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d1e:	4a09      	ldr	r2, [pc, #36]	; (8001d44 <HAL_RCC_ClockConfig+0x1c4>)
 8001d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d22:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <HAL_RCC_ClockConfig+0x1c8>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff f8e4 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40023c00 	.word	0x40023c00
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	08007d9c 	.word	0x08007d9c
 8001d44:	20000008 	.word	0x20000008
 8001d48:	20000000 	.word	0x20000000

08001d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d4c:	b5b0      	push	{r4, r5, r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d52:	2100      	movs	r1, #0
 8001d54:	6079      	str	r1, [r7, #4]
 8001d56:	2100      	movs	r1, #0
 8001d58:	60f9      	str	r1, [r7, #12]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d5e:	2100      	movs	r1, #0
 8001d60:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d62:	4952      	ldr	r1, [pc, #328]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001d64:	6889      	ldr	r1, [r1, #8]
 8001d66:	f001 010c 	and.w	r1, r1, #12
 8001d6a:	2908      	cmp	r1, #8
 8001d6c:	d00d      	beq.n	8001d8a <HAL_RCC_GetSysClockFreq+0x3e>
 8001d6e:	2908      	cmp	r1, #8
 8001d70:	f200 8094 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x150>
 8001d74:	2900      	cmp	r1, #0
 8001d76:	d002      	beq.n	8001d7e <HAL_RCC_GetSysClockFreq+0x32>
 8001d78:	2904      	cmp	r1, #4
 8001d7a:	d003      	beq.n	8001d84 <HAL_RCC_GetSysClockFreq+0x38>
 8001d7c:	e08e      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d7e:	4b4c      	ldr	r3, [pc, #304]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d80:	60bb      	str	r3, [r7, #8]
       break;
 8001d82:	e08e      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d84:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d86:	60bb      	str	r3, [r7, #8]
      break;
 8001d88:	e08b      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8a:	4948      	ldr	r1, [pc, #288]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001d8c:	6849      	ldr	r1, [r1, #4]
 8001d8e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d92:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d94:	4945      	ldr	r1, [pc, #276]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001d96:	6849      	ldr	r1, [r1, #4]
 8001d98:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d9c:	2900      	cmp	r1, #0
 8001d9e:	d024      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001da0:	4942      	ldr	r1, [pc, #264]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001da2:	6849      	ldr	r1, [r1, #4]
 8001da4:	0989      	lsrs	r1, r1, #6
 8001da6:	4608      	mov	r0, r1
 8001da8:	f04f 0100 	mov.w	r1, #0
 8001dac:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001db0:	f04f 0500 	mov.w	r5, #0
 8001db4:	ea00 0204 	and.w	r2, r0, r4
 8001db8:	ea01 0305 	and.w	r3, r1, r5
 8001dbc:	493d      	ldr	r1, [pc, #244]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dbe:	fb01 f003 	mul.w	r0, r1, r3
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	fb01 f102 	mul.w	r1, r1, r2
 8001dc8:	1844      	adds	r4, r0, r1
 8001dca:	493a      	ldr	r1, [pc, #232]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x168>)
 8001dcc:	fba2 0101 	umull	r0, r1, r2, r1
 8001dd0:	1863      	adds	r3, r4, r1
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	f04f 0300 	mov.w	r3, #0
 8001ddc:	f7fe feec 	bl	8000bb8 <__aeabi_uldivmod>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4613      	mov	r3, r2
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	e04a      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dea:	4b30      	ldr	r3, [pc, #192]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	099b      	lsrs	r3, r3, #6
 8001df0:	461a      	mov	r2, r3
 8001df2:	f04f 0300 	mov.w	r3, #0
 8001df6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dfa:	f04f 0100 	mov.w	r1, #0
 8001dfe:	ea02 0400 	and.w	r4, r2, r0
 8001e02:	ea03 0501 	and.w	r5, r3, r1
 8001e06:	4620      	mov	r0, r4
 8001e08:	4629      	mov	r1, r5
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	014b      	lsls	r3, r1, #5
 8001e14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e18:	0142      	lsls	r2, r0, #5
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	1b00      	subs	r0, r0, r4
 8001e20:	eb61 0105 	sbc.w	r1, r1, r5
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	f04f 0300 	mov.w	r3, #0
 8001e2c:	018b      	lsls	r3, r1, #6
 8001e2e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e32:	0182      	lsls	r2, r0, #6
 8001e34:	1a12      	subs	r2, r2, r0
 8001e36:	eb63 0301 	sbc.w	r3, r3, r1
 8001e3a:	f04f 0000 	mov.w	r0, #0
 8001e3e:	f04f 0100 	mov.w	r1, #0
 8001e42:	00d9      	lsls	r1, r3, #3
 8001e44:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e48:	00d0      	lsls	r0, r2, #3
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	1912      	adds	r2, r2, r4
 8001e50:	eb45 0303 	adc.w	r3, r5, r3
 8001e54:	f04f 0000 	mov.w	r0, #0
 8001e58:	f04f 0100 	mov.w	r1, #0
 8001e5c:	0299      	lsls	r1, r3, #10
 8001e5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e62:	0290      	lsls	r0, r2, #10
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	f04f 0300 	mov.w	r3, #0
 8001e74:	f7fe fea0 	bl	8000bb8 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <HAL_RCC_GetSysClockFreq+0x160>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	60bb      	str	r3, [r7, #8]
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e9e:	60bb      	str	r3, [r7, #8]
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	00f42400 	.word	0x00f42400
 8001eb4:	017d7840 	.word	0x017d7840

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <HAL_RCC_GetHCLKFreq+0x14>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000008 	.word	0x20000008

08001ed0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed4:	f7ff fff0 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	4b05      	ldr	r3, [pc, #20]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	0a9b      	lsrs	r3, r3, #10
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	4903      	ldr	r1, [pc, #12]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee6:	5ccb      	ldrb	r3, [r1, r3]
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800
 8001ef4:	08007dac 	.word	0x08007dac

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001efc:	f7ff ffdc 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b05      	ldr	r3, [pc, #20]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0b5b      	lsrs	r3, r3, #13
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4903      	ldr	r1, [pc, #12]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	08007dac 	.word	0x08007dac

08001f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e07b      	b.n	800202a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d108      	bne.n	8001f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f42:	d009      	beq.n	8001f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	61da      	str	r2, [r3, #28]
 8001f4a:	e005      	b.n	8001f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f002 fd3c 	bl	80049f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a1b      	ldr	r3, [r3, #32]
 8001fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fdc:	ea42 0103 	orr.w	r1, r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	0c1b      	lsrs	r3, r3, #16
 8001ff6:	f003 0104 	and.w	r1, r3, #4
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f003 0210 	and.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69da      	ldr	r2, [r3, #28]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b08c      	sub	sp, #48	; 0x30
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
 800203e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002040:	2301      	movs	r3, #1
 8002042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_SPI_TransmitReceive+0x26>
 8002054:	2302      	movs	r3, #2
 8002056:	e18a      	b.n	800236e <HAL_SPI_TransmitReceive+0x33c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002060:	f7fe ff8c 	bl	8000f7c <HAL_GetTick>
 8002064:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800206c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002076:	887b      	ldrh	r3, [r7, #2]
 8002078:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800207a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800207e:	2b01      	cmp	r3, #1
 8002080:	d00f      	beq.n	80020a2 <HAL_SPI_TransmitReceive+0x70>
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002088:	d107      	bne.n	800209a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d103      	bne.n	800209a <HAL_SPI_TransmitReceive+0x68>
 8002092:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002096:	2b04      	cmp	r3, #4
 8002098:	d003      	beq.n	80020a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800209a:	2302      	movs	r3, #2
 800209c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020a0:	e15b      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x82>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <HAL_SPI_TransmitReceive+0x82>
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d103      	bne.n	80020bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80020ba:	e14e      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d003      	beq.n	80020d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	887a      	ldrh	r2, [r7, #2]
 80020e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	68ba      	ldr	r2, [r7, #8]
 80020ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	887a      	ldrh	r2, [r7, #2]
 80020f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	887a      	ldrh	r2, [r7, #2]
 80020f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d007      	beq.n	8002124 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800212c:	d178      	bne.n	8002220 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_SPI_TransmitReceive+0x10a>
 8002136:	8b7b      	ldrh	r3, [r7, #26]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d166      	bne.n	800220a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214c:	1c9a      	adds	r2, r3, #2
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002156:	b29b      	uxth	r3, r3
 8002158:	3b01      	subs	r3, #1
 800215a:	b29a      	uxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002160:	e053      	b.n	800220a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b02      	cmp	r3, #2
 800216e:	d11b      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x176>
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002174:	b29b      	uxth	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_SPI_TransmitReceive+0x176>
 800217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800217c:	2b01      	cmp	r3, #1
 800217e:	d113      	bne.n	80021a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	881a      	ldrh	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002190:	1c9a      	adds	r2, r3, #2
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800219a:	b29b      	uxth	r3, r3
 800219c:	3b01      	subs	r3, #1
 800219e:	b29a      	uxth	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d119      	bne.n	80021ea <HAL_SPI_TransmitReceive+0x1b8>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d014      	beq.n	80021ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ca:	b292      	uxth	r2, r2
 80021cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	1c9a      	adds	r2, r3, #2
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021e6:	2301      	movs	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021ea:	f7fe fec7 	bl	8000f7c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d807      	bhi.n	800220a <HAL_SPI_TransmitReceive+0x1d8>
 80021fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002200:	d003      	beq.n	800220a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002208:	e0a7      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800220e:	b29b      	uxth	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1a6      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x130>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1a1      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x130>
 800221e:	e07c      	b.n	800231a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d002      	beq.n	800222e <HAL_SPI_TransmitReceive+0x1fc>
 8002228:	8b7b      	ldrh	r3, [r7, #26]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d16b      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	330c      	adds	r3, #12
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002254:	e057      	b.n	8002306 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b02      	cmp	r3, #2
 8002262:	d11c      	bne.n	800229e <HAL_SPI_TransmitReceive+0x26c>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002268:	b29b      	uxth	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d017      	beq.n	800229e <HAL_SPI_TransmitReceive+0x26c>
 800226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002270:	2b01      	cmp	r3, #1
 8002272:	d114      	bne.n	800229e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	330c      	adds	r3, #12
 800227e:	7812      	ldrb	r2, [r2, #0]
 8002280:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002290:	b29b      	uxth	r3, r3
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 0301 	and.w	r3, r3, #1
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d119      	bne.n	80022e0 <HAL_SPI_TransmitReceive+0x2ae>
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d014      	beq.n	80022e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022dc:	2301      	movs	r3, #1
 80022de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022e0:	f7fe fe4c 	bl	8000f7c <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d803      	bhi.n	80022f8 <HAL_SPI_TransmitReceive+0x2c6>
 80022f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f6:	d102      	bne.n	80022fe <HAL_SPI_TransmitReceive+0x2cc>
 80022f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d103      	bne.n	8002306 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002304:	e029      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800230a:	b29b      	uxth	r3, r3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1a2      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x224>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002314:	b29b      	uxth	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d19d      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800231a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f8b2 	bl	8002488 <SPI_EndRxTxTransaction>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d006      	beq.n	8002338 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002336:	e010      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	e000      	b.n	800235a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002358:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800236a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800236e:	4618      	mov	r0, r3
 8002370:	3730      	adds	r7, #48	; 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	603b      	str	r3, [r7, #0]
 8002384:	4613      	mov	r3, r2
 8002386:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002388:	f7fe fdf8 	bl	8000f7c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	683a      	ldr	r2, [r7, #0]
 8002394:	4413      	add	r3, r2
 8002396:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002398:	f7fe fdf0 	bl	8000f7c <HAL_GetTick>
 800239c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	015b      	lsls	r3, r3, #5
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	fb02 f303 	mul.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023ae:	e054      	b.n	800245a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b6:	d050      	beq.n	800245a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023b8:	f7fe fde0 	bl	8000f7c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	69fa      	ldr	r2, [r7, #28]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d902      	bls.n	80023ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d13d      	bne.n	800244a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e6:	d111      	bne.n	800240c <SPI_WaitFlagStateUntilTimeout+0x94>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f0:	d004      	beq.n	80023fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	d107      	bne.n	800240c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800240a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002414:	d10f      	bne.n	8002436 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002434:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e017      	b.n	800247a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	3b01      	subs	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	4013      	ands	r3, r2
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	429a      	cmp	r2, r3
 8002468:	bf0c      	ite	eq
 800246a:	2301      	moveq	r3, #1
 800246c:	2300      	movne	r3, #0
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	79fb      	ldrb	r3, [r7, #7]
 8002474:	429a      	cmp	r2, r3
 8002476:	d19b      	bne.n	80023b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3720      	adds	r7, #32
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000008 	.word	0x20000008

08002488 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002494:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <SPI_EndRxTxTransaction+0x7c>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a1b      	ldr	r2, [pc, #108]	; (8002508 <SPI_EndRxTxTransaction+0x80>)
 800249a:	fba2 2303 	umull	r2, r3, r2, r3
 800249e:	0d5b      	lsrs	r3, r3, #21
 80024a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024b2:	d112      	bne.n	80024da <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	2200      	movs	r2, #0
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff ff5a 	bl	8002378 <SPI_WaitFlagStateUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d016      	beq.n	80024f8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ce:	f043 0220 	orr.w	r2, r3, #32
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e00f      	b.n	80024fa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d00a      	beq.n	80024f6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f0:	2b80      	cmp	r3, #128	; 0x80
 80024f2:	d0f2      	beq.n	80024da <SPI_EndRxTxTransaction+0x52>
 80024f4:	e000      	b.n	80024f8 <SPI_EndRxTxTransaction+0x70>
        break;
 80024f6:	bf00      	nop
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000008 	.word	0x20000008
 8002508:	165e9f81 	.word	0x165e9f81

0800250c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e041      	b.n	80025a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f002 faa4 	bl	8004a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f000 f9a0 	bl	8002890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d109      	bne.n	80025d0 <HAL_TIM_PWM_Start+0x24>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e022      	b.n	8002616 <HAL_TIM_PWM_Start+0x6a>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d109      	bne.n	80025ea <HAL_TIM_PWM_Start+0x3e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	bf14      	ite	ne
 80025e2:	2301      	movne	r3, #1
 80025e4:	2300      	moveq	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	e015      	b.n	8002616 <HAL_TIM_PWM_Start+0x6a>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	2b08      	cmp	r3, #8
 80025ee:	d109      	bne.n	8002604 <HAL_TIM_PWM_Start+0x58>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	bf14      	ite	ne
 80025fc:	2301      	movne	r3, #1
 80025fe:	2300      	moveq	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e008      	b.n	8002616 <HAL_TIM_PWM_Start+0x6a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b01      	cmp	r3, #1
 800260e:	bf14      	ite	ne
 8002610:	2301      	movne	r3, #1
 8002612:	2300      	moveq	r3, #0
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e068      	b.n	80026f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0x82>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	e013      	b.n	8002656 <HAL_TIM_PWM_Start+0xaa>
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	2b04      	cmp	r3, #4
 8002632:	d104      	bne.n	800263e <HAL_TIM_PWM_Start+0x92>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800263c:	e00b      	b.n	8002656 <HAL_TIM_PWM_Start+0xaa>
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d104      	bne.n	800264e <HAL_TIM_PWM_Start+0xa2>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2202      	movs	r2, #2
 8002648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800264c:	e003      	b.n	8002656 <HAL_TIM_PWM_Start+0xaa>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	6839      	ldr	r1, [r7, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 fb22 	bl	8002ca8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_TIM_PWM_Start+0x14c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d107      	bne.n	800267e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800267c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1d      	ldr	r2, [pc, #116]	; (80026f8 <HAL_TIM_PWM_Start+0x14c>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d018      	beq.n	80026ba <HAL_TIM_PWM_Start+0x10e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d013      	beq.n	80026ba <HAL_TIM_PWM_Start+0x10e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a19      	ldr	r2, [pc, #100]	; (80026fc <HAL_TIM_PWM_Start+0x150>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00e      	beq.n	80026ba <HAL_TIM_PWM_Start+0x10e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a17      	ldr	r2, [pc, #92]	; (8002700 <HAL_TIM_PWM_Start+0x154>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_TIM_PWM_Start+0x10e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a16      	ldr	r2, [pc, #88]	; (8002704 <HAL_TIM_PWM_Start+0x158>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <HAL_TIM_PWM_Start+0x10e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a14      	ldr	r2, [pc, #80]	; (8002708 <HAL_TIM_PWM_Start+0x15c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d111      	bne.n	80026de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b06      	cmp	r3, #6
 80026ca:	d010      	beq.n	80026ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026dc:	e007      	b.n	80026ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f042 0201 	orr.w	r2, r2, #1
 80026ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40010000 	.word	0x40010000
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40000c00 	.word	0x40000c00
 8002708:	40014000 	.word	0x40014000

0800270c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002718:	2300      	movs	r3, #0
 800271a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002722:	2b01      	cmp	r3, #1
 8002724:	d101      	bne.n	800272a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002726:	2302      	movs	r3, #2
 8002728:	e0ae      	b.n	8002888 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b0c      	cmp	r3, #12
 8002736:	f200 809f 	bhi.w	8002878 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800273a:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002740:	08002775 	.word	0x08002775
 8002744:	08002879 	.word	0x08002879
 8002748:	08002879 	.word	0x08002879
 800274c:	08002879 	.word	0x08002879
 8002750:	080027b5 	.word	0x080027b5
 8002754:	08002879 	.word	0x08002879
 8002758:	08002879 	.word	0x08002879
 800275c:	08002879 	.word	0x08002879
 8002760:	080027f7 	.word	0x080027f7
 8002764:	08002879 	.word	0x08002879
 8002768:	08002879 	.word	0x08002879
 800276c:	08002879 	.word	0x08002879
 8002770:	08002837 	.word	0x08002837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f908 	bl	8002990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0208 	orr.w	r2, r2, #8
 800278e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0204 	bic.w	r2, r2, #4
 800279e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6999      	ldr	r1, [r3, #24]
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	691a      	ldr	r2, [r3, #16]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	619a      	str	r2, [r3, #24]
      break;
 80027b2:	e064      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f94e 	bl	8002a5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	699a      	ldr	r2, [r3, #24]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	699a      	ldr	r2, [r3, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6999      	ldr	r1, [r3, #24]
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	021a      	lsls	r2, r3, #8
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	619a      	str	r2, [r3, #24]
      break;
 80027f4:	e043      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	68b9      	ldr	r1, [r7, #8]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 f999 	bl	8002b34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69da      	ldr	r2, [r3, #28]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0208 	orr.w	r2, r2, #8
 8002810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0204 	bic.w	r2, r2, #4
 8002820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69d9      	ldr	r1, [r3, #28]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	61da      	str	r2, [r3, #28]
      break;
 8002834:	e023      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68b9      	ldr	r1, [r7, #8]
 800283c:	4618      	mov	r0, r3
 800283e:	f000 f9e3 	bl	8002c08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	69da      	ldr	r2, [r3, #28]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69d9      	ldr	r1, [r3, #28]
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	61da      	str	r2, [r3, #28]
      break;
 8002876:	e002      	b.n	800287e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	75fb      	strb	r3, [r7, #23]
      break;
 800287c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002886:	7dfb      	ldrb	r3, [r7, #23]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3718      	adds	r7, #24
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a34      	ldr	r2, [pc, #208]	; (8002974 <TIM_Base_SetConfig+0xe4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d00f      	beq.n	80028c8 <TIM_Base_SetConfig+0x38>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ae:	d00b      	beq.n	80028c8 <TIM_Base_SetConfig+0x38>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	4a31      	ldr	r2, [pc, #196]	; (8002978 <TIM_Base_SetConfig+0xe8>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d007      	beq.n	80028c8 <TIM_Base_SetConfig+0x38>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a30      	ldr	r2, [pc, #192]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d003      	beq.n	80028c8 <TIM_Base_SetConfig+0x38>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d108      	bne.n	80028da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a25      	ldr	r2, [pc, #148]	; (8002974 <TIM_Base_SetConfig+0xe4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d01b      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e8:	d017      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <TIM_Base_SetConfig+0xe8>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4a21      	ldr	r2, [pc, #132]	; (800297c <TIM_Base_SetConfig+0xec>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d00f      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <TIM_Base_SetConfig+0xf0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00b      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <TIM_Base_SetConfig+0xf4>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d007      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <TIM_Base_SetConfig+0xf8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d003      	beq.n	800291a <TIM_Base_SetConfig+0x8a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <TIM_Base_SetConfig+0xfc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d108      	bne.n	800292c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	4313      	orrs	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	689a      	ldr	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4a08      	ldr	r2, [pc, #32]	; (8002974 <TIM_Base_SetConfig+0xe4>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d103      	bne.n	8002960 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691a      	ldr	r2, [r3, #16]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	615a      	str	r2, [r3, #20]
}
 8002966:	bf00      	nop
 8002968:	3714      	adds	r7, #20
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40010000 	.word	0x40010000
 8002978:	40000400 	.word	0x40000400
 800297c:	40000800 	.word	0x40000800
 8002980:	40000c00 	.word	0x40000c00
 8002984:	40014000 	.word	0x40014000
 8002988:	40014400 	.word	0x40014400
 800298c:	40014800 	.word	0x40014800

08002990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a1b      	ldr	r3, [r3, #32]
 80029aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0303 	bic.w	r3, r3, #3
 80029c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	f023 0302 	bic.w	r3, r3, #2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <TIM_OC1_SetConfig+0xc8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d10c      	bne.n	8002a06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <TIM_OC1_SetConfig+0xc8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d111      	bne.n	8002a32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685a      	ldr	r2, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	621a      	str	r2, [r3, #32]
}
 8002a4c:	bf00      	nop
 8002a4e:	371c      	adds	r7, #28
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	40010000 	.word	0x40010000

08002a5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f023 0210 	bic.w	r2, r3, #16
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0320 	bic.w	r3, r3, #32
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a1e      	ldr	r2, [pc, #120]	; (8002b30 <TIM_OC2_SetConfig+0xd4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a15      	ldr	r2, [pc, #84]	; (8002b30 <TIM_OC2_SetConfig+0xd4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d113      	bne.n	8002b08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	621a      	str	r2, [r3, #32]
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	40010000 	.word	0x40010000

08002b34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a1b      	ldr	r3, [r3, #32]
 8002b42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69db      	ldr	r3, [r3, #28]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0303 	bic.w	r3, r3, #3
 8002b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	021b      	lsls	r3, r3, #8
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	; (8002c04 <TIM_OC3_SetConfig+0xd0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d10d      	bne.n	8002bae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a14      	ldr	r2, [pc, #80]	; (8002c04 <TIM_OC3_SetConfig+0xd0>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d113      	bne.n	8002bde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68fa      	ldr	r2, [r7, #12]
 8002be8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	621a      	str	r2, [r3, #32]
}
 8002bf8:	bf00      	nop
 8002bfa:	371c      	adds	r7, #28
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	40010000 	.word	0x40010000

08002c08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a1b      	ldr	r3, [r3, #32]
 8002c22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	021b      	lsls	r3, r3, #8
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	031b      	lsls	r3, r3, #12
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <TIM_OC4_SetConfig+0x9c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d109      	bne.n	8002c7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	019b      	lsls	r3, r3, #6
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	621a      	str	r2, [r3, #32]
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000

08002ca8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	401a      	ands	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a1a      	ldr	r2, [r3, #32]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f003 031f 	and.w	r3, r3, #31
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	431a      	orrs	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
}
 8002ce6:	bf00      	nop
 8002ce8:	371c      	adds	r7, #28
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
	...

08002cf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d101      	bne.n	8002d0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d08:	2302      	movs	r3, #2
 8002d0a:	e050      	b.n	8002dae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d018      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d58:	d013      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00e      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d009      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d004      	beq.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d10c      	bne.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	68ba      	ldr	r2, [r7, #8]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68ba      	ldr	r2, [r7, #8]
 8002d9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40010000 	.word	0x40010000
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800
 8002dc8:	40000c00 	.word	0x40000c00
 8002dcc:	40014000 	.word	0x40014000

08002dd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e03f      	b.n	8002e62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d106      	bne.n	8002dfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f001 fe9a 	bl	8004b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2224      	movs	r2, #36	; 0x24
 8002e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fe1d 	bl	8003a54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	691a      	ldr	r2, [r3, #16]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	; 0x28
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d17c      	bne.n	8002f84 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Transmit+0x2c>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e075      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_UART_Transmit+0x3e>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e06e      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2221      	movs	r2, #33	; 0x21
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ebe:	f7fe f85d 	bl	8000f7c <HAL_GetTick>
 8002ec2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ed8:	d108      	bne.n	8002eec <HAL_UART_Transmit+0x82>
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	691b      	ldr	r3, [r3, #16]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	61bb      	str	r3, [r7, #24]
 8002eea:	e003      	b.n	8002ef4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002efc:	e02a      	b.n	8002f54 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2180      	movs	r1, #128	; 0x80
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fb9b 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e036      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10b      	bne.n	8002f36 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3302      	adds	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
 8002f34:	e007      	b.n	8002f46 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	3301      	adds	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1cf      	bne.n	8002efe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	9300      	str	r3, [sp, #0]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2200      	movs	r2, #0
 8002f66:	2140      	movs	r1, #64	; 0x40
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 fb6b 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e006      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	e000      	b.n	8002f86 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f84:	2302      	movs	r3, #2
  }
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b08a      	sub	sp, #40	; 0x28
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	603b      	str	r3, [r7, #0]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b20      	cmp	r3, #32
 8002fac:	f040 808c 	bne.w	80030c8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d002      	beq.n	8002fbc <HAL_UART_Receive+0x2e>
 8002fb6:	88fb      	ldrh	r3, [r7, #6]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e084      	b.n	80030ca <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Receive+0x40>
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e07d      	b.n	80030ca <HAL_UART_Receive+0x13c>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2222      	movs	r2, #34	; 0x22
 8002fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fea:	f7fd ffc7 	bl	8000f7c <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	88fa      	ldrh	r2, [r7, #6]
 8002ff4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d108      	bne.n	8003018 <HAL_UART_Receive+0x8a>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d104      	bne.n	8003018 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800300e:	2300      	movs	r3, #0
 8003010:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	61bb      	str	r3, [r7, #24]
 8003016:	e003      	b.n	8003020 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800301c:	2300      	movs	r3, #0
 800301e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003028:	e043      	b.n	80030b2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	2200      	movs	r2, #0
 8003032:	2120      	movs	r1, #32
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fb05 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e042      	b.n	80030ca <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10c      	bne.n	8003064 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003056:	b29a      	uxth	r2, r3
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	3302      	adds	r3, #2
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	e01f      	b.n	80030a4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306c:	d007      	beq.n	800307e <HAL_UART_Receive+0xf0>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_UART_Receive+0xfe>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e008      	b.n	800309e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003098:	b2da      	uxtb	r2, r3
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	3301      	adds	r3, #1
 80030a2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	3b01      	subs	r3, #1
 80030ac:	b29a      	uxth	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1b6      	bne.n	800302a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030c4:	2300      	movs	r3, #0
 80030c6:	e000      	b.n	80030ca <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030c8:	2302      	movs	r3, #2
  }
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3720      	adds	r7, #32
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b0ba      	sub	sp, #232	; 0xe8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003100:	2300      	movs	r3, #0
 8003102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003112:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10f      	bne.n	800313a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800311a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800311e:	f003 0320 	and.w	r3, r3, #32
 8003122:	2b00      	cmp	r3, #0
 8003124:	d009      	beq.n	800313a <HAL_UART_IRQHandler+0x66>
 8003126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fbd3 	bl	80038de <UART_Receive_IT>
      return;
 8003138:	e256      	b.n	80035e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800313a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 80de 	beq.w	8003300 <HAL_UART_IRQHandler+0x22c>
 8003144:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d106      	bne.n	800315e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003154:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80d1 	beq.w	8003300 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800315e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_UART_IRQHandler+0xae>
 800316a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003172:	2b00      	cmp	r3, #0
 8003174:	d005      	beq.n	8003182 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003186:	f003 0304 	and.w	r3, r3, #4
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0xd2>
 800318e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0202 	orr.w	r2, r3, #2
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00b      	beq.n	80031ca <HAL_UART_IRQHandler+0xf6>
 80031b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d005      	beq.n	80031ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0204 	orr.w	r2, r3, #4
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d011      	beq.n	80031fa <HAL_UART_IRQHandler+0x126>
 80031d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d105      	bne.n	80031ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f043 0208 	orr.w	r2, r3, #8
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 81ed 	beq.w	80035de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x14e>
 8003210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d002      	beq.n	8003222 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 fb5e 	bl	80038de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d103      	bne.n	800324e <HAL_UART_IRQHandler+0x17a>
 8003246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04f      	beq.n	80032ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	f000 fa66 	bl	8003720 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800325e:	2b40      	cmp	r3, #64	; 0x40
 8003260:	d141      	bne.n	80032e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3314      	adds	r3, #20
 8003268:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800326c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003270:	e853 3f00 	ldrex	r3, [r3]
 8003274:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003278:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800327c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003280:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3314      	adds	r3, #20
 800328a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800328e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800329e:	e841 2300 	strex	r3, r2, [r1]
 80032a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1d9      	bne.n	8003262 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d013      	beq.n	80032de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	4a7d      	ldr	r2, [pc, #500]	; (80034b0 <HAL_UART_IRQHandler+0x3dc>)
 80032bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f80b 	bl	80012de <HAL_DMA_Abort_IT>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d016      	beq.n	80032fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032d8:	4610      	mov	r0, r2
 80032da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032dc:	e00e      	b.n	80032fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 f99a 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	e00a      	b.n	80032fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 f996 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e006      	b.n	80032fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 f992 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032fa:	e170      	b.n	80035de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032fc:	bf00      	nop
    return;
 80032fe:	e16e      	b.n	80035de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	2b01      	cmp	r3, #1
 8003306:	f040 814a 	bne.w	800359e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800330a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800330e:	f003 0310 	and.w	r3, r3, #16
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 8143 	beq.w	800359e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	2b00      	cmp	r3, #0
 8003322:	f000 813c 	beq.w	800359e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003346:	2b40      	cmp	r3, #64	; 0x40
 8003348:	f040 80b4 	bne.w	80034b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003358:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800335c:	2b00      	cmp	r3, #0
 800335e:	f000 8140 	beq.w	80035e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336a:	429a      	cmp	r2, r3
 800336c:	f080 8139 	bcs.w	80035e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003376:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003382:	f000 8088 	beq.w	8003496 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	330c      	adds	r3, #12
 800338c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003394:	e853 3f00 	ldrex	r3, [r3]
 8003398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800339c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	330c      	adds	r3, #12
 80033ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1d9      	bne.n	8003386 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3314      	adds	r3, #20
 80033d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033dc:	e853 3f00 	ldrex	r3, [r3]
 80033e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e4:	f023 0301 	bic.w	r3, r3, #1
 80033e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3314      	adds	r3, #20
 80033f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e1      	bne.n	80033d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800341e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003420:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003432:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003434:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003438:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003440:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e3      	bne.n	800340e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2220      	movs	r2, #32
 800344a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	330c      	adds	r3, #12
 800345a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003464:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003466:	f023 0310 	bic.w	r3, r3, #16
 800346a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	330c      	adds	r3, #12
 8003474:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003478:	65ba      	str	r2, [r7, #88]	; 0x58
 800347a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800347e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003480:	e841 2300 	strex	r3, r2, [r1]
 8003484:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1e3      	bne.n	8003454 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd feb4 	bl	80011fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800349e:	b29b      	uxth	r3, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	4619      	mov	r1, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f8c0 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034ac:	e099      	b.n	80035e2 <HAL_UART_IRQHandler+0x50e>
 80034ae:	bf00      	nop
 80034b0:	080037e7 	.word	0x080037e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034bc:	b29b      	uxth	r3, r3
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 808b 	beq.w	80035e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80034d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 8086 	beq.w	80035e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	330c      	adds	r3, #12
 80034e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e4:	e853 3f00 	ldrex	r3, [r3]
 80034e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	330c      	adds	r3, #12
 80034fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034fe:	647a      	str	r2, [r7, #68]	; 0x44
 8003500:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800350c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e3      	bne.n	80034da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3314      	adds	r3, #20
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	e853 3f00 	ldrex	r3, [r3]
 8003520:	623b      	str	r3, [r7, #32]
   return(result);
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f023 0301 	bic.w	r3, r3, #1
 8003528:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3314      	adds	r3, #20
 8003532:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003536:	633a      	str	r2, [r7, #48]	; 0x30
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800353c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353e:	e841 2300 	strex	r3, r2, [r1]
 8003542:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1e3      	bne.n	8003512 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2220      	movs	r2, #32
 800354e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	330c      	adds	r3, #12
 800355e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	60fb      	str	r3, [r7, #12]
   return(result);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0310 	bic.w	r3, r3, #16
 800356e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800357c:	61fa      	str	r2, [r7, #28]
 800357e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	69b9      	ldr	r1, [r7, #24]
 8003582:	69fa      	ldr	r2, [r7, #28]
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	617b      	str	r3, [r7, #20]
   return(result);
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e3      	bne.n	8003558 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003590:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f848 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800359c:	e023      	b.n	80035e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800359e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d009      	beq.n	80035be <HAL_UART_IRQHandler+0x4ea>
 80035aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f929 	bl	800380e <UART_Transmit_IT>
    return;
 80035bc:	e014      	b.n	80035e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d00e      	beq.n	80035e8 <HAL_UART_IRQHandler+0x514>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d008      	beq.n	80035e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 f969 	bl	80038ae <UART_EndTransmit_IT>
    return;
 80035dc:	e004      	b.n	80035e8 <HAL_UART_IRQHandler+0x514>
    return;
 80035de:	bf00      	nop
 80035e0:	e002      	b.n	80035e8 <HAL_UART_IRQHandler+0x514>
      return;
 80035e2:	bf00      	nop
 80035e4:	e000      	b.n	80035e8 <HAL_UART_IRQHandler+0x514>
      return;
 80035e6:	bf00      	nop
  }
}
 80035e8:	37e8      	adds	r7, #232	; 0xe8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop

080035f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b090      	sub	sp, #64	; 0x40
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4613      	mov	r3, r2
 8003652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	e050      	b.n	80036f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365c:	d04c      	beq.n	80036f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800365e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003660:	2b00      	cmp	r3, #0
 8003662:	d007      	beq.n	8003674 <UART_WaitOnFlagUntilTimeout+0x30>
 8003664:	f7fd fc8a 	bl	8000f7c <HAL_GetTick>
 8003668:	4602      	mov	r2, r0
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	1ad3      	subs	r3, r2, r3
 800366e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003670:	429a      	cmp	r2, r3
 8003672:	d241      	bcs.n	80036f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	330c      	adds	r3, #12
 800367a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367e:	e853 3f00 	ldrex	r3, [r3]
 8003682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003686:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800368a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	330c      	adds	r3, #12
 8003692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003694:	637a      	str	r2, [r7, #52]	; 0x34
 8003696:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800369a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e5      	bne.n	8003674 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3314      	adds	r3, #20
 80036ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	613b      	str	r3, [r7, #16]
   return(result);
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f023 0301 	bic.w	r3, r3, #1
 80036be:	63bb      	str	r3, [r7, #56]	; 0x38
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	3314      	adds	r3, #20
 80036c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c8:	623a      	str	r2, [r7, #32]
 80036ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	69f9      	ldr	r1, [r7, #28]
 80036ce:	6a3a      	ldr	r2, [r7, #32]
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e5      	bne.n	80036a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2220      	movs	r2, #32
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e00f      	b.n	8003718 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	4013      	ands	r3, r2
 8003702:	68ba      	ldr	r2, [r7, #8]
 8003704:	429a      	cmp	r2, r3
 8003706:	bf0c      	ite	eq
 8003708:	2301      	moveq	r3, #1
 800370a:	2300      	movne	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	429a      	cmp	r2, r3
 8003714:	d09f      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003716:	2300      	movs	r3, #0
}
 8003718:	4618      	mov	r0, r3
 800371a:	3740      	adds	r7, #64	; 0x40
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003720:	b480      	push	{r7}
 8003722:	b095      	sub	sp, #84	; 0x54
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	330c      	adds	r3, #12
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800373e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	330c      	adds	r3, #12
 8003746:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003748:	643a      	str	r2, [r7, #64]	; 0x40
 800374a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800374e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e5      	bne.n	8003728 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3314      	adds	r3, #20
 8003762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	6a3b      	ldr	r3, [r7, #32]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	61fb      	str	r3, [r7, #28]
   return(result);
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f023 0301 	bic.w	r3, r3, #1
 8003772:	64bb      	str	r3, [r7, #72]	; 0x48
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3314      	adds	r3, #20
 800377a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800377c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800377e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003784:	e841 2300 	strex	r3, r2, [r1]
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1e5      	bne.n	800375c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003794:	2b01      	cmp	r3, #1
 8003796:	d119      	bne.n	80037cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 0310 	bic.w	r3, r3, #16
 80037ae:	647b      	str	r3, [r7, #68]	; 0x44
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037b8:	61ba      	str	r2, [r7, #24]
 80037ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	613b      	str	r3, [r7, #16]
   return(result);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037da:	bf00      	nop
 80037dc:	3754      	adds	r7, #84	; 0x54
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f7ff ff09 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003806:	bf00      	nop
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b21      	cmp	r3, #33	; 0x21
 8003820:	d13e      	bne.n	80038a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d114      	bne.n	8003856 <UART_Transmit_IT+0x48>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d110      	bne.n	8003856 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	881b      	ldrh	r3, [r3, #0]
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003848:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	1c9a      	adds	r2, r3, #2
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	621a      	str	r2, [r3, #32]
 8003854:	e008      	b.n	8003868 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	1c59      	adds	r1, r3, #1
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6211      	str	r1, [r2, #32]
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29b      	uxth	r3, r3
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4619      	mov	r1, r3
 8003876:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800388a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800389a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	e000      	b.n	80038a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80038a0:	2302      	movs	r3, #2
  }
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3714      	adds	r7, #20
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68da      	ldr	r2, [r3, #12]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2220      	movs	r2, #32
 80038ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7ff fe8e 	bl	80035f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b08c      	sub	sp, #48	; 0x30
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b22      	cmp	r3, #34	; 0x22
 80038f0:	f040 80ab 	bne.w	8003a4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fc:	d117      	bne.n	800392e <UART_Receive_IT+0x50>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d113      	bne.n	800392e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003906:	2300      	movs	r3, #0
 8003908:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	b29b      	uxth	r3, r3
 8003918:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800391c:	b29a      	uxth	r2, r3
 800391e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003920:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003926:	1c9a      	adds	r2, r3, #2
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	629a      	str	r2, [r3, #40]	; 0x28
 800392c:	e026      	b.n	800397c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003932:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d007      	beq.n	8003952 <UART_Receive_IT+0x74>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <UART_Receive_IT+0x82>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d106      	bne.n	8003960 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800395c:	701a      	strb	r2, [r3, #0]
 800395e:	e008      	b.n	8003972 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800396c:	b2da      	uxtb	r2, r3
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003980:	b29b      	uxth	r3, r3
 8003982:	3b01      	subs	r3, #1
 8003984:	b29b      	uxth	r3, r3
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4619      	mov	r1, r3
 800398a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800398c:	2b00      	cmp	r3, #0
 800398e:	d15a      	bne.n	8003a46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0220 	bic.w	r2, r2, #32
 800399e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695a      	ldr	r2, [r3, #20]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0201 	bic.w	r2, r2, #1
 80039be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2220      	movs	r2, #32
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d135      	bne.n	8003a3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	330c      	adds	r3, #12
 80039dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	e853 3f00 	ldrex	r3, [r3]
 80039e4:	613b      	str	r3, [r7, #16]
   return(result);
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f023 0310 	bic.w	r3, r3, #16
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	330c      	adds	r3, #12
 80039f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f6:	623a      	str	r2, [r7, #32]
 80039f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fa:	69f9      	ldr	r1, [r7, #28]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	e841 2300 	strex	r3, r2, [r1]
 8003a02:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1e5      	bne.n	80039d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0310 	and.w	r3, r3, #16
 8003a14:	2b10      	cmp	r3, #16
 8003a16:	d10a      	bne.n	8003a2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7ff fdf9 	bl	800362c <HAL_UARTEx_RxEventCallback>
 8003a3a:	e002      	b.n	8003a42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f7ff fde1 	bl	8003604 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e002      	b.n	8003a4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003a4a:	2302      	movs	r3, #2
  }
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3730      	adds	r7, #48	; 0x30
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a58:	b09f      	sub	sp, #124	; 0x7c
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6a:	68d9      	ldr	r1, [r3, #12]
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	ea40 0301 	orr.w	r3, r0, r1
 8003a74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	431a      	orrs	r2, r3
 8003a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a98:	f021 010c 	bic.w	r1, r1, #12
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	ea40 0301 	orr.w	r3, r0, r1
 8003abc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4bc5      	ldr	r3, [pc, #788]	; (8003dd8 <UART_SetConfig+0x384>)
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d004      	beq.n	8003ad2 <UART_SetConfig+0x7e>
 8003ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4bc3      	ldr	r3, [pc, #780]	; (8003ddc <UART_SetConfig+0x388>)
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d103      	bne.n	8003ada <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad2:	f7fe fa11 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 8003ad6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ad8:	e002      	b.n	8003ae0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ada:	f7fe f9f9 	bl	8001ed0 <HAL_RCC_GetPCLK1Freq>
 8003ade:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae8:	f040 80b6 	bne.w	8003c58 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aee:	461c      	mov	r4, r3
 8003af0:	f04f 0500 	mov.w	r5, #0
 8003af4:	4622      	mov	r2, r4
 8003af6:	462b      	mov	r3, r5
 8003af8:	1891      	adds	r1, r2, r2
 8003afa:	6439      	str	r1, [r7, #64]	; 0x40
 8003afc:	415b      	adcs	r3, r3
 8003afe:	647b      	str	r3, [r7, #68]	; 0x44
 8003b00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b04:	1912      	adds	r2, r2, r4
 8003b06:	eb45 0303 	adc.w	r3, r5, r3
 8003b0a:	f04f 0000 	mov.w	r0, #0
 8003b0e:	f04f 0100 	mov.w	r1, #0
 8003b12:	00d9      	lsls	r1, r3, #3
 8003b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b18:	00d0      	lsls	r0, r2, #3
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	1911      	adds	r1, r2, r4
 8003b20:	6639      	str	r1, [r7, #96]	; 0x60
 8003b22:	416b      	adcs	r3, r5
 8003b24:	667b      	str	r3, [r7, #100]	; 0x64
 8003b26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	1891      	adds	r1, r2, r2
 8003b32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b34:	415b      	adcs	r3, r3
 8003b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b40:	f7fd f83a 	bl	8000bb8 <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4ba5      	ldr	r3, [pc, #660]	; (8003de0 <UART_SetConfig+0x38c>)
 8003b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	011e      	lsls	r6, r3, #4
 8003b52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b54:	461c      	mov	r4, r3
 8003b56:	f04f 0500 	mov.w	r5, #0
 8003b5a:	4622      	mov	r2, r4
 8003b5c:	462b      	mov	r3, r5
 8003b5e:	1891      	adds	r1, r2, r2
 8003b60:	6339      	str	r1, [r7, #48]	; 0x30
 8003b62:	415b      	adcs	r3, r3
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b6a:	1912      	adds	r2, r2, r4
 8003b6c:	eb45 0303 	adc.w	r3, r5, r3
 8003b70:	f04f 0000 	mov.w	r0, #0
 8003b74:	f04f 0100 	mov.w	r1, #0
 8003b78:	00d9      	lsls	r1, r3, #3
 8003b7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b7e:	00d0      	lsls	r0, r2, #3
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	1911      	adds	r1, r2, r4
 8003b86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b88:	416b      	adcs	r3, r5
 8003b8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	461a      	mov	r2, r3
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	1891      	adds	r1, r2, r2
 8003b98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b9a:	415b      	adcs	r3, r3
 8003b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ba2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003ba6:	f7fd f807 	bl	8000bb8 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4b8c      	ldr	r3, [pc, #560]	; (8003de0 <UART_SetConfig+0x38c>)
 8003bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2164      	movs	r1, #100	; 0x64
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	3332      	adds	r3, #50	; 0x32
 8003bc2:	4a87      	ldr	r2, [pc, #540]	; (8003de0 <UART_SetConfig+0x38c>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bd0:	441e      	add	r6, r3
 8003bd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f04f 0100 	mov.w	r1, #0
 8003bda:	4602      	mov	r2, r0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	1894      	adds	r4, r2, r2
 8003be0:	623c      	str	r4, [r7, #32]
 8003be2:	415b      	adcs	r3, r3
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
 8003be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bea:	1812      	adds	r2, r2, r0
 8003bec:	eb41 0303 	adc.w	r3, r1, r3
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	f04f 0500 	mov.w	r5, #0
 8003bf8:	00dd      	lsls	r5, r3, #3
 8003bfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bfe:	00d4      	lsls	r4, r2, #3
 8003c00:	4622      	mov	r2, r4
 8003c02:	462b      	mov	r3, r5
 8003c04:	1814      	adds	r4, r2, r0
 8003c06:	653c      	str	r4, [r7, #80]	; 0x50
 8003c08:	414b      	adcs	r3, r1
 8003c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	1891      	adds	r1, r2, r2
 8003c18:	61b9      	str	r1, [r7, #24]
 8003c1a:	415b      	adcs	r3, r3
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c22:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003c26:	f7fc ffc7 	bl	8000bb8 <__aeabi_uldivmod>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	4b6c      	ldr	r3, [pc, #432]	; (8003de0 <UART_SetConfig+0x38c>)
 8003c30:	fba3 1302 	umull	r1, r3, r3, r2
 8003c34:	095b      	lsrs	r3, r3, #5
 8003c36:	2164      	movs	r1, #100	; 0x64
 8003c38:	fb01 f303 	mul.w	r3, r1, r3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	3332      	adds	r3, #50	; 0x32
 8003c42:	4a67      	ldr	r2, [pc, #412]	; (8003de0 <UART_SetConfig+0x38c>)
 8003c44:	fba2 2303 	umull	r2, r3, r2, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	f003 0207 	and.w	r2, r3, #7
 8003c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4432      	add	r2, r6
 8003c54:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c56:	e0b9      	b.n	8003dcc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c5a:	461c      	mov	r4, r3
 8003c5c:	f04f 0500 	mov.w	r5, #0
 8003c60:	4622      	mov	r2, r4
 8003c62:	462b      	mov	r3, r5
 8003c64:	1891      	adds	r1, r2, r2
 8003c66:	6139      	str	r1, [r7, #16]
 8003c68:	415b      	adcs	r3, r3
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c70:	1912      	adds	r2, r2, r4
 8003c72:	eb45 0303 	adc.w	r3, r5, r3
 8003c76:	f04f 0000 	mov.w	r0, #0
 8003c7a:	f04f 0100 	mov.w	r1, #0
 8003c7e:	00d9      	lsls	r1, r3, #3
 8003c80:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c84:	00d0      	lsls	r0, r2, #3
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	eb12 0804 	adds.w	r8, r2, r4
 8003c8e:	eb43 0905 	adc.w	r9, r3, r5
 8003c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f04f 0100 	mov.w	r1, #0
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	008b      	lsls	r3, r1, #2
 8003ca6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003caa:	0082      	lsls	r2, r0, #2
 8003cac:	4640      	mov	r0, r8
 8003cae:	4649      	mov	r1, r9
 8003cb0:	f7fc ff82 	bl	8000bb8 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4b49      	ldr	r3, [pc, #292]	; (8003de0 <UART_SetConfig+0x38c>)
 8003cba:	fba3 2302 	umull	r2, r3, r3, r2
 8003cbe:	095b      	lsrs	r3, r3, #5
 8003cc0:	011e      	lsls	r6, r3, #4
 8003cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f04f 0100 	mov.w	r1, #0
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	1894      	adds	r4, r2, r2
 8003cd0:	60bc      	str	r4, [r7, #8]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	60fb      	str	r3, [r7, #12]
 8003cd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cda:	1812      	adds	r2, r2, r0
 8003cdc:	eb41 0303 	adc.w	r3, r1, r3
 8003ce0:	f04f 0400 	mov.w	r4, #0
 8003ce4:	f04f 0500 	mov.w	r5, #0
 8003ce8:	00dd      	lsls	r5, r3, #3
 8003cea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cee:	00d4      	lsls	r4, r2, #3
 8003cf0:	4622      	mov	r2, r4
 8003cf2:	462b      	mov	r3, r5
 8003cf4:	1814      	adds	r4, r2, r0
 8003cf6:	64bc      	str	r4, [r7, #72]	; 0x48
 8003cf8:	414b      	adcs	r3, r1
 8003cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	008b      	lsls	r3, r1, #2
 8003d10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d14:	0082      	lsls	r2, r0, #2
 8003d16:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003d1a:	f7fc ff4d 	bl	8000bb8 <__aeabi_uldivmod>
 8003d1e:	4602      	mov	r2, r0
 8003d20:	460b      	mov	r3, r1
 8003d22:	4b2f      	ldr	r3, [pc, #188]	; (8003de0 <UART_SetConfig+0x38c>)
 8003d24:	fba3 1302 	umull	r1, r3, r3, r2
 8003d28:	095b      	lsrs	r3, r3, #5
 8003d2a:	2164      	movs	r1, #100	; 0x64
 8003d2c:	fb01 f303 	mul.w	r3, r1, r3
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	3332      	adds	r3, #50	; 0x32
 8003d36:	4a2a      	ldr	r2, [pc, #168]	; (8003de0 <UART_SetConfig+0x38c>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d42:	441e      	add	r6, r3
 8003d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d46:	4618      	mov	r0, r3
 8003d48:	f04f 0100 	mov.w	r1, #0
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	1894      	adds	r4, r2, r2
 8003d52:	603c      	str	r4, [r7, #0]
 8003d54:	415b      	adcs	r3, r3
 8003d56:	607b      	str	r3, [r7, #4]
 8003d58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d5c:	1812      	adds	r2, r2, r0
 8003d5e:	eb41 0303 	adc.w	r3, r1, r3
 8003d62:	f04f 0400 	mov.w	r4, #0
 8003d66:	f04f 0500 	mov.w	r5, #0
 8003d6a:	00dd      	lsls	r5, r3, #3
 8003d6c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d70:	00d4      	lsls	r4, r2, #3
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	eb12 0a00 	adds.w	sl, r2, r0
 8003d7a:	eb43 0b01 	adc.w	fp, r3, r1
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f04f 0100 	mov.w	r1, #0
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	008b      	lsls	r3, r1, #2
 8003d92:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d96:	0082      	lsls	r2, r0, #2
 8003d98:	4650      	mov	r0, sl
 8003d9a:	4659      	mov	r1, fp
 8003d9c:	f7fc ff0c 	bl	8000bb8 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <UART_SetConfig+0x38c>)
 8003da6:	fba3 1302 	umull	r1, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2164      	movs	r1, #100	; 0x64
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	1ad3      	subs	r3, r2, r3
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	3332      	adds	r3, #50	; 0x32
 8003db8:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <UART_SetConfig+0x38c>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4432      	add	r2, r6
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	bf00      	nop
 8003dce:	377c      	adds	r7, #124	; 0x7c
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40011000 	.word	0x40011000
 8003ddc:	40011400 	.word	0x40011400
 8003de0:	51eb851f 	.word	0x51eb851f

08003de4 <Error_Device>:
extern UART_HandleTypeDef huart1;
uint8_t buf2[8]={0};
char str1[100]={0};

static void Error_Device(uint8_t error)			 // Обработчик ошибок: устройство не является LIS2DS12
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b09c      	sub	sp, #112	; 0x70
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
	uint8_t strEr[100];

	sprintf((char*)strEr, "[ERROR] Device is not LIS2DS12, founded ID: 0x%02X\r\n", error);
 8003dee:	79fa      	ldrb	r2, [r7, #7]
 8003df0:	f107 030c 	add.w	r3, r7, #12
 8003df4:	4914      	ldr	r1, [pc, #80]	; (8003e48 <Error_Device+0x64>)
 8003df6:	4618      	mov	r0, r3
 8003df8:	f001 fcca 	bl	8005790 <siprintf>
	RS_485_ON;
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e02:	4812      	ldr	r0, [pc, #72]	; (8003e4c <Error_Device+0x68>)
 8003e04:	f7fd fc12 	bl	800162c <HAL_GPIO_WritePin>
	while(HAL_UART_Transmit(&huart1, (uint8_t*)strEr, strlen((char*)strEr), 0x1000) == HAL_BUSY);
 8003e08:	bf00      	nop
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f7fc f9e6 	bl	80001e0 <strlen>
 8003e14:	4603      	mov	r3, r0
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	f107 010c 	add.w	r1, r7, #12
 8003e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e20:	480b      	ldr	r0, [pc, #44]	; (8003e50 <Error_Device+0x6c>)
 8003e22:	f7ff f822 	bl	8002e6a <HAL_UART_Transmit>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d0ee      	beq.n	8003e0a <Error_Device+0x26>

	HAL_Delay(100);
 8003e2c:	2064      	movs	r0, #100	; 0x64
 8003e2e:	f7fd f8b1 	bl	8000f94 <HAL_Delay>
	RS_485_OFF;
 8003e32:	2200      	movs	r2, #0
 8003e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e38:	4804      	ldr	r0, [pc, #16]	; (8003e4c <Error_Device+0x68>)
 8003e3a:	f7fd fbf7 	bl	800162c <HAL_GPIO_WritePin>
}
 8003e3e:	bf00      	nop
 8003e40:	3770      	adds	r7, #112	; 0x70
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08007c00 	.word	0x08007c00
 8003e4c:	40020000 	.word	0x40020000
 8003e50:	20000278 	.word	0x20000278

08003e54 <Error_SPI>:

static void Error_SPI (void)			 // Обработчик ошибок: SPI не подключен
{
 8003e54:	b5b0      	push	{r4, r5, r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
	uint8_t strEr[]="[ERROR] SPI is not linked\r\n";
 8003e5a:	4b14      	ldr	r3, [pc, #80]	; (8003eac <Error_SPI+0x58>)
 8003e5c:	1d3c      	adds	r4, r7, #4
 8003e5e:	461d      	mov	r5, r3
 8003e60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	RS_485_ON;
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e72:	480f      	ldr	r0, [pc, #60]	; (8003eb0 <Error_SPI+0x5c>)
 8003e74:	f7fd fbda 	bl	800162c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)strEr, strlen((char*)strEr), 0x1000);
 8003e78:	1d3b      	adds	r3, r7, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fc f9b0 	bl	80001e0 <strlen>
 8003e80:	4603      	mov	r3, r0
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	1d39      	adds	r1, r7, #4
 8003e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e8a:	480a      	ldr	r0, [pc, #40]	; (8003eb4 <Error_SPI+0x60>)
 8003e8c:	f7fe ffed 	bl	8002e6a <HAL_UART_Transmit>
	HAL_Delay(100);
 8003e90:	2064      	movs	r0, #100	; 0x64
 8003e92:	f7fd f87f 	bl	8000f94 <HAL_Delay>
	RS_485_OFF;
 8003e96:	2200      	movs	r2, #0
 8003e98:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e9c:	4804      	ldr	r0, [pc, #16]	; (8003eb0 <Error_SPI+0x5c>)
 8003e9e:	f7fd fbc5 	bl	800162c <HAL_GPIO_WritePin>
}
 8003ea2:	bf00      	nop
 8003ea4:	3720      	adds	r7, #32
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	08007c38 	.word	0x08007c38
 8003eb0:	40020000 	.word	0x40020000
 8003eb4:	20000278 	.word	0x20000278

08003eb8 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) 	 // Функция работы с SPI
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000) != HAL_OK)
 8003ec6:	f107 020f 	add.w	r2, r7, #15
 8003eca:	1df9      	adds	r1, r7, #7
 8003ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4806      	ldr	r0, [pc, #24]	; (8003ef0 <SPIx_WriteRead+0x38>)
 8003ed6:	f7fe f8ac 	bl	8002032 <HAL_SPI_TransmitReceive>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <SPIx_WriteRead+0x2c>
	{
		Error_SPI();
 8003ee0:	f7ff ffb8 	bl	8003e54 <Error_SPI>
	}
	return receivedbyte;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	200002bc 	.word	0x200002bc

08003ef4 <Accel_IO_Read>:

void Accel_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) // Функция чтения с акселлерометра
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	460b      	mov	r3, r1
 8003efe:	70fb      	strb	r3, [r7, #3]
 8003f00:	4613      	mov	r3, r2
 8003f02:	803b      	strh	r3, [r7, #0]
	if(NumByteToRead>0x01)
 8003f04:	883b      	ldrh	r3, [r7, #0]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d904      	bls.n	8003f14 <Accel_IO_Read+0x20>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003f0a:	78fb      	ldrb	r3, [r7, #3]
 8003f0c:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003f10:	70fb      	strb	r3, [r7, #3]
 8003f12:	e003      	b.n	8003f1c <Accel_IO_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t) READWRITE_CMD;
 8003f14:	78fb      	ldrb	r3, [r7, #3]
 8003f16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f1a:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	2110      	movs	r1, #16
 8003f20:	4810      	ldr	r0, [pc, #64]	; (8003f64 <Accel_IO_Read+0x70>)
 8003f22:	f7fd fb83 	bl	800162c <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 8003f26:	78fb      	ldrb	r3, [r7, #3]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ffc5 	bl	8003eb8 <SPIx_WriteRead>
	while(NumByteToRead>0x00)
 8003f2e:	e00c      	b.n	8003f4a <Accel_IO_Read+0x56>
	{
		 *pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f7ff ffc1 	bl	8003eb8 <SPIx_WriteRead>
 8003f36:	4603      	mov	r3, r0
 8003f38:	461a      	mov	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	701a      	strb	r2, [r3, #0]
		 NumByteToRead--;
 8003f3e:	883b      	ldrh	r3, [r7, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	803b      	strh	r3, [r7, #0]
		 pBuffer++;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	3301      	adds	r3, #1
 8003f48:	607b      	str	r3, [r7, #4]
	while(NumByteToRead>0x00)
 8003f4a:	883b      	ldrh	r3, [r7, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1ef      	bne.n	8003f30 <Accel_IO_Read+0x3c>
	}
	CS_OFF;
 8003f50:	2201      	movs	r2, #1
 8003f52:	2110      	movs	r1, #16
 8003f54:	4803      	ldr	r0, [pc, #12]	; (8003f64 <Accel_IO_Read+0x70>)
 8003f56:	f7fd fb69 	bl	800162c <HAL_GPIO_WritePin>
}
 8003f5a:	bf00      	nop
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40020000 	.word	0x40020000

08003f68 <Accel_IO_Write>:

void Accel_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) // Функция записи в акселлерометр
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
 8003f74:	4613      	mov	r3, r2
 8003f76:	803b      	strh	r3, [r7, #0]
	CS_OFF;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	2110      	movs	r1, #16
 8003f7c:	4815      	ldr	r0, [pc, #84]	; (8003fd4 <Accel_IO_Write+0x6c>)
 8003f7e:	f7fd fb55 	bl	800162c <HAL_GPIO_WritePin>
	if(NumByteToWrite>0x01)
 8003f82:	883b      	ldrh	r3, [r7, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d903      	bls.n	8003f90 <Accel_IO_Write+0x28>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f8e:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8003f90:	2200      	movs	r2, #0
 8003f92:	2110      	movs	r1, #16
 8003f94:	480f      	ldr	r0, [pc, #60]	; (8003fd4 <Accel_IO_Write+0x6c>)
 8003f96:	f7fd fb49 	bl	800162c <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 8003f9a:	78fb      	ldrb	r3, [r7, #3]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff8b 	bl	8003eb8 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8003fa2:	e00a      	b.n	8003fba <Accel_IO_Write+0x52>
	{
		SPIx_WriteRead(*pBuffer);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff85 	bl	8003eb8 <SPIx_WriteRead>
		NumByteToWrite--;
 8003fae:	883b      	ldrh	r3, [r7, #0]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8003fba:	883b      	ldrh	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d1f1      	bne.n	8003fa4 <Accel_IO_Write+0x3c>
	}
	CS_OFF;
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	2110      	movs	r1, #16
 8003fc4:	4803      	ldr	r0, [pc, #12]	; (8003fd4 <Accel_IO_Write+0x6c>)
 8003fc6:	f7fd fb31 	bl	800162c <HAL_GPIO_WritePin>
}
 8003fca:	bf00      	nop
 8003fcc:	3708      	adds	r7, #8
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	40020000 	.word	0x40020000

08003fd8 <Accel_ReadID>:

uint8_t Accel_ReadID(void)			 // Функция чтения идентификатора акселлерометра
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	71fb      	strb	r3, [r7, #7]
  Accel_IO_Read(&ctrl, LIS2DS12_WHO_AM_I_ADDR, 1);
 8003fe2:	1dfb      	adds	r3, r7, #7
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	210f      	movs	r1, #15
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff ff83 	bl	8003ef4 <Accel_IO_Read>
  return ctrl;
 8003fee:	79fb      	ldrb	r3, [r7, #7]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData)	 // Функция получения данных с акселлерометра
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b088      	sub	sp, #32
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	uint8_t ctrl, i = 0x00;
 8004000:	2300      	movs	r3, #0
 8004002:	77fb      	strb	r3, [r7, #31]
	float sensitivity = LIS2DS12_SENSITIVITY_0_06G;
 8004004:	4b36      	ldr	r3, [pc, #216]	; (80040e0 <Accel_GetXYZ+0xe8>)
 8004006:	61bb      	str	r3, [r7, #24]
	float valueinfloat;
	Accel_IO_Read(&ctrl, LIS2DS12_CTRL1, 1);
 8004008:	f107 030b 	add.w	r3, r7, #11
 800400c:	2201      	movs	r2, #1
 800400e:	2120      	movs	r1, #32
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff6f 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[0], LIS2DS12_OUT_X_L, 1);
 8004016:	f107 030c 	add.w	r3, r7, #12
 800401a:	2201      	movs	r2, #1
 800401c:	2128      	movs	r1, #40	; 0x28
 800401e:	4618      	mov	r0, r3
 8004020:	f7ff ff68 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[1], LIS2DS12_OUT_X_H, 1);
 8004024:	f107 030c 	add.w	r3, r7, #12
 8004028:	3301      	adds	r3, #1
 800402a:	2201      	movs	r2, #1
 800402c:	2129      	movs	r1, #41	; 0x29
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff60 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[2], LIS2DS12_OUT_Y_L, 1);
 8004034:	f107 030c 	add.w	r3, r7, #12
 8004038:	3302      	adds	r3, #2
 800403a:	2201      	movs	r2, #1
 800403c:	212a      	movs	r1, #42	; 0x2a
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff58 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[3], LIS2DS12_OUT_Y_H, 1);
 8004044:	f107 030c 	add.w	r3, r7, #12
 8004048:	3303      	adds	r3, #3
 800404a:	2201      	movs	r2, #1
 800404c:	212b      	movs	r1, #43	; 0x2b
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff50 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[4], LIS2DS12_OUT_Z_L, 1);
 8004054:	f107 030c 	add.w	r3, r7, #12
 8004058:	3304      	adds	r3, #4
 800405a:	2201      	movs	r2, #1
 800405c:	212c      	movs	r1, #44	; 0x2c
 800405e:	4618      	mov	r0, r3
 8004060:	f7ff ff48 	bl	8003ef4 <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[5], LIS2DS12_OUT_Z_H, 1);
 8004064:	f107 030c 	add.w	r3, r7, #12
 8004068:	3305      	adds	r3, #5
 800406a:	2201      	movs	r2, #1
 800406c:	212d      	movs	r1, #45	; 0x2d
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff ff40 	bl	8003ef4 <Accel_IO_Read>
	for(i=0;i<3;i++)
 8004074:	2300      	movs	r3, #0
 8004076:	77fb      	strb	r3, [r7, #31]
 8004078:	e029      	b.n	80040ce <Accel_GetXYZ+0xd6>
	{
		valueinfloat = ((buffer[2*i+1]  << 8) + buffer[2*i])*sensitivity;
 800407a:	7ffb      	ldrb	r3, [r7, #31]
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	3301      	adds	r3, #1
 8004080:	f107 0220 	add.w	r2, r7, #32
 8004084:	4413      	add	r3, r2
 8004086:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 800408a:	021b      	lsls	r3, r3, #8
 800408c:	7ffa      	ldrb	r2, [r7, #31]
 800408e:	0052      	lsls	r2, r2, #1
 8004090:	f107 0120 	add.w	r1, r7, #32
 8004094:	440a      	add	r2, r1
 8004096:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 800409a:	4413      	add	r3, r2
 800409c:	ee07 3a90 	vmov	s15, r3
 80040a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80040a4:	ed97 7a06 	vldr	s14, [r7, #24]
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	edc7 7a05 	vstr	s15, [r7, #20]
		pData[i]=(int16_t)valueinfloat;
 80040b0:	7ffb      	ldrb	r3, [r7, #31]
 80040b2:	005b      	lsls	r3, r3, #1
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	4413      	add	r3, r2
 80040b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040c0:	ee17 2a90 	vmov	r2, s15
 80040c4:	b212      	sxth	r2, r2
 80040c6:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 80040c8:	7ffb      	ldrb	r3, [r7, #31]
 80040ca:	3301      	adds	r3, #1
 80040cc:	77fb      	strb	r3, [r7, #31]
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d9d2      	bls.n	800407a <Accel_GetXYZ+0x82>
	}
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	3720      	adds	r7, #32
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	3d75c28f 	.word	0x3d75c28f

080040e4 <Accel_ReadAcc>:

void Accel_ReadAcc(void) 			// Функция обработки данных с акселлерометра и отправка по RS485
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af02      	add	r7, sp, #8
	int16_t buffer[3]={0};
 80040ea:	1d3b      	adds	r3, r7, #4
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
 80040f0:	809a      	strh	r2, [r3, #4]
	int16_t xval, yval, zval = 0x0000;
 80040f2:	2300      	movs	r3, #0
 80040f4:	81fb      	strh	r3, [r7, #14]
	Accel_GetXYZ(buffer);
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff7d 	bl	8003ff8 <Accel_GetXYZ>
	xval = buffer[0];
 80040fe:	88bb      	ldrh	r3, [r7, #4]
 8004100:	81bb      	strh	r3, [r7, #12]
	yval = buffer[1];
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	817b      	strh	r3, [r7, #10]
	zval = buffer[2];
 8004106:	893b      	ldrh	r3, [r7, #8]
 8004108:	81fb      	strh	r3, [r7, #14]
	sprintf(str1, "[DATA] X:%06d Y:%06d Z:%06d\r\n", xval, yval, zval);
 800410a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800410e:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8004112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	460b      	mov	r3, r1
 800411a:	4911      	ldr	r1, [pc, #68]	; (8004160 <Accel_ReadAcc+0x7c>)
 800411c:	4811      	ldr	r0, [pc, #68]	; (8004164 <Accel_ReadAcc+0x80>)
 800411e:	f001 fb37 	bl	8005790 <siprintf>
	RS_485_ON;
 8004122:	2201      	movs	r2, #1
 8004124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004128:	480f      	ldr	r0, [pc, #60]	; (8004168 <Accel_ReadAcc+0x84>)
 800412a:	f7fd fa7f 	bl	800162c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)str1, strlen(str1), 0x1000);
 800412e:	480d      	ldr	r0, [pc, #52]	; (8004164 <Accel_ReadAcc+0x80>)
 8004130:	f7fc f856 	bl	80001e0 <strlen>
 8004134:	4603      	mov	r3, r0
 8004136:	b29a      	uxth	r2, r3
 8004138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800413c:	4909      	ldr	r1, [pc, #36]	; (8004164 <Accel_ReadAcc+0x80>)
 800413e:	480b      	ldr	r0, [pc, #44]	; (800416c <Accel_ReadAcc+0x88>)
 8004140:	f7fe fe93 	bl	8002e6a <HAL_UART_Transmit>
	RS_485_OFF;
 8004144:	2200      	movs	r2, #0
 8004146:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800414a:	4807      	ldr	r0, [pc, #28]	; (8004168 <Accel_ReadAcc+0x84>)
 800414c:	f7fd fa6e 	bl	800162c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8004150:	2064      	movs	r0, #100	; 0x64
 8004152:	f7fc ff1f 	bl	8000f94 <HAL_Delay>
}
 8004156:	bf00      	nop
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	08007c54 	.word	0x08007c54
 8004164:	200001f8 	.word	0x200001f8
 8004168:	40020000 	.word	0x40020000
 800416c:	20000278 	.word	0x20000278

08004170 <Accel_Ini>:

void Accel_Ini(void)				 // Функция инициализации акселлерометра
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
	uint8_t ctrl1 = 0x00;
 8004176:	2300      	movs	r3, #0
 8004178:	71fb      	strb	r3, [r7, #7]
	uint8_t ctrl2 = 0x00;
 800417a:	2300      	movs	r3, #0
 800417c:	71bb      	strb	r3, [r7, #6]
	uint8_t ctrl4 = 0x00;
 800417e:	2300      	movs	r3, #0
 8004180:	717b      	strb	r3, [r7, #5]
	HAL_Delay(1000);
 8004182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004186:	f7fc ff05 	bl	8000f94 <HAL_Delay>
	uint8_t readedID = Accel_ReadID();
 800418a:	f7ff ff25 	bl	8003fd8 <Accel_ReadID>
 800418e:	4603      	mov	r3, r0
 8004190:	73fb      	strb	r3, [r7, #15]
	if(readedID==0x43)
 8004192:	7bfb      	ldrb	r3, [r7, #15]
 8004194:	2b43      	cmp	r3, #67	; 0x43
 8004196:	d11c      	bne.n	80041d2 <Accel_Ini+0x62>
		{
	  char* device_ok = "[SUCCESS] Device has been founded: LIS2DS12\r\n";
 8004198:	4b1e      	ldr	r3, [pc, #120]	; (8004214 <Accel_Ini+0xa4>)
 800419a:	60bb      	str	r3, [r7, #8]
		RS_485_ON;
 800419c:	2201      	movs	r2, #1
 800419e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041a2:	481d      	ldr	r0, [pc, #116]	; (8004218 <Accel_Ini+0xa8>)
 80041a4:	f7fd fa42 	bl	800162c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)device_ok, strlen((char*)device_ok), 0x1000);
 80041a8:	68b8      	ldr	r0, [r7, #8]
 80041aa:	f7fc f819 	bl	80001e0 <strlen>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4818      	ldr	r0, [pc, #96]	; (800421c <Accel_Ini+0xac>)
 80041ba:	f7fe fe56 	bl	8002e6a <HAL_UART_Transmit>
		HAL_Delay(100);
 80041be:	2064      	movs	r0, #100	; 0x64
 80041c0:	f7fc fee8 	bl	8000f94 <HAL_Delay>
		RS_485_OFF;;
 80041c4:	2200      	movs	r2, #0
 80041c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80041ca:	4813      	ldr	r0, [pc, #76]	; (8004218 <Accel_Ini+0xa8>)
 80041cc:	f7fd fa2e 	bl	800162c <HAL_GPIO_WritePin>
 80041d0:	e003      	b.n	80041da <Accel_Ini+0x6a>
		}
	else Error_Device(readedID);
 80041d2:	7bfb      	ldrb	r3, [r7, #15]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f7ff fe05 	bl	8003de4 <Error_Device>
	ctrl1 = (uint8_t) (0x60);
 80041da:	2360      	movs	r3, #96	; 0x60
 80041dc:	71fb      	strb	r3, [r7, #7]
	ctrl2 = (uint8_t) (0x20);
 80041de:	2320      	movs	r3, #32
 80041e0:	71bb      	strb	r3, [r7, #6]
	ctrl4 = (uint8_t) (0x03);
 80041e2:	2303      	movs	r3, #3
 80041e4:	717b      	strb	r3, [r7, #5]
	Accel_IO_Write(&ctrl2, LIS2DS12_CTRL2, 1);
 80041e6:	1dbb      	adds	r3, r7, #6
 80041e8:	2201      	movs	r2, #1
 80041ea:	2121      	movs	r1, #33	; 0x21
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7ff febb 	bl	8003f68 <Accel_IO_Write>
	Accel_IO_Write(&ctrl1, LIS2DS12_CTRL1, 1);
 80041f2:	1dfb      	adds	r3, r7, #7
 80041f4:	2201      	movs	r2, #1
 80041f6:	2120      	movs	r1, #32
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff feb5 	bl	8003f68 <Accel_IO_Write>
	Accel_IO_Write(&ctrl4, LIS2DS12_CTRL4, 1);
 80041fe:	1d7b      	adds	r3, r7, #5
 8004200:	2201      	movs	r2, #1
 8004202:	2123      	movs	r1, #35	; 0x23
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff feaf 	bl	8003f68 <Accel_IO_Write>
}
 800420a:	bf00      	nop
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	08007c74 	.word	0x08007c74
 8004218:	40020000 	.word	0x40020000
 800421c:	20000278 	.word	0x20000278

08004220 <HAL_GPIO_EXTI_Callback>:
uint32_t INT1_counts = 0;
uint32_t INT2_counts = 0;
uint32_t INTx_counts = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_1)
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d105      	bne.n	800423c <HAL_GPIO_EXTI_Callback+0x1c>
  {
    INT1_counts++;
 8004230:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <HAL_GPIO_EXTI_Callback+0x44>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	4a0b      	ldr	r2, [pc, #44]	; (8004264 <HAL_GPIO_EXTI_Callback+0x44>)
 8004238:	6013      	str	r3, [r2, #0]
  }
  else
  {
    INTx_counts++;
  }
}
 800423a:	e00d      	b.n	8004258 <HAL_GPIO_EXTI_Callback+0x38>
  else if(GPIO_Pin == GPIO_PIN_2)
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	2b04      	cmp	r3, #4
 8004240:	d105      	bne.n	800424e <HAL_GPIO_EXTI_Callback+0x2e>
    INT2_counts++;
 8004242:	4b09      	ldr	r3, [pc, #36]	; (8004268 <HAL_GPIO_EXTI_Callback+0x48>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	4a07      	ldr	r2, [pc, #28]	; (8004268 <HAL_GPIO_EXTI_Callback+0x48>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	e004      	b.n	8004258 <HAL_GPIO_EXTI_Callback+0x38>
    INTx_counts++;
 800424e:	4b07      	ldr	r3, [pc, #28]	; (800426c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	4a05      	ldr	r2, [pc, #20]	; (800426c <HAL_GPIO_EXTI_Callback+0x4c>)
 8004256:	6013      	str	r3, [r2, #0]
}
 8004258:	bf00      	nop
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr
 8004264:	2000025c 	.word	0x2000025c
 8004268:	20000260 	.word	0x20000260
 800426c:	20000264 	.word	0x20000264

08004270 <print_UART_value>:

/* send str with value over UART */
void print_UART_value(char *str_to_send, float value_to_send)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0b4      	sub	sp, #208	; 0xd0
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	ed87 0a00 	vstr	s0, [r7]
  uint8_t temp[200] = { 0 };
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	22c4      	movs	r2, #196	; 0xc4
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f000 fe0f 	bl	8004eac <memset>
  sprintf((char*)temp, str_to_send, value_to_send);
 800428e:	6838      	ldr	r0, [r7, #0]
 8004290:	f7fc f962 	bl	8000558 <__aeabi_f2d>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	f107 0008 	add.w	r0, r7, #8
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	f001 fa77 	bl	8005790 <siprintf>
  RS_485_ON
 80042a2:	2201      	movs	r2, #1
 80042a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042a8:	480f      	ldr	r0, [pc, #60]	; (80042e8 <print_UART_value+0x78>)
 80042aa:	f7fd f9bf 	bl	800162c <HAL_GPIO_WritePin>
  while(HAL_UART_Transmit(&huart1, (uint8_t*)temp, strlen((char*)temp), 0x1000) == HAL_BUSY);
 80042ae:	bf00      	nop
 80042b0:	f107 0308 	add.w	r3, r7, #8
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7fb ff93 	bl	80001e0 <strlen>
 80042ba:	4603      	mov	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	f107 0108 	add.w	r1, r7, #8
 80042c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042c6:	4809      	ldr	r0, [pc, #36]	; (80042ec <print_UART_value+0x7c>)
 80042c8:	f7fe fdcf 	bl	8002e6a <HAL_UART_Transmit>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d0ee      	beq.n	80042b0 <print_UART_value+0x40>
  RS_485_OFF
 80042d2:	2200      	movs	r2, #0
 80042d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80042d8:	4803      	ldr	r0, [pc, #12]	; (80042e8 <print_UART_value+0x78>)
 80042da:	f7fd f9a7 	bl	800162c <HAL_GPIO_WritePin>
}
 80042de:	bf00      	nop
 80042e0:	37d0      	adds	r7, #208	; 0xd0
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	40020000 	.word	0x40020000
 80042ec:	20000278 	.word	0x20000278

080042f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80042f6:	f7fc fddb 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80042fa:	f000 f857 	bl	80043ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80042fe:	f000 f977 	bl	80045f0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8004302:	f000 f8bd 	bl	8004480 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004306:	f000 f949 	bl	800459c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800430a:	f000 f8ef 	bl	80044ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Accel_Ini(); 				// Вызов функция инициализации акселлерометра
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800430e:	2104      	movs	r1, #4
 8004310:	4821      	ldr	r0, [pc, #132]	; (8004398 <main+0xa8>)
 8004312:	f7fe f94b 	bl	80025ac <HAL_TIM_PWM_Start>
  uint8_t data_requests = 10;
 8004316:	230a      	movs	r3, #10
 8004318:	71bb      	strb	r3, [r7, #6]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LEDS_TEST(); 			// Вызов функции проверки светодиодов
 800431a:	f000 f9e9 	bl	80046f0 <LEDS_TEST>
	PWM_TEST(); 			// Вызов функции проверки Ш�?М
 800431e:	f000 fa0b 	bl	8004738 <PWM_TEST>
	RS485_TEST();			// Вызов функции проверки RS485
 8004322:	f000 fab5 	bl	8004890 <RS485_TEST>
  Accel_Ini(); 		  // Вызов функция инициализации акселлерометра
 8004326:	f7ff ff23 	bl	8004170 <Accel_Ini>
  print_UART_value("[DATA] Requesting %.0f samples of data...", (float)data_requests);
 800432a:	79bb      	ldrb	r3, [r7, #6]
 800432c:	ee07 3a90 	vmov	s15, r3
 8004330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004334:	eeb0 0a67 	vmov.f32	s0, s15
 8004338:	4818      	ldr	r0, [pc, #96]	; (800439c <main+0xac>)
 800433a:	f7ff ff99 	bl	8004270 <print_UART_value>
	for(uint8_t i = 0; i < data_requests; i++)
 800433e:	2300      	movs	r3, #0
 8004340:	71fb      	strb	r3, [r7, #7]
 8004342:	e004      	b.n	800434e <main+0x5e>
	{
	  Accel_ReadAcc();    // Вызов функции проверки акселлерометра
 8004344:	f7ff fece 	bl	80040e4 <Accel_ReadAcc>
	for(uint8_t i = 0; i < data_requests; i++)
 8004348:	79fb      	ldrb	r3, [r7, #7]
 800434a:	3301      	adds	r3, #1
 800434c:	71fb      	strb	r3, [r7, #7]
 800434e:	79fa      	ldrb	r2, [r7, #7]
 8004350:	79bb      	ldrb	r3, [r7, #6]
 8004352:	429a      	cmp	r2, r3
 8004354:	d3f6      	bcc.n	8004344 <main+0x54>
	}
	if(INT1_counts >= data_requests)
 8004356:	79ba      	ldrb	r2, [r7, #6]
 8004358:	4b11      	ldr	r3, [pc, #68]	; (80043a0 <main+0xb0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	429a      	cmp	r2, r3
 800435e:	d80b      	bhi.n	8004378 <main+0x88>
	{
	  print_UART_value("[SUCCESS] Interrupt leg is ok, interrupts amount: %.0f\n\r", (float)INT1_counts);
 8004360:	4b0f      	ldr	r3, [pc, #60]	; (80043a0 <main+0xb0>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	ee07 3a90 	vmov	s15, r3
 8004368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800436c:	eeb0 0a67 	vmov.f32	s0, s15
 8004370:	480c      	ldr	r0, [pc, #48]	; (80043a4 <main+0xb4>)
 8004372:	f7ff ff7d 	bl	8004270 <print_UART_value>
 8004376:	e00a      	b.n	800438e <main+0x9e>
	}
	else
	{
	  print_UART_value("[ERROR] Interrupt leg is NOT ok, interrupts amount: %.0f\n\r", (float)INT1_counts);
 8004378:	4b09      	ldr	r3, [pc, #36]	; (80043a0 <main+0xb0>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	ee07 3a90 	vmov	s15, r3
 8004380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004384:	eeb0 0a67 	vmov.f32	s0, s15
 8004388:	4807      	ldr	r0, [pc, #28]	; (80043a8 <main+0xb8>)
 800438a:	f7ff ff71 	bl	8004270 <print_UART_value>
	}
	INT1_counts = 0;
 800438e:	4b04      	ldr	r3, [pc, #16]	; (80043a0 <main+0xb0>)
 8004390:	2200      	movs	r2, #0
 8004392:	601a      	str	r2, [r3, #0]
	LEDS_TEST(); 			// Вызов функции проверки светодиодов
 8004394:	e7c1      	b.n	800431a <main+0x2a>
 8004396:	bf00      	nop
 8004398:	20000314 	.word	0x20000314
 800439c:	08007ca4 	.word	0x08007ca4
 80043a0:	2000025c 	.word	0x2000025c
 80043a4:	08007cd0 	.word	0x08007cd0
 80043a8:	08007d0c 	.word	0x08007d0c

080043ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b094      	sub	sp, #80	; 0x50
 80043b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043b2:	f107 0320 	add.w	r3, r7, #32
 80043b6:	2230      	movs	r2, #48	; 0x30
 80043b8:	2100      	movs	r1, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 fd76 	bl	8004eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80043c0:	f107 030c 	add.w	r3, r7, #12
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	605a      	str	r2, [r3, #4]
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	60da      	str	r2, [r3, #12]
 80043ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80043d0:	2300      	movs	r3, #0
 80043d2:	60bb      	str	r3, [r7, #8]
 80043d4:	4b28      	ldr	r3, [pc, #160]	; (8004478 <SystemClock_Config+0xcc>)
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	4a27      	ldr	r2, [pc, #156]	; (8004478 <SystemClock_Config+0xcc>)
 80043da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043de:	6413      	str	r3, [r2, #64]	; 0x40
 80043e0:	4b25      	ldr	r3, [pc, #148]	; (8004478 <SystemClock_Config+0xcc>)
 80043e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80043ec:	2300      	movs	r3, #0
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	4b22      	ldr	r3, [pc, #136]	; (800447c <SystemClock_Config+0xd0>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80043f8:	4a20      	ldr	r2, [pc, #128]	; (800447c <SystemClock_Config+0xd0>)
 80043fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043fe:	6013      	str	r3, [r2, #0]
 8004400:	4b1e      	ldr	r3, [pc, #120]	; (800447c <SystemClock_Config+0xd0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004408:	607b      	str	r3, [r7, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800440c:	2301      	movs	r3, #1
 800440e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004410:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004416:	2302      	movs	r3, #2
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800441a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800441e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004420:	2319      	movs	r3, #25
 8004422:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004424:	23a8      	movs	r3, #168	; 0xa8
 8004426:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004428:	2302      	movs	r3, #2
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800442c:	2304      	movs	r3, #4
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004430:	f107 0320 	add.w	r3, r7, #32
 8004434:	4618      	mov	r0, r3
 8004436:	f7fd f92b 	bl	8001690 <HAL_RCC_OscConfig>
 800443a:	4603      	mov	r3, r0
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004440:	f000 faa8 	bl	8004994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004444:	230f      	movs	r3, #15
 8004446:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004448:	2302      	movs	r3, #2
 800444a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800444c:	2300      	movs	r3, #0
 800444e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004454:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800445a:	f107 030c 	add.w	r3, r7, #12
 800445e:	2102      	movs	r1, #2
 8004460:	4618      	mov	r0, r3
 8004462:	f7fd fb8d 	bl	8001b80 <HAL_RCC_ClockConfig>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800446c:	f000 fa92 	bl	8004994 <Error_Handler>
  }
}
 8004470:	bf00      	nop
 8004472:	3750      	adds	r7, #80	; 0x50
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40023800 	.word	0x40023800
 800447c:	40007000 	.word	0x40007000

08004480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004484:	4b17      	ldr	r3, [pc, #92]	; (80044e4 <MX_SPI1_Init+0x64>)
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <MX_SPI1_Init+0x68>)
 8004488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <MX_SPI1_Init+0x64>)
 800448c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004492:	4b14      	ldr	r3, [pc, #80]	; (80044e4 <MX_SPI1_Init+0x64>)
 8004494:	2200      	movs	r2, #0
 8004496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004498:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <MX_SPI1_Init+0x64>)
 800449a:	2200      	movs	r2, #0
 800449c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044a0:	2202      	movs	r2, #2
 80044a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044a4:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044b4:	2208      	movs	r2, #8
 80044b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044be:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044c4:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80044ca:	4b06      	ldr	r3, [pc, #24]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044cc:	220a      	movs	r2, #10
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044d0:	4804      	ldr	r0, [pc, #16]	; (80044e4 <MX_SPI1_Init+0x64>)
 80044d2:	f7fd fd25 	bl	8001f20 <HAL_SPI_Init>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80044dc:	f000 fa5a 	bl	8004994 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	200002bc 	.word	0x200002bc
 80044e8:	40013000 	.word	0x40013000

080044ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80044f2:	f107 0320 	add.w	r3, r7, #32
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80044fc:	1d3b      	adds	r3, r7, #4
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	609a      	str	r2, [r3, #8]
 8004506:	60da      	str	r2, [r3, #12]
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	615a      	str	r2, [r3, #20]
 800450c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800450e:	4b22      	ldr	r3, [pc, #136]	; (8004598 <MX_TIM2_Init+0xac>)
 8004510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8004516:	4b20      	ldr	r3, [pc, #128]	; (8004598 <MX_TIM2_Init+0xac>)
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800451c:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <MX_TIM2_Init+0xac>)
 800451e:	2200      	movs	r2, #0
 8004520:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8004522:	4b1d      	ldr	r3, [pc, #116]	; (8004598 <MX_TIM2_Init+0xac>)
 8004524:	22ff      	movs	r2, #255	; 0xff
 8004526:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004528:	4b1b      	ldr	r3, [pc, #108]	; (8004598 <MX_TIM2_Init+0xac>)
 800452a:	2200      	movs	r2, #0
 800452c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <MX_TIM2_Init+0xac>)
 8004530:	2200      	movs	r2, #0
 8004532:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004534:	4818      	ldr	r0, [pc, #96]	; (8004598 <MX_TIM2_Init+0xac>)
 8004536:	f7fd ffe9 	bl	800250c <HAL_TIM_PWM_Init>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8004540:	f000 fa28 	bl	8004994 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004544:	2300      	movs	r3, #0
 8004546:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004548:	2300      	movs	r3, #0
 800454a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800454c:	f107 0320 	add.w	r3, r7, #32
 8004550:	4619      	mov	r1, r3
 8004552:	4811      	ldr	r0, [pc, #68]	; (8004598 <MX_TIM2_Init+0xac>)
 8004554:	f7fe fbce 	bl	8002cf4 <HAL_TIMEx_MasterConfigSynchronization>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800455e:	f000 fa19 	bl	8004994 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004562:	2360      	movs	r3, #96	; 0x60
 8004564:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004566:	2300      	movs	r3, #0
 8004568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	2204      	movs	r2, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4807      	ldr	r0, [pc, #28]	; (8004598 <MX_TIM2_Init+0xac>)
 800457a:	f7fe f8c7 	bl	800270c <HAL_TIM_PWM_ConfigChannel>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d001      	beq.n	8004588 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8004584:	f000 fa06 	bl	8004994 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004588:	4803      	ldr	r0, [pc, #12]	; (8004598 <MX_TIM2_Init+0xac>)
 800458a:	f000 fa99 	bl	8004ac0 <HAL_TIM_MspPostInit>

}
 800458e:	bf00      	nop
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	20000314 	.word	0x20000314

0800459c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045a2:	4a12      	ldr	r2, [pc, #72]	; (80045ec <MX_USART1_UART_Init+0x50>)
 80045a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80045a6:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80045ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80045ae:	4b0e      	ldr	r3, [pc, #56]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80045b4:	4b0c      	ldr	r3, [pc, #48]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045bc:	2200      	movs	r2, #0
 80045be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80045c0:	4b09      	ldr	r3, [pc, #36]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045c2:	220c      	movs	r2, #12
 80045c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80045c6:	4b08      	ldr	r3, [pc, #32]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80045d2:	4805      	ldr	r0, [pc, #20]	; (80045e8 <MX_USART1_UART_Init+0x4c>)
 80045d4:	f7fe fbfc 	bl	8002dd0 <HAL_UART_Init>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80045de:	f000 f9d9 	bl	8004994 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80045e2:	bf00      	nop
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000278 	.word	0x20000278
 80045ec:	40011000 	.word	0x40011000

080045f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045f6:	f107 030c 	add.w	r3, r7, #12
 80045fa:	2200      	movs	r2, #0
 80045fc:	601a      	str	r2, [r3, #0]
 80045fe:	605a      	str	r2, [r3, #4]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	60da      	str	r2, [r3, #12]
 8004604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60bb      	str	r3, [r7, #8]
 800460a:	4b36      	ldr	r3, [pc, #216]	; (80046e4 <MX_GPIO_Init+0xf4>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a35      	ldr	r2, [pc, #212]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b33      	ldr	r3, [pc, #204]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	60bb      	str	r3, [r7, #8]
 8004620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004622:	2300      	movs	r3, #0
 8004624:	607b      	str	r3, [r7, #4]
 8004626:	4b2f      	ldr	r3, [pc, #188]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800462a:	4a2e      	ldr	r2, [pc, #184]	; (80046e4 <MX_GPIO_Init+0xf4>)
 800462c:	f043 0301 	orr.w	r3, r3, #1
 8004630:	6313      	str	r3, [r2, #48]	; 0x30
 8004632:	4b2c      	ldr	r3, [pc, #176]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	607b      	str	r3, [r7, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800463e:	2300      	movs	r3, #0
 8004640:	603b      	str	r3, [r7, #0]
 8004642:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004648:	f043 0302 	orr.w	r3, r3, #2
 800464c:	6313      	str	r3, [r2, #48]	; 0x30
 800464e:	4b25      	ldr	r3, [pc, #148]	; (80046e4 <MX_GPIO_Init+0xf4>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 800465a:	2200      	movs	r2, #0
 800465c:	f641 0114 	movw	r1, #6164	; 0x1814
 8004660:	4821      	ldr	r0, [pc, #132]	; (80046e8 <MX_GPIO_Init+0xf8>)
 8004662:	f7fc ffe3 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12;
 8004666:	f641 0304 	movw	r3, #6148	; 0x1804
 800466a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800466c:	2301      	movs	r3, #1
 800466e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004670:	2300      	movs	r3, #0
 8004672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004674:	2300      	movs	r3, #0
 8004676:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004678:	f107 030c 	add.w	r3, r7, #12
 800467c:	4619      	mov	r1, r3
 800467e:	481a      	ldr	r0, [pc, #104]	; (80046e8 <MX_GPIO_Init+0xf8>)
 8004680:	f7fc fe50 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004684:	2310      	movs	r3, #16
 8004686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004688:	2301      	movs	r3, #1
 800468a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800468c:	2300      	movs	r3, #0
 800468e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004690:	2301      	movs	r3, #1
 8004692:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4619      	mov	r1, r3
 800469a:	4813      	ldr	r0, [pc, #76]	; (80046e8 <MX_GPIO_Init+0xf8>)
 800469c:	f7fc fe42 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80046a0:	2306      	movs	r3, #6
 80046a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80046a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80046a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046ae:	f107 030c 	add.w	r3, r7, #12
 80046b2:	4619      	mov	r1, r3
 80046b4:	480d      	ldr	r0, [pc, #52]	; (80046ec <MX_GPIO_Init+0xfc>)
 80046b6:	f7fc fe35 	bl	8001324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80046ba:	2200      	movs	r2, #0
 80046bc:	2100      	movs	r1, #0
 80046be:	2007      	movs	r0, #7
 80046c0:	f7fc fd67 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80046c4:	2007      	movs	r0, #7
 80046c6:	f7fc fd80 	bl	80011ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80046ca:	2200      	movs	r2, #0
 80046cc:	2100      	movs	r1, #0
 80046ce:	2008      	movs	r0, #8
 80046d0:	f7fc fd5f 	bl	8001192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80046d4:	2008      	movs	r0, #8
 80046d6:	f7fc fd78 	bl	80011ca <HAL_NVIC_EnableIRQ>

}
 80046da:	bf00      	nop
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40020000 	.word	0x40020000
 80046ec:	40020400 	.word	0x40020400

080046f0 <LEDS_TEST>:

/* USER CODE BEGIN 4 */
void LEDS_TEST(void)      // Функция проверки светодиодов
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80046f4:	2201      	movs	r2, #1
 80046f6:	2104      	movs	r1, #4
 80046f8:	480e      	ldr	r0, [pc, #56]	; (8004734 <LEDS_TEST+0x44>)
 80046fa:	f7fc ff97 	bl	800162c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80046fe:	2201      	movs	r2, #1
 8004700:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004704:	480b      	ldr	r0, [pc, #44]	; (8004734 <LEDS_TEST+0x44>)
 8004706:	f7fc ff91 	bl	800162c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800470a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800470e:	f7fc fc41 	bl	8000f94 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8004712:	2200      	movs	r2, #0
 8004714:	2104      	movs	r1, #4
 8004716:	4807      	ldr	r0, [pc, #28]	; (8004734 <LEDS_TEST+0x44>)
 8004718:	f7fc ff88 	bl	800162c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800471c:	2200      	movs	r2, #0
 800471e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004722:	4804      	ldr	r0, [pc, #16]	; (8004734 <LEDS_TEST+0x44>)
 8004724:	f7fc ff82 	bl	800162c <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 8004728:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800472c:	f7fc fc32 	bl	8000f94 <HAL_Delay>
}
 8004730:	bf00      	nop
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40020000 	.word	0x40020000

08004738 <PWM_TEST>:

void PWM_TEST(void)       // Функция проверки ШИМ
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
    uint8_t PWM_delay = 16;
 800473e:	2310      	movs	r3, #16
 8004740:	71fb      	strb	r3, [r7, #7]
    for (int i=0; i<=255; i++)
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e048      	b.n	80047da <PWM_TEST+0xa2>
    {
      if ((i>178)&&(i<=255)) {
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2bb2      	cmp	r3, #178	; 0xb2
 800474c:	dd16      	ble.n	800477c <PWM_TEST+0x44>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2bff      	cmp	r3, #255	; 0xff
 8004752:	dc13      	bgt.n	800477c <PWM_TEST+0x44>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8004754:	2201      	movs	r2, #1
 8004756:	2104      	movs	r1, #4
 8004758:	484c      	ldr	r0, [pc, #304]	; (800488c <PWM_TEST+0x154>)
 800475a:	f7fc ff67 	bl	800162c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800475e:	2201      	movs	r2, #1
 8004760:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004764:	4849      	ldr	r0, [pc, #292]	; (800488c <PWM_TEST+0x154>)
 8004766:	f7fc ff61 	bl	800162c <HAL_GPIO_WritePin>
        TIM2->CCR2 = i;
 800476a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 8004772:	79fb      	ldrb	r3, [r7, #7]
 8004774:	4618      	mov	r0, r3
 8004776:	f7fc fc0d 	bl	8000f94 <HAL_Delay>
 800477a:	e02b      	b.n	80047d4 <PWM_TEST+0x9c>
      }
      else if ((i>178)!=(i<=255)) {
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2bb2      	cmp	r3, #178	; 0xb2
 8004780:	bfcc      	ite	gt
 8004782:	2301      	movgt	r3, #1
 8004784:	2300      	movle	r3, #0
 8004786:	b2da      	uxtb	r2, r3
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2bff      	cmp	r3, #255	; 0xff
 800478c:	bfd4      	ite	le
 800478e:	2301      	movle	r3, #1
 8004790:	2300      	movgt	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	4053      	eors	r3, r2
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d013      	beq.n	80047c4 <PWM_TEST+0x8c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800479c:	2200      	movs	r2, #0
 800479e:	2104      	movs	r1, #4
 80047a0:	483a      	ldr	r0, [pc, #232]	; (800488c <PWM_TEST+0x154>)
 80047a2:	f7fc ff43 	bl	800162c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80047a6:	2200      	movs	r2, #0
 80047a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80047ac:	4837      	ldr	r0, [pc, #220]	; (800488c <PWM_TEST+0x154>)
 80047ae:	f7fc ff3d 	bl	800162c <HAL_GPIO_WritePin>
        TIM2->CCR2 = i;
 80047b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fc fbe9 	bl	8000f94 <HAL_Delay>
 80047c2:	e007      	b.n	80047d4 <PWM_TEST+0x9c>
      }
      else {
        TIM2->CCR2 = i;
 80047c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 80047cc:	79fb      	ldrb	r3, [r7, #7]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f7fc fbe0 	bl	8000f94 <HAL_Delay>
    for (int i=0; i<=255; i++)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	3301      	adds	r3, #1
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	2bff      	cmp	r3, #255	; 0xff
 80047de:	ddb3      	ble.n	8004748 <PWM_TEST+0x10>
      }

    }

    for (int i=255; i>=0; i--)
 80047e0:	23ff      	movs	r3, #255	; 0xff
 80047e2:	60bb      	str	r3, [r7, #8]
 80047e4:	e048      	b.n	8004878 <PWM_TEST+0x140>
    {
      if ((i>178)&&(i<=255)) {
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2bb2      	cmp	r3, #178	; 0xb2
 80047ea:	dd16      	ble.n	800481a <PWM_TEST+0xe2>
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2bff      	cmp	r3, #255	; 0xff
 80047f0:	dc13      	bgt.n	800481a <PWM_TEST+0xe2>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 80047f2:	2201      	movs	r2, #1
 80047f4:	2104      	movs	r1, #4
 80047f6:	4825      	ldr	r0, [pc, #148]	; (800488c <PWM_TEST+0x154>)
 80047f8:	f7fc ff18 	bl	800162c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80047fc:	2201      	movs	r2, #1
 80047fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004802:	4822      	ldr	r0, [pc, #136]	; (800488c <PWM_TEST+0x154>)
 8004804:	f7fc ff12 	bl	800162c <HAL_GPIO_WritePin>
        TIM2->CCR2 = i;
 8004808:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 8004810:	79fb      	ldrb	r3, [r7, #7]
 8004812:	4618      	mov	r0, r3
 8004814:	f7fc fbbe 	bl	8000f94 <HAL_Delay>
 8004818:	e02b      	b.n	8004872 <PWM_TEST+0x13a>
      }
      else if ((i>178)!=(i<=255)) {
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2bb2      	cmp	r3, #178	; 0xb2
 800481e:	bfcc      	ite	gt
 8004820:	2301      	movgt	r3, #1
 8004822:	2300      	movle	r3, #0
 8004824:	b2da      	uxtb	r2, r3
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	2bff      	cmp	r3, #255	; 0xff
 800482a:	bfd4      	ite	le
 800482c:	2301      	movle	r3, #1
 800482e:	2300      	movgt	r3, #0
 8004830:	b2db      	uxtb	r3, r3
 8004832:	4053      	eors	r3, r2
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d013      	beq.n	8004862 <PWM_TEST+0x12a>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 800483a:	2200      	movs	r2, #0
 800483c:	2104      	movs	r1, #4
 800483e:	4813      	ldr	r0, [pc, #76]	; (800488c <PWM_TEST+0x154>)
 8004840:	f7fc fef4 	bl	800162c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8004844:	2200      	movs	r2, #0
 8004846:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800484a:	4810      	ldr	r0, [pc, #64]	; (800488c <PWM_TEST+0x154>)
 800484c:	f7fc feee 	bl	800162c <HAL_GPIO_WritePin>
        TIM2->CCR2 = i;
 8004850:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 8004858:	79fb      	ldrb	r3, [r7, #7]
 800485a:	4618      	mov	r0, r3
 800485c:	f7fc fb9a 	bl	8000f94 <HAL_Delay>
 8004860:	e007      	b.n	8004872 <PWM_TEST+0x13a>
      }
      else {
        TIM2->CCR2 = i;
 8004862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	6393      	str	r3, [r2, #56]	; 0x38
        HAL_Delay(PWM_delay);
 800486a:	79fb      	ldrb	r3, [r7, #7]
 800486c:	4618      	mov	r0, r3
 800486e:	f7fc fb91 	bl	8000f94 <HAL_Delay>
    for (int i=255; i>=0; i--)
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	3b01      	subs	r3, #1
 8004876:	60bb      	str	r3, [r7, #8]
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	dab3      	bge.n	80047e6 <PWM_TEST+0xae>
      }
    }
    HAL_Delay(10);
 800487e:	200a      	movs	r0, #10
 8004880:	f7fc fb88 	bl	8000f94 <HAL_Delay>
}
 8004884:	bf00      	nop
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40020000 	.word	0x40020000

08004890 <RS485_TEST>:

void RS485_TEST(void)     // Функция проверки RS485
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
  char* UART_test = "[RS-485/UART] TEST:\n\r";
 8004896:	4b3a      	ldr	r3, [pc, #232]	; (8004980 <RS485_TEST+0xf0>)
 8004898:	613b      	str	r3, [r7, #16]
  char* UART_waiting = "[RS-485/UART] WAITING FOR A BYTE\r\n";
 800489a:	4b3a      	ldr	r3, [pc, #232]	; (8004984 <RS485_TEST+0xf4>)
 800489c:	60fb      	str	r3, [r7, #12]
  char* UART_ok = "\r\n[RS-485/UART] OK\r\n";
 800489e:	4b3a      	ldr	r3, [pc, #232]	; (8004988 <RS485_TEST+0xf8>)
 80048a0:	60bb      	str	r3, [r7, #8]

  uint8_t data_flag = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]
  uint8_t str[1];
  RS_485_ON;
 80048a6:	2201      	movs	r2, #1
 80048a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048ac:	4837      	ldr	r0, [pc, #220]	; (800498c <RS485_TEST+0xfc>)
 80048ae:	f7fc febd 	bl	800162c <HAL_GPIO_WritePin>
  HAL_UART_Transmit(&huart1, (uint8_t*)UART_test, strlen(UART_test), 100);
 80048b2:	6938      	ldr	r0, [r7, #16]
 80048b4:	f7fb fc94 	bl	80001e0 <strlen>
 80048b8:	4603      	mov	r3, r0
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	2364      	movs	r3, #100	; 0x64
 80048be:	6939      	ldr	r1, [r7, #16]
 80048c0:	4833      	ldr	r0, [pc, #204]	; (8004990 <RS485_TEST+0x100>)
 80048c2:	f7fe fad2 	bl	8002e6a <HAL_UART_Transmit>
  HAL_Delay(2000);
 80048c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80048ca:	f7fc fb63 	bl	8000f94 <HAL_Delay>
  RS_485_OFF;
 80048ce:	2200      	movs	r2, #0
 80048d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048d4:	482d      	ldr	r0, [pc, #180]	; (800498c <RS485_TEST+0xfc>)
 80048d6:	f7fc fea9 	bl	800162c <HAL_GPIO_WritePin>
  while(data_flag == 0)
 80048da:	e049      	b.n	8004970 <RS485_TEST+0xe0>
  {
    if(HAL_UART_Receive(&huart1, str, 1, 100) == HAL_OK)
 80048dc:	1d39      	adds	r1, r7, #4
 80048de:	2364      	movs	r3, #100	; 0x64
 80048e0:	2201      	movs	r2, #1
 80048e2:	482b      	ldr	r0, [pc, #172]	; (8004990 <RS485_TEST+0x100>)
 80048e4:	f7fe fb53 	bl	8002f8e <HAL_UART_Receive>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d126      	bne.n	800493c <RS485_TEST+0xac>
      {
        RS_485_ON;
 80048ee:	2201      	movs	r2, #1
 80048f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80048f4:	4825      	ldr	r0, [pc, #148]	; (800498c <RS485_TEST+0xfc>)
 80048f6:	f7fc fe99 	bl	800162c <HAL_GPIO_WritePin>
        HAL_UART_Transmit(&huart1, str, 1, 100);
 80048fa:	1d39      	adds	r1, r7, #4
 80048fc:	2364      	movs	r3, #100	; 0x64
 80048fe:	2201      	movs	r2, #1
 8004900:	4823      	ldr	r0, [pc, #140]	; (8004990 <RS485_TEST+0x100>)
 8004902:	f7fe fab2 	bl	8002e6a <HAL_UART_Transmit>
        HAL_Delay(1000);
 8004906:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800490a:	f7fc fb43 	bl	8000f94 <HAL_Delay>
        HAL_UART_Transmit(&huart1, (uint8_t*)UART_ok, strlen(UART_ok), 100);
 800490e:	68b8      	ldr	r0, [r7, #8]
 8004910:	f7fb fc66 	bl	80001e0 <strlen>
 8004914:	4603      	mov	r3, r0
 8004916:	b29a      	uxth	r2, r3
 8004918:	2364      	movs	r3, #100	; 0x64
 800491a:	68b9      	ldr	r1, [r7, #8]
 800491c:	481c      	ldr	r0, [pc, #112]	; (8004990 <RS485_TEST+0x100>)
 800491e:	f7fe faa4 	bl	8002e6a <HAL_UART_Transmit>
        RS_485_OFF;
 8004922:	2200      	movs	r2, #0
 8004924:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004928:	4818      	ldr	r0, [pc, #96]	; (800498c <RS485_TEST+0xfc>)
 800492a:	f7fc fe7f 	bl	800162c <HAL_GPIO_WritePin>
        data_flag = 1;
 800492e:	2301      	movs	r3, #1
 8004930:	75fb      	strb	r3, [r7, #23]
        HAL_Delay(2000);
 8004932:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004936:	f7fc fb2d 	bl	8000f94 <HAL_Delay>
 800493a:	e019      	b.n	8004970 <RS485_TEST+0xe0>
      }
    else
    {
      RS_485_ON;
 800493c:	2201      	movs	r2, #1
 800493e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004942:	4812      	ldr	r0, [pc, #72]	; (800498c <RS485_TEST+0xfc>)
 8004944:	f7fc fe72 	bl	800162c <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, (uint8_t*)UART_waiting, strlen(UART_waiting), 100);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7fb fc49 	bl	80001e0 <strlen>
 800494e:	4603      	mov	r3, r0
 8004950:	b29a      	uxth	r2, r3
 8004952:	2364      	movs	r3, #100	; 0x64
 8004954:	68f9      	ldr	r1, [r7, #12]
 8004956:	480e      	ldr	r0, [pc, #56]	; (8004990 <RS485_TEST+0x100>)
 8004958:	f7fe fa87 	bl	8002e6a <HAL_UART_Transmit>
      RS_485_OFF;
 800495c:	2200      	movs	r2, #0
 800495e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004962:	480a      	ldr	r0, [pc, #40]	; (800498c <RS485_TEST+0xfc>)
 8004964:	f7fc fe62 	bl	800162c <HAL_GPIO_WritePin>
      HAL_Delay(2000);
 8004968:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800496c:	f7fc fb12 	bl	8000f94 <HAL_Delay>
  while(data_flag == 0)
 8004970:	7dfb      	ldrb	r3, [r7, #23]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0b2      	beq.n	80048dc <RS485_TEST+0x4c>
    }
  }
}
 8004976:	bf00      	nop
 8004978:	bf00      	nop
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	08007d48 	.word	0x08007d48
 8004984:	08007d60 	.word	0x08007d60
 8004988:	08007d84 	.word	0x08007d84
 800498c:	40020000 	.word	0x40020000
 8004990:	20000278 	.word	0x20000278

08004994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004998:	b672      	cpsid	i
}
 800499a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800499c:	e7fe      	b.n	800499c <Error_Handler+0x8>
	...

080049a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
 80049aa:	4b10      	ldr	r3, [pc, #64]	; (80049ec <HAL_MspInit+0x4c>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <HAL_MspInit+0x4c>)
 80049b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049b4:	6453      	str	r3, [r2, #68]	; 0x44
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <HAL_MspInit+0x4c>)
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	603b      	str	r3, [r7, #0]
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_MspInit+0x4c>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4a08      	ldr	r2, [pc, #32]	; (80049ec <HAL_MspInit+0x4c>)
 80049cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40
 80049d2:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_MspInit+0x4c>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049da:	603b      	str	r3, [r7, #0]
 80049dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800

080049f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b08a      	sub	sp, #40	; 0x28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f8:	f107 0314 	add.w	r3, r7, #20
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	605a      	str	r2, [r3, #4]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	60da      	str	r2, [r3, #12]
 8004a06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a19      	ldr	r2, [pc, #100]	; (8004a74 <HAL_SPI_MspInit+0x84>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d12b      	bne.n	8004a6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	4b18      	ldr	r3, [pc, #96]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a1a:	4a17      	ldr	r2, [pc, #92]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a20:	6453      	str	r3, [r2, #68]	; 0x44
 8004a22:	4b15      	ldr	r3, [pc, #84]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2a:	613b      	str	r3, [r7, #16]
 8004a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	4b11      	ldr	r3, [pc, #68]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3e:	4b0e      	ldr	r3, [pc, #56]	; (8004a78 <HAL_SPI_MspInit+0x88>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004a4a:	23e0      	movs	r3, #224	; 0xe0
 8004a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a56:	2303      	movs	r3, #3
 8004a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004a5a:	2305      	movs	r3, #5
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5e:	f107 0314 	add.w	r3, r7, #20
 8004a62:	4619      	mov	r1, r3
 8004a64:	4805      	ldr	r0, [pc, #20]	; (8004a7c <HAL_SPI_MspInit+0x8c>)
 8004a66:	f7fc fc5d 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004a6a:	bf00      	nop
 8004a6c:	3728      	adds	r7, #40	; 0x28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40013000 	.word	0x40013000
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	40020000 	.word	0x40020000

08004a80 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b085      	sub	sp, #20
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a90:	d10d      	bne.n	8004aae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	4b09      	ldr	r3, [pc, #36]	; (8004abc <HAL_TIM_PWM_MspInit+0x3c>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a08      	ldr	r2, [pc, #32]	; (8004abc <HAL_TIM_PWM_MspInit+0x3c>)
 8004a9c:	f043 0301 	orr.w	r3, r3, #1
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b06      	ldr	r3, [pc, #24]	; (8004abc <HAL_TIM_PWM_MspInit+0x3c>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
 8004aac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	40023800 	.word	0x40023800

08004ac0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 030c 	add.w	r3, r7, #12
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae0:	d11d      	bne.n	8004b1e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60bb      	str	r3, [r7, #8]
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_TIM_MspPostInit+0x68>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a0f      	ldr	r2, [pc, #60]	; (8004b28 <HAL_TIM_MspPostInit+0x68>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b0d      	ldr	r3, [pc, #52]	; (8004b28 <HAL_TIM_MspPostInit+0x68>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004afe:	2302      	movs	r3, #2
 8004b00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b02:	2302      	movs	r3, #2
 8004b04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b12:	f107 030c 	add.w	r3, r7, #12
 8004b16:	4619      	mov	r1, r3
 8004b18:	4804      	ldr	r0, [pc, #16]	; (8004b2c <HAL_TIM_MspPostInit+0x6c>)
 8004b1a:	f7fc fc03 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004b1e:	bf00      	nop
 8004b20:	3720      	adds	r7, #32
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40020000 	.word	0x40020000

08004b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	; 0x28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b38:	f107 0314 	add.w	r3, r7, #20
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	605a      	str	r2, [r3, #4]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	60da      	str	r2, [r3, #12]
 8004b46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a1d      	ldr	r2, [pc, #116]	; (8004bc4 <HAL_UART_MspInit+0x94>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d134      	bne.n	8004bbc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	613b      	str	r3, [r7, #16]
 8004b56:	4b1c      	ldr	r3, [pc, #112]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	4a1b      	ldr	r2, [pc, #108]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b5c:	f043 0310 	orr.w	r3, r3, #16
 8004b60:	6453      	str	r3, [r2, #68]	; 0x44
 8004b62:	4b19      	ldr	r3, [pc, #100]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a14      	ldr	r2, [pc, #80]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <HAL_UART_MspInit+0x98>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b8a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b90:	2302      	movs	r3, #2
 8004b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b94:	2300      	movs	r3, #0
 8004b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4809      	ldr	r0, [pc, #36]	; (8004bcc <HAL_UART_MspInit+0x9c>)
 8004ba8:	f7fc fbbc 	bl	8001324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004bac:	2200      	movs	r2, #0
 8004bae:	2100      	movs	r1, #0
 8004bb0:	2025      	movs	r0, #37	; 0x25
 8004bb2:	f7fc faee 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004bb6:	2025      	movs	r0, #37	; 0x25
 8004bb8:	f7fc fb07 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004bbc:	bf00      	nop
 8004bbe:	3728      	adds	r7, #40	; 0x28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	40023800 	.word	0x40023800
 8004bcc:	40020000 	.word	0x40020000

08004bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bd4:	e7fe      	b.n	8004bd4 <NMI_Handler+0x4>

08004bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bda:	e7fe      	b.n	8004bda <HardFault_Handler+0x4>

08004bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004be0:	e7fe      	b.n	8004be0 <MemManage_Handler+0x4>

08004be2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004be2:	b480      	push	{r7}
 8004be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004be6:	e7fe      	b.n	8004be6 <BusFault_Handler+0x4>

08004be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004be8:	b480      	push	{r7}
 8004bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bec:	e7fe      	b.n	8004bec <UsageFault_Handler+0x4>

08004bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bee:	b480      	push	{r7}
 8004bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bf2:	bf00      	nop
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr

08004c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c0a:	b480      	push	{r7}
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c0e:	bf00      	nop
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c1c:	f7fc f99a 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8004c28:	2002      	movs	r0, #2
 8004c2a:	f7fc fd19 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004c36:	2004      	movs	r0, #4
 8004c38:	f7fc fd12 	bl	8001660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <USART1_IRQHandler+0x10>)
 8004c46:	f7fe fa45 	bl	80030d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000278 	.word	0x20000278

08004c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
	return 1;
 8004c58:	2301      	movs	r3, #1
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <_kill>:

int _kill(int pid, int sig)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004c6e:	f000 f8f3 	bl	8004e58 <__errno>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2216      	movs	r2, #22
 8004c76:	601a      	str	r2, [r3, #0]
	return -1;
 8004c78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <_exit>:

void _exit (int status)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ffe7 	bl	8004c64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004c96:	e7fe      	b.n	8004c96 <_exit+0x12>

08004c98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b086      	sub	sp, #24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	617b      	str	r3, [r7, #20]
 8004ca8:	e00a      	b.n	8004cc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004caa:	f3af 8000 	nop.w
 8004cae:	4601      	mov	r1, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	60ba      	str	r2, [r7, #8]
 8004cb6:	b2ca      	uxtb	r2, r1
 8004cb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	dbf0      	blt.n	8004caa <_read+0x12>
	}

return len;
 8004cc8:	687b      	ldr	r3, [r7, #4]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	60f8      	str	r0, [r7, #12]
 8004cda:	60b9      	str	r1, [r7, #8]
 8004cdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cde:	2300      	movs	r3, #0
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	e009      	b.n	8004cf8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	1c5a      	adds	r2, r3, #1
 8004ce8:	60ba      	str	r2, [r7, #8]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	4618      	mov	r0, r3
 8004cee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	697a      	ldr	r2, [r7, #20]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	dbf1      	blt.n	8004ce4 <_write+0x12>
	}
	return len;
 8004d00:	687b      	ldr	r3, [r7, #4]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3718      	adds	r7, #24
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <_close>:

int _close(int file)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
	return -1;
 8004d12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d32:	605a      	str	r2, [r3, #4]
	return 0;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	370c      	adds	r7, #12
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <_isatty>:

int _isatty(int file)
{
 8004d42:	b480      	push	{r7}
 8004d44:	b083      	sub	sp, #12
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
	return 1;
 8004d4a:	2301      	movs	r3, #1
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr

08004d58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
	return 0;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
	...

08004d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d7c:	4a14      	ldr	r2, [pc, #80]	; (8004dd0 <_sbrk+0x5c>)
 8004d7e:	4b15      	ldr	r3, [pc, #84]	; (8004dd4 <_sbrk+0x60>)
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d88:	4b13      	ldr	r3, [pc, #76]	; (8004dd8 <_sbrk+0x64>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d90:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <_sbrk+0x64>)
 8004d92:	4a12      	ldr	r2, [pc, #72]	; (8004ddc <_sbrk+0x68>)
 8004d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d207      	bcs.n	8004db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004da4:	f000 f858 	bl	8004e58 <__errno>
 8004da8:	4603      	mov	r3, r0
 8004daa:	220c      	movs	r2, #12
 8004dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dae:	f04f 33ff 	mov.w	r3, #4294967295
 8004db2:	e009      	b.n	8004dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <_sbrk+0x64>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dba:	4b07      	ldr	r3, [pc, #28]	; (8004dd8 <_sbrk+0x64>)
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <_sbrk+0x64>)
 8004dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3718      	adds	r7, #24
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	20010000 	.word	0x20010000
 8004dd4:	00004000 	.word	0x00004000
 8004dd8:	20000268 	.word	0x20000268
 8004ddc:	20000370 	.word	0x20000370

08004de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004de4:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <SystemInit+0x20>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	4a05      	ldr	r2, [pc, #20]	; (8004e00 <SystemInit+0x20>)
 8004dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004df4:	bf00      	nop
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	e000ed00 	.word	0xe000ed00

08004e04 <Reset_Handler>:
 8004e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e3c <LoopFillZerobss+0x12>
 8004e08:	480d      	ldr	r0, [pc, #52]	; (8004e40 <LoopFillZerobss+0x16>)
 8004e0a:	490e      	ldr	r1, [pc, #56]	; (8004e44 <LoopFillZerobss+0x1a>)
 8004e0c:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <LoopFillZerobss+0x1e>)
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e002      	b.n	8004e18 <LoopCopyDataInit>

08004e12 <CopyDataInit>:
 8004e12:	58d4      	ldr	r4, [r2, r3]
 8004e14:	50c4      	str	r4, [r0, r3]
 8004e16:	3304      	adds	r3, #4

08004e18 <LoopCopyDataInit>:
 8004e18:	18c4      	adds	r4, r0, r3
 8004e1a:	428c      	cmp	r4, r1
 8004e1c:	d3f9      	bcc.n	8004e12 <CopyDataInit>
 8004e1e:	4a0b      	ldr	r2, [pc, #44]	; (8004e4c <LoopFillZerobss+0x22>)
 8004e20:	4c0b      	ldr	r4, [pc, #44]	; (8004e50 <LoopFillZerobss+0x26>)
 8004e22:	2300      	movs	r3, #0
 8004e24:	e001      	b.n	8004e2a <LoopFillZerobss>

08004e26 <FillZerobss>:
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	3204      	adds	r2, #4

08004e2a <LoopFillZerobss>:
 8004e2a:	42a2      	cmp	r2, r4
 8004e2c:	d3fb      	bcc.n	8004e26 <FillZerobss>
 8004e2e:	f7ff ffd7 	bl	8004de0 <SystemInit>
 8004e32:	f000 f817 	bl	8004e64 <__libc_init_array>
 8004e36:	f7ff fa5b 	bl	80042f0 <main>
 8004e3a:	4770      	bx	lr
 8004e3c:	20010000 	.word	0x20010000
 8004e40:	20000000 	.word	0x20000000
 8004e44:	200001dc 	.word	0x200001dc
 8004e48:	080081a4 	.word	0x080081a4
 8004e4c:	200001dc 	.word	0x200001dc
 8004e50:	2000036c 	.word	0x2000036c

08004e54 <ADC_IRQHandler>:
 8004e54:	e7fe      	b.n	8004e54 <ADC_IRQHandler>
	...

08004e58 <__errno>:
 8004e58:	4b01      	ldr	r3, [pc, #4]	; (8004e60 <__errno+0x8>)
 8004e5a:	6818      	ldr	r0, [r3, #0]
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	2000000c 	.word	0x2000000c

08004e64 <__libc_init_array>:
 8004e64:	b570      	push	{r4, r5, r6, lr}
 8004e66:	4d0d      	ldr	r5, [pc, #52]	; (8004e9c <__libc_init_array+0x38>)
 8004e68:	4c0d      	ldr	r4, [pc, #52]	; (8004ea0 <__libc_init_array+0x3c>)
 8004e6a:	1b64      	subs	r4, r4, r5
 8004e6c:	10a4      	asrs	r4, r4, #2
 8004e6e:	2600      	movs	r6, #0
 8004e70:	42a6      	cmp	r6, r4
 8004e72:	d109      	bne.n	8004e88 <__libc_init_array+0x24>
 8004e74:	4d0b      	ldr	r5, [pc, #44]	; (8004ea4 <__libc_init_array+0x40>)
 8004e76:	4c0c      	ldr	r4, [pc, #48]	; (8004ea8 <__libc_init_array+0x44>)
 8004e78:	f002 feb4 	bl	8007be4 <_init>
 8004e7c:	1b64      	subs	r4, r4, r5
 8004e7e:	10a4      	asrs	r4, r4, #2
 8004e80:	2600      	movs	r6, #0
 8004e82:	42a6      	cmp	r6, r4
 8004e84:	d105      	bne.n	8004e92 <__libc_init_array+0x2e>
 8004e86:	bd70      	pop	{r4, r5, r6, pc}
 8004e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e8c:	4798      	blx	r3
 8004e8e:	3601      	adds	r6, #1
 8004e90:	e7ee      	b.n	8004e70 <__libc_init_array+0xc>
 8004e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e96:	4798      	blx	r3
 8004e98:	3601      	adds	r6, #1
 8004e9a:	e7f2      	b.n	8004e82 <__libc_init_array+0x1e>
 8004e9c:	0800819c 	.word	0x0800819c
 8004ea0:	0800819c 	.word	0x0800819c
 8004ea4:	0800819c 	.word	0x0800819c
 8004ea8:	080081a0 	.word	0x080081a0

08004eac <memset>:
 8004eac:	4402      	add	r2, r0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <memset+0xa>
 8004eb4:	4770      	bx	lr
 8004eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eba:	e7f9      	b.n	8004eb0 <memset+0x4>

08004ebc <__cvt>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	ec55 4b10 	vmov	r4, r5, d0
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	460e      	mov	r6, r1
 8004ec8:	4619      	mov	r1, r3
 8004eca:	462b      	mov	r3, r5
 8004ecc:	bfbb      	ittet	lt
 8004ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ed2:	461d      	movlt	r5, r3
 8004ed4:	2300      	movge	r3, #0
 8004ed6:	232d      	movlt	r3, #45	; 0x2d
 8004ed8:	700b      	strb	r3, [r1, #0]
 8004eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	f023 0820 	bic.w	r8, r3, #32
 8004ee6:	bfbc      	itt	lt
 8004ee8:	4622      	movlt	r2, r4
 8004eea:	4614      	movlt	r4, r2
 8004eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ef0:	d005      	beq.n	8004efe <__cvt+0x42>
 8004ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ef6:	d100      	bne.n	8004efa <__cvt+0x3e>
 8004ef8:	3601      	adds	r6, #1
 8004efa:	2102      	movs	r1, #2
 8004efc:	e000      	b.n	8004f00 <__cvt+0x44>
 8004efe:	2103      	movs	r1, #3
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	ab02      	add	r3, sp, #8
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	ec45 4b10 	vmov	d0, r4, r5
 8004f0c:	4653      	mov	r3, sl
 8004f0e:	4632      	mov	r2, r6
 8004f10:	f000 fcea 	bl	80058e8 <_dtoa_r>
 8004f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f18:	4607      	mov	r7, r0
 8004f1a:	d102      	bne.n	8004f22 <__cvt+0x66>
 8004f1c:	f019 0f01 	tst.w	r9, #1
 8004f20:	d022      	beq.n	8004f68 <__cvt+0xac>
 8004f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f26:	eb07 0906 	add.w	r9, r7, r6
 8004f2a:	d110      	bne.n	8004f4e <__cvt+0x92>
 8004f2c:	783b      	ldrb	r3, [r7, #0]
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d10a      	bne.n	8004f48 <__cvt+0x8c>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb fdcd 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f3e:	b918      	cbnz	r0, 8004f48 <__cvt+0x8c>
 8004f40:	f1c6 0601 	rsb	r6, r6, #1
 8004f44:	f8ca 6000 	str.w	r6, [sl]
 8004f48:	f8da 3000 	ldr.w	r3, [sl]
 8004f4c:	4499      	add	r9, r3
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 8004f5a:	b108      	cbz	r0, 8004f60 <__cvt+0xa4>
 8004f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f60:	2230      	movs	r2, #48	; 0x30
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	454b      	cmp	r3, r9
 8004f66:	d307      	bcc.n	8004f78 <__cvt+0xbc>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6c:	1bdb      	subs	r3, r3, r7
 8004f6e:	4638      	mov	r0, r7
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	b004      	add	sp, #16
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e7f0      	b.n	8004f62 <__cvt+0xa6>

08004f80 <__exponent>:
 8004f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f82:	4603      	mov	r3, r0
 8004f84:	2900      	cmp	r1, #0
 8004f86:	bfb8      	it	lt
 8004f88:	4249      	neglt	r1, r1
 8004f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f8e:	bfb4      	ite	lt
 8004f90:	222d      	movlt	r2, #45	; 0x2d
 8004f92:	222b      	movge	r2, #43	; 0x2b
 8004f94:	2909      	cmp	r1, #9
 8004f96:	7042      	strb	r2, [r0, #1]
 8004f98:	dd2a      	ble.n	8004ff0 <__exponent+0x70>
 8004f9a:	f10d 0407 	add.w	r4, sp, #7
 8004f9e:	46a4      	mov	ip, r4
 8004fa0:	270a      	movs	r7, #10
 8004fa2:	46a6      	mov	lr, r4
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004faa:	fb07 1516 	mls	r5, r7, r6, r1
 8004fae:	3530      	adds	r5, #48	; 0x30
 8004fb0:	2a63      	cmp	r2, #99	; 0x63
 8004fb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004fb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004fba:	4631      	mov	r1, r6
 8004fbc:	dcf1      	bgt.n	8004fa2 <__exponent+0x22>
 8004fbe:	3130      	adds	r1, #48	; 0x30
 8004fc0:	f1ae 0502 	sub.w	r5, lr, #2
 8004fc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fc8:	1c44      	adds	r4, r0, #1
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4561      	cmp	r1, ip
 8004fce:	d30a      	bcc.n	8004fe6 <__exponent+0x66>
 8004fd0:	f10d 0209 	add.w	r2, sp, #9
 8004fd4:	eba2 020e 	sub.w	r2, r2, lr
 8004fd8:	4565      	cmp	r5, ip
 8004fda:	bf88      	it	hi
 8004fdc:	2200      	movhi	r2, #0
 8004fde:	4413      	add	r3, r2
 8004fe0:	1a18      	subs	r0, r3, r0
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fee:	e7ed      	b.n	8004fcc <__exponent+0x4c>
 8004ff0:	2330      	movs	r3, #48	; 0x30
 8004ff2:	3130      	adds	r1, #48	; 0x30
 8004ff4:	7083      	strb	r3, [r0, #2]
 8004ff6:	70c1      	strb	r1, [r0, #3]
 8004ff8:	1d03      	adds	r3, r0, #4
 8004ffa:	e7f1      	b.n	8004fe0 <__exponent+0x60>

08004ffc <_printf_float>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	ed2d 8b02 	vpush	{d8}
 8005004:	b08d      	sub	sp, #52	; 0x34
 8005006:	460c      	mov	r4, r1
 8005008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800500c:	4616      	mov	r6, r2
 800500e:	461f      	mov	r7, r3
 8005010:	4605      	mov	r5, r0
 8005012:	f001 fa55 	bl	80064c0 <_localeconv_r>
 8005016:	f8d0 a000 	ldr.w	sl, [r0]
 800501a:	4650      	mov	r0, sl
 800501c:	f7fb f8e0 	bl	80001e0 <strlen>
 8005020:	2300      	movs	r3, #0
 8005022:	930a      	str	r3, [sp, #40]	; 0x28
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	f8d8 3000 	ldr.w	r3, [r8]
 800502c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	f8c8 2000 	str.w	r2, [r8]
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005046:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800504a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800504e:	9307      	str	r3, [sp, #28]
 8005050:	f8cd 8018 	str.w	r8, [sp, #24]
 8005054:	ee08 0a10 	vmov	s16, r0
 8005058:	4b9f      	ldr	r3, [pc, #636]	; (80052d8 <_printf_float+0x2dc>)
 800505a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	f7fb fd6b 	bl	8000b3c <__aeabi_dcmpun>
 8005066:	bb88      	cbnz	r0, 80050cc <_printf_float+0xd0>
 8005068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506c:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <_printf_float+0x2dc>)
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	f7fb fd45 	bl	8000b00 <__aeabi_dcmple>
 8005076:	bb48      	cbnz	r0, 80050cc <_printf_float+0xd0>
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	4640      	mov	r0, r8
 800507e:	4649      	mov	r1, r9
 8005080:	f7fb fd34 	bl	8000aec <__aeabi_dcmplt>
 8005084:	b110      	cbz	r0, 800508c <_printf_float+0x90>
 8005086:	232d      	movs	r3, #45	; 0x2d
 8005088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508c:	4b93      	ldr	r3, [pc, #588]	; (80052dc <_printf_float+0x2e0>)
 800508e:	4894      	ldr	r0, [pc, #592]	; (80052e0 <_printf_float+0x2e4>)
 8005090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005094:	bf94      	ite	ls
 8005096:	4698      	movls	r8, r3
 8005098:	4680      	movhi	r8, r0
 800509a:	2303      	movs	r3, #3
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	f023 0204 	bic.w	r2, r3, #4
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	9700      	str	r7, [sp, #0]
 80050ac:	4633      	mov	r3, r6
 80050ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f9d8 	bl	8005468 <_printf_common>
 80050b8:	3001      	adds	r0, #1
 80050ba:	f040 8090 	bne.w	80051de <_printf_float+0x1e2>
 80050be:	f04f 30ff 	mov.w	r0, #4294967295
 80050c2:	b00d      	add	sp, #52	; 0x34
 80050c4:	ecbd 8b02 	vpop	{d8}
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fd32 	bl	8000b3c <__aeabi_dcmpun>
 80050d8:	b140      	cbz	r0, 80050ec <_printf_float+0xf0>
 80050da:	464b      	mov	r3, r9
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfbc      	itt	lt
 80050e0:	232d      	movlt	r3, #45	; 0x2d
 80050e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050e6:	487f      	ldr	r0, [pc, #508]	; (80052e4 <_printf_float+0x2e8>)
 80050e8:	4b7f      	ldr	r3, [pc, #508]	; (80052e8 <_printf_float+0x2ec>)
 80050ea:	e7d1      	b.n	8005090 <_printf_float+0x94>
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050f2:	9206      	str	r2, [sp, #24]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	d13f      	bne.n	8005178 <_printf_float+0x17c>
 80050f8:	2306      	movs	r3, #6
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	6861      	ldr	r1, [r4, #4]
 8005100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	ab0a      	add	r3, sp, #40	; 0x28
 800510a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800510e:	ab09      	add	r3, sp, #36	; 0x24
 8005110:	ec49 8b10 	vmov	d0, r8, r9
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	6022      	str	r2, [r4, #0]
 8005118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800511c:	4628      	mov	r0, r5
 800511e:	f7ff fecd 	bl	8004ebc <__cvt>
 8005122:	9b06      	ldr	r3, [sp, #24]
 8005124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005126:	2b47      	cmp	r3, #71	; 0x47
 8005128:	4680      	mov	r8, r0
 800512a:	d108      	bne.n	800513e <_printf_float+0x142>
 800512c:	1cc8      	adds	r0, r1, #3
 800512e:	db02      	blt.n	8005136 <_printf_float+0x13a>
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	4299      	cmp	r1, r3
 8005134:	dd41      	ble.n	80051ba <_printf_float+0x1be>
 8005136:	f1ab 0b02 	sub.w	fp, fp, #2
 800513a:	fa5f fb8b 	uxtb.w	fp, fp
 800513e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005142:	d820      	bhi.n	8005186 <_printf_float+0x18a>
 8005144:	3901      	subs	r1, #1
 8005146:	465a      	mov	r2, fp
 8005148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800514c:	9109      	str	r1, [sp, #36]	; 0x24
 800514e:	f7ff ff17 	bl	8004f80 <__exponent>
 8005152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005154:	1813      	adds	r3, r2, r0
 8005156:	2a01      	cmp	r2, #1
 8005158:	4681      	mov	r9, r0
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	dc02      	bgt.n	8005164 <_printf_float+0x168>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	07d2      	lsls	r2, r2, #31
 8005162:	d501      	bpl.n	8005168 <_printf_float+0x16c>
 8005164:	3301      	adds	r3, #1
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800516c:	2b00      	cmp	r3, #0
 800516e:	d09c      	beq.n	80050aa <_printf_float+0xae>
 8005170:	232d      	movs	r3, #45	; 0x2d
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005176:	e798      	b.n	80050aa <_printf_float+0xae>
 8005178:	9a06      	ldr	r2, [sp, #24]
 800517a:	2a47      	cmp	r2, #71	; 0x47
 800517c:	d1be      	bne.n	80050fc <_printf_float+0x100>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1bc      	bne.n	80050fc <_printf_float+0x100>
 8005182:	2301      	movs	r3, #1
 8005184:	e7b9      	b.n	80050fa <_printf_float+0xfe>
 8005186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800518a:	d118      	bne.n	80051be <_printf_float+0x1c2>
 800518c:	2900      	cmp	r1, #0
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	dd0b      	ble.n	80051aa <_printf_float+0x1ae>
 8005192:	6121      	str	r1, [r4, #16]
 8005194:	b913      	cbnz	r3, 800519c <_printf_float+0x1a0>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	07d0      	lsls	r0, r2, #31
 800519a:	d502      	bpl.n	80051a2 <_printf_float+0x1a6>
 800519c:	3301      	adds	r3, #1
 800519e:	440b      	add	r3, r1
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051a4:	f04f 0900 	mov.w	r9, #0
 80051a8:	e7de      	b.n	8005168 <_printf_float+0x16c>
 80051aa:	b913      	cbnz	r3, 80051b2 <_printf_float+0x1b6>
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	07d2      	lsls	r2, r2, #31
 80051b0:	d501      	bpl.n	80051b6 <_printf_float+0x1ba>
 80051b2:	3302      	adds	r3, #2
 80051b4:	e7f4      	b.n	80051a0 <_printf_float+0x1a4>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7f2      	b.n	80051a0 <_printf_float+0x1a4>
 80051ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	4299      	cmp	r1, r3
 80051c2:	db05      	blt.n	80051d0 <_printf_float+0x1d4>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	6121      	str	r1, [r4, #16]
 80051c8:	07d8      	lsls	r0, r3, #31
 80051ca:	d5ea      	bpl.n	80051a2 <_printf_float+0x1a6>
 80051cc:	1c4b      	adds	r3, r1, #1
 80051ce:	e7e7      	b.n	80051a0 <_printf_float+0x1a4>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	bfd4      	ite	le
 80051d4:	f1c1 0202 	rsble	r2, r1, #2
 80051d8:	2201      	movgt	r2, #1
 80051da:	4413      	add	r3, r2
 80051dc:	e7e0      	b.n	80051a0 <_printf_float+0x1a4>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	055a      	lsls	r2, r3, #21
 80051e2:	d407      	bmi.n	80051f4 <_printf_float+0x1f8>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	4642      	mov	r2, r8
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	d12c      	bne.n	800524c <_printf_float+0x250>
 80051f2:	e764      	b.n	80050be <_printf_float+0xc2>
 80051f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051f8:	f240 80e0 	bls.w	80053bc <_printf_float+0x3c0>
 80051fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005200:	2200      	movs	r2, #0
 8005202:	2300      	movs	r3, #0
 8005204:	f7fb fc68 	bl	8000ad8 <__aeabi_dcmpeq>
 8005208:	2800      	cmp	r0, #0
 800520a:	d034      	beq.n	8005276 <_printf_float+0x27a>
 800520c:	4a37      	ldr	r2, [pc, #220]	; (80052ec <_printf_float+0x2f0>)
 800520e:	2301      	movs	r3, #1
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af51 	beq.w	80050be <_printf_float+0xc2>
 800521c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005220:	429a      	cmp	r2, r3
 8005222:	db02      	blt.n	800522a <_printf_float+0x22e>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07d8      	lsls	r0, r3, #31
 8005228:	d510      	bpl.n	800524c <_printf_float+0x250>
 800522a:	ee18 3a10 	vmov	r3, s16
 800522e:	4652      	mov	r2, sl
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af41 	beq.w	80050be <_printf_float+0xc2>
 800523c:	f04f 0800 	mov.w	r8, #0
 8005240:	f104 091a 	add.w	r9, r4, #26
 8005244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	4543      	cmp	r3, r8
 800524a:	dc09      	bgt.n	8005260 <_printf_float+0x264>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	f100 8105 	bmi.w	800545e <_printf_float+0x462>
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005258:	4298      	cmp	r0, r3
 800525a:	bfb8      	it	lt
 800525c:	4618      	movlt	r0, r3
 800525e:	e730      	b.n	80050c2 <_printf_float+0xc6>
 8005260:	2301      	movs	r3, #1
 8005262:	464a      	mov	r2, r9
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af27 	beq.w	80050be <_printf_float+0xc2>
 8005270:	f108 0801 	add.w	r8, r8, #1
 8005274:	e7e6      	b.n	8005244 <_printf_float+0x248>
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc39      	bgt.n	80052f0 <_printf_float+0x2f4>
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <_printf_float+0x2f0>)
 800527e:	2301      	movs	r3, #1
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af19 	beq.w	80050be <_printf_float+0xc2>
 800528c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005290:	4313      	orrs	r3, r2
 8005292:	d102      	bne.n	800529a <_printf_float+0x29e>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	d5d8      	bpl.n	800524c <_printf_float+0x250>
 800529a:	ee18 3a10 	vmov	r3, s16
 800529e:	4652      	mov	r2, sl
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	f43f af09 	beq.w	80050be <_printf_float+0xc2>
 80052ac:	f04f 0900 	mov.w	r9, #0
 80052b0:	f104 0a1a 	add.w	sl, r4, #26
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	425b      	negs	r3, r3
 80052b8:	454b      	cmp	r3, r9
 80052ba:	dc01      	bgt.n	80052c0 <_printf_float+0x2c4>
 80052bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052be:	e792      	b.n	80051e6 <_printf_float+0x1ea>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4652      	mov	r2, sl
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f aef7 	beq.w	80050be <_printf_float+0xc2>
 80052d0:	f109 0901 	add.w	r9, r9, #1
 80052d4:	e7ee      	b.n	80052b4 <_printf_float+0x2b8>
 80052d6:	bf00      	nop
 80052d8:	7fefffff 	.word	0x7fefffff
 80052dc:	08007db8 	.word	0x08007db8
 80052e0:	08007dbc 	.word	0x08007dbc
 80052e4:	08007dc4 	.word	0x08007dc4
 80052e8:	08007dc0 	.word	0x08007dc0
 80052ec:	08007dc8 	.word	0x08007dc8
 80052f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bfa8      	it	ge
 80052f8:	461a      	movge	r2, r3
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	4691      	mov	r9, r2
 80052fe:	dc37      	bgt.n	8005370 <_printf_float+0x374>
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005308:	f104 021a 	add.w	r2, r4, #26
 800530c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	eba3 0309 	sub.w	r3, r3, r9
 8005314:	455b      	cmp	r3, fp
 8005316:	dc33      	bgt.n	8005380 <_printf_float+0x384>
 8005318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800531c:	429a      	cmp	r2, r3
 800531e:	db3b      	blt.n	8005398 <_printf_float+0x39c>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07da      	lsls	r2, r3, #31
 8005324:	d438      	bmi.n	8005398 <_printf_float+0x39c>
 8005326:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005328:	9b05      	ldr	r3, [sp, #20]
 800532a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	eba2 0901 	sub.w	r9, r2, r1
 8005332:	4599      	cmp	r9, r3
 8005334:	bfa8      	it	ge
 8005336:	4699      	movge	r9, r3
 8005338:	f1b9 0f00 	cmp.w	r9, #0
 800533c:	dc35      	bgt.n	80053aa <_printf_float+0x3ae>
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005346:	f104 0a1a 	add.w	sl, r4, #26
 800534a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	eba3 0309 	sub.w	r3, r3, r9
 8005354:	4543      	cmp	r3, r8
 8005356:	f77f af79 	ble.w	800524c <_printf_float+0x250>
 800535a:	2301      	movs	r3, #1
 800535c:	4652      	mov	r2, sl
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f aeaa 	beq.w	80050be <_printf_float+0xc2>
 800536a:	f108 0801 	add.w	r8, r8, #1
 800536e:	e7ec      	b.n	800534a <_printf_float+0x34e>
 8005370:	4613      	mov	r3, r2
 8005372:	4631      	mov	r1, r6
 8005374:	4642      	mov	r2, r8
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	d1c0      	bne.n	8005300 <_printf_float+0x304>
 800537e:	e69e      	b.n	80050be <_printf_float+0xc2>
 8005380:	2301      	movs	r3, #1
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	9205      	str	r2, [sp, #20]
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f ae97 	beq.w	80050be <_printf_float+0xc2>
 8005390:	9a05      	ldr	r2, [sp, #20]
 8005392:	f10b 0b01 	add.w	fp, fp, #1
 8005396:	e7b9      	b.n	800530c <_printf_float+0x310>
 8005398:	ee18 3a10 	vmov	r3, s16
 800539c:	4652      	mov	r2, sl
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	d1be      	bne.n	8005326 <_printf_float+0x32a>
 80053a8:	e689      	b.n	80050be <_printf_float+0xc2>
 80053aa:	9a05      	ldr	r2, [sp, #20]
 80053ac:	464b      	mov	r3, r9
 80053ae:	4442      	add	r2, r8
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	d1c1      	bne.n	800533e <_printf_float+0x342>
 80053ba:	e680      	b.n	80050be <_printf_float+0xc2>
 80053bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053be:	2a01      	cmp	r2, #1
 80053c0:	dc01      	bgt.n	80053c6 <_printf_float+0x3ca>
 80053c2:	07db      	lsls	r3, r3, #31
 80053c4:	d538      	bpl.n	8005438 <_printf_float+0x43c>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4642      	mov	r2, r8
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae74 	beq.w	80050be <_printf_float+0xc2>
 80053d6:	ee18 3a10 	vmov	r3, s16
 80053da:	4652      	mov	r2, sl
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f ae6b 	beq.w	80050be <_printf_float+0xc2>
 80053e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053ec:	2200      	movs	r2, #0
 80053ee:	2300      	movs	r3, #0
 80053f0:	f7fb fb72 	bl	8000ad8 <__aeabi_dcmpeq>
 80053f4:	b9d8      	cbnz	r0, 800542e <_printf_float+0x432>
 80053f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f8:	f108 0201 	add.w	r2, r8, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	d10e      	bne.n	8005426 <_printf_float+0x42a>
 8005408:	e659      	b.n	80050be <_printf_float+0xc2>
 800540a:	2301      	movs	r3, #1
 800540c:	4652      	mov	r2, sl
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae52 	beq.w	80050be <_printf_float+0xc2>
 800541a:	f108 0801 	add.w	r8, r8, #1
 800541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	4543      	cmp	r3, r8
 8005424:	dcf1      	bgt.n	800540a <_printf_float+0x40e>
 8005426:	464b      	mov	r3, r9
 8005428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800542c:	e6dc      	b.n	80051e8 <_printf_float+0x1ec>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	f104 0a1a 	add.w	sl, r4, #26
 8005436:	e7f2      	b.n	800541e <_printf_float+0x422>
 8005438:	2301      	movs	r3, #1
 800543a:	4642      	mov	r2, r8
 800543c:	e7df      	b.n	80053fe <_printf_float+0x402>
 800543e:	2301      	movs	r3, #1
 8005440:	464a      	mov	r2, r9
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae38 	beq.w	80050be <_printf_float+0xc2>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005456:	1a5b      	subs	r3, r3, r1
 8005458:	4543      	cmp	r3, r8
 800545a:	dcf0      	bgt.n	800543e <_printf_float+0x442>
 800545c:	e6fa      	b.n	8005254 <_printf_float+0x258>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	f104 0919 	add.w	r9, r4, #25
 8005466:	e7f4      	b.n	8005452 <_printf_float+0x456>

08005468 <_printf_common>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	4616      	mov	r6, r2
 800546e:	4699      	mov	r9, r3
 8005470:	688a      	ldr	r2, [r1, #8]
 8005472:	690b      	ldr	r3, [r1, #16]
 8005474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005478:	4293      	cmp	r3, r2
 800547a:	bfb8      	it	lt
 800547c:	4613      	movlt	r3, r2
 800547e:	6033      	str	r3, [r6, #0]
 8005480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005484:	4607      	mov	r7, r0
 8005486:	460c      	mov	r4, r1
 8005488:	b10a      	cbz	r2, 800548e <_printf_common+0x26>
 800548a:	3301      	adds	r3, #1
 800548c:	6033      	str	r3, [r6, #0]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	0699      	lsls	r1, r3, #26
 8005492:	bf42      	ittt	mi
 8005494:	6833      	ldrmi	r3, [r6, #0]
 8005496:	3302      	addmi	r3, #2
 8005498:	6033      	strmi	r3, [r6, #0]
 800549a:	6825      	ldr	r5, [r4, #0]
 800549c:	f015 0506 	ands.w	r5, r5, #6
 80054a0:	d106      	bne.n	80054b0 <_printf_common+0x48>
 80054a2:	f104 0a19 	add.w	sl, r4, #25
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	6832      	ldr	r2, [r6, #0]
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	42ab      	cmp	r3, r5
 80054ae:	dc26      	bgt.n	80054fe <_printf_common+0x96>
 80054b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054b4:	1e13      	subs	r3, r2, #0
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	bf18      	it	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	0692      	lsls	r2, r2, #26
 80054be:	d42b      	bmi.n	8005518 <_printf_common+0xb0>
 80054c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d01e      	beq.n	800550c <_printf_common+0xa4>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	68e5      	ldr	r5, [r4, #12]
 80054d2:	6832      	ldr	r2, [r6, #0]
 80054d4:	f003 0306 	and.w	r3, r3, #6
 80054d8:	2b04      	cmp	r3, #4
 80054da:	bf08      	it	eq
 80054dc:	1aad      	subeq	r5, r5, r2
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	bf0c      	ite	eq
 80054e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e8:	2500      	movne	r5, #0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	bfc4      	itt	gt
 80054ee:	1a9b      	subgt	r3, r3, r2
 80054f0:	18ed      	addgt	r5, r5, r3
 80054f2:	2600      	movs	r6, #0
 80054f4:	341a      	adds	r4, #26
 80054f6:	42b5      	cmp	r5, r6
 80054f8:	d11a      	bne.n	8005530 <_printf_common+0xc8>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e008      	b.n	8005510 <_printf_common+0xa8>
 80054fe:	2301      	movs	r3, #1
 8005500:	4652      	mov	r2, sl
 8005502:	4649      	mov	r1, r9
 8005504:	4638      	mov	r0, r7
 8005506:	47c0      	blx	r8
 8005508:	3001      	adds	r0, #1
 800550a:	d103      	bne.n	8005514 <_printf_common+0xac>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005514:	3501      	adds	r5, #1
 8005516:	e7c6      	b.n	80054a6 <_printf_common+0x3e>
 8005518:	18e1      	adds	r1, r4, r3
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	2030      	movs	r0, #48	; 0x30
 800551e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005522:	4422      	add	r2, r4
 8005524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800552c:	3302      	adds	r3, #2
 800552e:	e7c7      	b.n	80054c0 <_printf_common+0x58>
 8005530:	2301      	movs	r3, #1
 8005532:	4622      	mov	r2, r4
 8005534:	4649      	mov	r1, r9
 8005536:	4638      	mov	r0, r7
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d0e6      	beq.n	800550c <_printf_common+0xa4>
 800553e:	3601      	adds	r6, #1
 8005540:	e7d9      	b.n	80054f6 <_printf_common+0x8e>
	...

08005544 <_printf_i>:
 8005544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	460c      	mov	r4, r1
 800554a:	4691      	mov	r9, r2
 800554c:	7e27      	ldrb	r7, [r4, #24]
 800554e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005550:	2f78      	cmp	r7, #120	; 0x78
 8005552:	4680      	mov	r8, r0
 8005554:	469a      	mov	sl, r3
 8005556:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800555a:	d807      	bhi.n	800556c <_printf_i+0x28>
 800555c:	2f62      	cmp	r7, #98	; 0x62
 800555e:	d80a      	bhi.n	8005576 <_printf_i+0x32>
 8005560:	2f00      	cmp	r7, #0
 8005562:	f000 80d8 	beq.w	8005716 <_printf_i+0x1d2>
 8005566:	2f58      	cmp	r7, #88	; 0x58
 8005568:	f000 80a3 	beq.w	80056b2 <_printf_i+0x16e>
 800556c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005574:	e03a      	b.n	80055ec <_printf_i+0xa8>
 8005576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800557a:	2b15      	cmp	r3, #21
 800557c:	d8f6      	bhi.n	800556c <_printf_i+0x28>
 800557e:	a001      	add	r0, pc, #4	; (adr r0, 8005584 <_printf_i+0x40>)
 8005580:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005584:	080055dd 	.word	0x080055dd
 8005588:	080055f1 	.word	0x080055f1
 800558c:	0800556d 	.word	0x0800556d
 8005590:	0800556d 	.word	0x0800556d
 8005594:	0800556d 	.word	0x0800556d
 8005598:	0800556d 	.word	0x0800556d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800556d 	.word	0x0800556d
 80055a4:	0800556d 	.word	0x0800556d
 80055a8:	0800556d 	.word	0x0800556d
 80055ac:	0800556d 	.word	0x0800556d
 80055b0:	080056fd 	.word	0x080056fd
 80055b4:	08005621 	.word	0x08005621
 80055b8:	080056df 	.word	0x080056df
 80055bc:	0800556d 	.word	0x0800556d
 80055c0:	0800556d 	.word	0x0800556d
 80055c4:	0800571f 	.word	0x0800571f
 80055c8:	0800556d 	.word	0x0800556d
 80055cc:	08005621 	.word	0x08005621
 80055d0:	0800556d 	.word	0x0800556d
 80055d4:	0800556d 	.word	0x0800556d
 80055d8:	080056e7 	.word	0x080056e7
 80055dc:	680b      	ldr	r3, [r1, #0]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	600a      	str	r2, [r1, #0]
 80055e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80055e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0a3      	b.n	8005738 <_printf_i+0x1f4>
 80055f0:	6825      	ldr	r5, [r4, #0]
 80055f2:	6808      	ldr	r0, [r1, #0]
 80055f4:	062e      	lsls	r6, r5, #24
 80055f6:	f100 0304 	add.w	r3, r0, #4
 80055fa:	d50a      	bpl.n	8005612 <_printf_i+0xce>
 80055fc:	6805      	ldr	r5, [r0, #0]
 80055fe:	600b      	str	r3, [r1, #0]
 8005600:	2d00      	cmp	r5, #0
 8005602:	da03      	bge.n	800560c <_printf_i+0xc8>
 8005604:	232d      	movs	r3, #45	; 0x2d
 8005606:	426d      	negs	r5, r5
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	485e      	ldr	r0, [pc, #376]	; (8005788 <_printf_i+0x244>)
 800560e:	230a      	movs	r3, #10
 8005610:	e019      	b.n	8005646 <_printf_i+0x102>
 8005612:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005616:	6805      	ldr	r5, [r0, #0]
 8005618:	600b      	str	r3, [r1, #0]
 800561a:	bf18      	it	ne
 800561c:	b22d      	sxthne	r5, r5
 800561e:	e7ef      	b.n	8005600 <_printf_i+0xbc>
 8005620:	680b      	ldr	r3, [r1, #0]
 8005622:	6825      	ldr	r5, [r4, #0]
 8005624:	1d18      	adds	r0, r3, #4
 8005626:	6008      	str	r0, [r1, #0]
 8005628:	0628      	lsls	r0, r5, #24
 800562a:	d501      	bpl.n	8005630 <_printf_i+0xec>
 800562c:	681d      	ldr	r5, [r3, #0]
 800562e:	e002      	b.n	8005636 <_printf_i+0xf2>
 8005630:	0669      	lsls	r1, r5, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0xe8>
 8005634:	881d      	ldrh	r5, [r3, #0]
 8005636:	4854      	ldr	r0, [pc, #336]	; (8005788 <_printf_i+0x244>)
 8005638:	2f6f      	cmp	r7, #111	; 0x6f
 800563a:	bf0c      	ite	eq
 800563c:	2308      	moveq	r3, #8
 800563e:	230a      	movne	r3, #10
 8005640:	2100      	movs	r1, #0
 8005642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005646:	6866      	ldr	r6, [r4, #4]
 8005648:	60a6      	str	r6, [r4, #8]
 800564a:	2e00      	cmp	r6, #0
 800564c:	bfa2      	ittt	ge
 800564e:	6821      	ldrge	r1, [r4, #0]
 8005650:	f021 0104 	bicge.w	r1, r1, #4
 8005654:	6021      	strge	r1, [r4, #0]
 8005656:	b90d      	cbnz	r5, 800565c <_printf_i+0x118>
 8005658:	2e00      	cmp	r6, #0
 800565a:	d04d      	beq.n	80056f8 <_printf_i+0x1b4>
 800565c:	4616      	mov	r6, r2
 800565e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005662:	fb03 5711 	mls	r7, r3, r1, r5
 8005666:	5dc7      	ldrb	r7, [r0, r7]
 8005668:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800566c:	462f      	mov	r7, r5
 800566e:	42bb      	cmp	r3, r7
 8005670:	460d      	mov	r5, r1
 8005672:	d9f4      	bls.n	800565e <_printf_i+0x11a>
 8005674:	2b08      	cmp	r3, #8
 8005676:	d10b      	bne.n	8005690 <_printf_i+0x14c>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	07df      	lsls	r7, r3, #31
 800567c:	d508      	bpl.n	8005690 <_printf_i+0x14c>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	6861      	ldr	r1, [r4, #4]
 8005682:	4299      	cmp	r1, r3
 8005684:	bfde      	ittt	le
 8005686:	2330      	movle	r3, #48	; 0x30
 8005688:	f806 3c01 	strble.w	r3, [r6, #-1]
 800568c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005690:	1b92      	subs	r2, r2, r6
 8005692:	6122      	str	r2, [r4, #16]
 8005694:	f8cd a000 	str.w	sl, [sp]
 8005698:	464b      	mov	r3, r9
 800569a:	aa03      	add	r2, sp, #12
 800569c:	4621      	mov	r1, r4
 800569e:	4640      	mov	r0, r8
 80056a0:	f7ff fee2 	bl	8005468 <_printf_common>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d14c      	bne.n	8005742 <_printf_i+0x1fe>
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	b004      	add	sp, #16
 80056ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b2:	4835      	ldr	r0, [pc, #212]	; (8005788 <_printf_i+0x244>)
 80056b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	680e      	ldr	r6, [r1, #0]
 80056bc:	061f      	lsls	r7, r3, #24
 80056be:	f856 5b04 	ldr.w	r5, [r6], #4
 80056c2:	600e      	str	r6, [r1, #0]
 80056c4:	d514      	bpl.n	80056f0 <_printf_i+0x1ac>
 80056c6:	07d9      	lsls	r1, r3, #31
 80056c8:	bf44      	itt	mi
 80056ca:	f043 0320 	orrmi.w	r3, r3, #32
 80056ce:	6023      	strmi	r3, [r4, #0]
 80056d0:	b91d      	cbnz	r5, 80056da <_printf_i+0x196>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f023 0320 	bic.w	r3, r3, #32
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	2310      	movs	r3, #16
 80056dc:	e7b0      	b.n	8005640 <_printf_i+0xfc>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f043 0320 	orr.w	r3, r3, #32
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	2378      	movs	r3, #120	; 0x78
 80056e8:	4828      	ldr	r0, [pc, #160]	; (800578c <_printf_i+0x248>)
 80056ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ee:	e7e3      	b.n	80056b8 <_printf_i+0x174>
 80056f0:	065e      	lsls	r6, r3, #25
 80056f2:	bf48      	it	mi
 80056f4:	b2ad      	uxthmi	r5, r5
 80056f6:	e7e6      	b.n	80056c6 <_printf_i+0x182>
 80056f8:	4616      	mov	r6, r2
 80056fa:	e7bb      	b.n	8005674 <_printf_i+0x130>
 80056fc:	680b      	ldr	r3, [r1, #0]
 80056fe:	6826      	ldr	r6, [r4, #0]
 8005700:	6960      	ldr	r0, [r4, #20]
 8005702:	1d1d      	adds	r5, r3, #4
 8005704:	600d      	str	r5, [r1, #0]
 8005706:	0635      	lsls	r5, r6, #24
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	d501      	bpl.n	8005710 <_printf_i+0x1cc>
 800570c:	6018      	str	r0, [r3, #0]
 800570e:	e002      	b.n	8005716 <_printf_i+0x1d2>
 8005710:	0671      	lsls	r1, r6, #25
 8005712:	d5fb      	bpl.n	800570c <_printf_i+0x1c8>
 8005714:	8018      	strh	r0, [r3, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	4616      	mov	r6, r2
 800571c:	e7ba      	b.n	8005694 <_printf_i+0x150>
 800571e:	680b      	ldr	r3, [r1, #0]
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	600a      	str	r2, [r1, #0]
 8005724:	681e      	ldr	r6, [r3, #0]
 8005726:	6862      	ldr	r2, [r4, #4]
 8005728:	2100      	movs	r1, #0
 800572a:	4630      	mov	r0, r6
 800572c:	f7fa fd60 	bl	80001f0 <memchr>
 8005730:	b108      	cbz	r0, 8005736 <_printf_i+0x1f2>
 8005732:	1b80      	subs	r0, r0, r6
 8005734:	6060      	str	r0, [r4, #4]
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	2300      	movs	r3, #0
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005740:	e7a8      	b.n	8005694 <_printf_i+0x150>
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	4632      	mov	r2, r6
 8005746:	4649      	mov	r1, r9
 8005748:	4640      	mov	r0, r8
 800574a:	47d0      	blx	sl
 800574c:	3001      	adds	r0, #1
 800574e:	d0ab      	beq.n	80056a8 <_printf_i+0x164>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	079b      	lsls	r3, r3, #30
 8005754:	d413      	bmi.n	800577e <_printf_i+0x23a>
 8005756:	68e0      	ldr	r0, [r4, #12]
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	4298      	cmp	r0, r3
 800575c:	bfb8      	it	lt
 800575e:	4618      	movlt	r0, r3
 8005760:	e7a4      	b.n	80056ac <_printf_i+0x168>
 8005762:	2301      	movs	r3, #1
 8005764:	4632      	mov	r2, r6
 8005766:	4649      	mov	r1, r9
 8005768:	4640      	mov	r0, r8
 800576a:	47d0      	blx	sl
 800576c:	3001      	adds	r0, #1
 800576e:	d09b      	beq.n	80056a8 <_printf_i+0x164>
 8005770:	3501      	adds	r5, #1
 8005772:	68e3      	ldr	r3, [r4, #12]
 8005774:	9903      	ldr	r1, [sp, #12]
 8005776:	1a5b      	subs	r3, r3, r1
 8005778:	42ab      	cmp	r3, r5
 800577a:	dcf2      	bgt.n	8005762 <_printf_i+0x21e>
 800577c:	e7eb      	b.n	8005756 <_printf_i+0x212>
 800577e:	2500      	movs	r5, #0
 8005780:	f104 0619 	add.w	r6, r4, #25
 8005784:	e7f5      	b.n	8005772 <_printf_i+0x22e>
 8005786:	bf00      	nop
 8005788:	08007dca 	.word	0x08007dca
 800578c:	08007ddb 	.word	0x08007ddb

08005790 <siprintf>:
 8005790:	b40e      	push	{r1, r2, r3}
 8005792:	b500      	push	{lr}
 8005794:	b09c      	sub	sp, #112	; 0x70
 8005796:	ab1d      	add	r3, sp, #116	; 0x74
 8005798:	9002      	str	r0, [sp, #8]
 800579a:	9006      	str	r0, [sp, #24]
 800579c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80057a0:	4809      	ldr	r0, [pc, #36]	; (80057c8 <siprintf+0x38>)
 80057a2:	9107      	str	r1, [sp, #28]
 80057a4:	9104      	str	r1, [sp, #16]
 80057a6:	4909      	ldr	r1, [pc, #36]	; (80057cc <siprintf+0x3c>)
 80057a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ac:	9105      	str	r1, [sp, #20]
 80057ae:	6800      	ldr	r0, [r0, #0]
 80057b0:	9301      	str	r3, [sp, #4]
 80057b2:	a902      	add	r1, sp, #8
 80057b4:	f001 fb32 	bl	8006e1c <_svfiprintf_r>
 80057b8:	9b02      	ldr	r3, [sp, #8]
 80057ba:	2200      	movs	r2, #0
 80057bc:	701a      	strb	r2, [r3, #0]
 80057be:	b01c      	add	sp, #112	; 0x70
 80057c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c4:	b003      	add	sp, #12
 80057c6:	4770      	bx	lr
 80057c8:	2000000c 	.word	0x2000000c
 80057cc:	ffff0208 	.word	0xffff0208

080057d0 <quorem>:
 80057d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057d4:	6903      	ldr	r3, [r0, #16]
 80057d6:	690c      	ldr	r4, [r1, #16]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	4607      	mov	r7, r0
 80057dc:	f2c0 8081 	blt.w	80058e2 <quorem+0x112>
 80057e0:	3c01      	subs	r4, #1
 80057e2:	f101 0814 	add.w	r8, r1, #20
 80057e6:	f100 0514 	add.w	r5, r0, #20
 80057ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057ee:	9301      	str	r3, [sp, #4]
 80057f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057f8:	3301      	adds	r3, #1
 80057fa:	429a      	cmp	r2, r3
 80057fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005800:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005804:	fbb2 f6f3 	udiv	r6, r2, r3
 8005808:	d331      	bcc.n	800586e <quorem+0x9e>
 800580a:	f04f 0e00 	mov.w	lr, #0
 800580e:	4640      	mov	r0, r8
 8005810:	46ac      	mov	ip, r5
 8005812:	46f2      	mov	sl, lr
 8005814:	f850 2b04 	ldr.w	r2, [r0], #4
 8005818:	b293      	uxth	r3, r2
 800581a:	fb06 e303 	mla	r3, r6, r3, lr
 800581e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005822:	b29b      	uxth	r3, r3
 8005824:	ebaa 0303 	sub.w	r3, sl, r3
 8005828:	0c12      	lsrs	r2, r2, #16
 800582a:	f8dc a000 	ldr.w	sl, [ip]
 800582e:	fb06 e202 	mla	r2, r6, r2, lr
 8005832:	fa13 f38a 	uxtah	r3, r3, sl
 8005836:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800583a:	fa1f fa82 	uxth.w	sl, r2
 800583e:	f8dc 2000 	ldr.w	r2, [ip]
 8005842:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005846:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800584a:	b29b      	uxth	r3, r3
 800584c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005850:	4581      	cmp	r9, r0
 8005852:	f84c 3b04 	str.w	r3, [ip], #4
 8005856:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800585a:	d2db      	bcs.n	8005814 <quorem+0x44>
 800585c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005860:	b92b      	cbnz	r3, 800586e <quorem+0x9e>
 8005862:	9b01      	ldr	r3, [sp, #4]
 8005864:	3b04      	subs	r3, #4
 8005866:	429d      	cmp	r5, r3
 8005868:	461a      	mov	r2, r3
 800586a:	d32e      	bcc.n	80058ca <quorem+0xfa>
 800586c:	613c      	str	r4, [r7, #16]
 800586e:	4638      	mov	r0, r7
 8005870:	f001 f8be 	bl	80069f0 <__mcmp>
 8005874:	2800      	cmp	r0, #0
 8005876:	db24      	blt.n	80058c2 <quorem+0xf2>
 8005878:	3601      	adds	r6, #1
 800587a:	4628      	mov	r0, r5
 800587c:	f04f 0c00 	mov.w	ip, #0
 8005880:	f858 2b04 	ldr.w	r2, [r8], #4
 8005884:	f8d0 e000 	ldr.w	lr, [r0]
 8005888:	b293      	uxth	r3, r2
 800588a:	ebac 0303 	sub.w	r3, ip, r3
 800588e:	0c12      	lsrs	r2, r2, #16
 8005890:	fa13 f38e 	uxtah	r3, r3, lr
 8005894:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005898:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800589c:	b29b      	uxth	r3, r3
 800589e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80058a2:	45c1      	cmp	r9, r8
 80058a4:	f840 3b04 	str.w	r3, [r0], #4
 80058a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80058ac:	d2e8      	bcs.n	8005880 <quorem+0xb0>
 80058ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80058b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058b6:	b922      	cbnz	r2, 80058c2 <quorem+0xf2>
 80058b8:	3b04      	subs	r3, #4
 80058ba:	429d      	cmp	r5, r3
 80058bc:	461a      	mov	r2, r3
 80058be:	d30a      	bcc.n	80058d6 <quorem+0x106>
 80058c0:	613c      	str	r4, [r7, #16]
 80058c2:	4630      	mov	r0, r6
 80058c4:	b003      	add	sp, #12
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ca:	6812      	ldr	r2, [r2, #0]
 80058cc:	3b04      	subs	r3, #4
 80058ce:	2a00      	cmp	r2, #0
 80058d0:	d1cc      	bne.n	800586c <quorem+0x9c>
 80058d2:	3c01      	subs	r4, #1
 80058d4:	e7c7      	b.n	8005866 <quorem+0x96>
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	3b04      	subs	r3, #4
 80058da:	2a00      	cmp	r2, #0
 80058dc:	d1f0      	bne.n	80058c0 <quorem+0xf0>
 80058de:	3c01      	subs	r4, #1
 80058e0:	e7eb      	b.n	80058ba <quorem+0xea>
 80058e2:	2000      	movs	r0, #0
 80058e4:	e7ee      	b.n	80058c4 <quorem+0xf4>
	...

080058e8 <_dtoa_r>:
 80058e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058ec:	ed2d 8b02 	vpush	{d8}
 80058f0:	ec57 6b10 	vmov	r6, r7, d0
 80058f4:	b095      	sub	sp, #84	; 0x54
 80058f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058fc:	9105      	str	r1, [sp, #20]
 80058fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005902:	4604      	mov	r4, r0
 8005904:	9209      	str	r2, [sp, #36]	; 0x24
 8005906:	930f      	str	r3, [sp, #60]	; 0x3c
 8005908:	b975      	cbnz	r5, 8005928 <_dtoa_r+0x40>
 800590a:	2010      	movs	r0, #16
 800590c:	f000 fddc 	bl	80064c8 <malloc>
 8005910:	4602      	mov	r2, r0
 8005912:	6260      	str	r0, [r4, #36]	; 0x24
 8005914:	b920      	cbnz	r0, 8005920 <_dtoa_r+0x38>
 8005916:	4bb2      	ldr	r3, [pc, #712]	; (8005be0 <_dtoa_r+0x2f8>)
 8005918:	21ea      	movs	r1, #234	; 0xea
 800591a:	48b2      	ldr	r0, [pc, #712]	; (8005be4 <_dtoa_r+0x2fc>)
 800591c:	f001 fb8e 	bl	800703c <__assert_func>
 8005920:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005924:	6005      	str	r5, [r0, #0]
 8005926:	60c5      	str	r5, [r0, #12]
 8005928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800592a:	6819      	ldr	r1, [r3, #0]
 800592c:	b151      	cbz	r1, 8005944 <_dtoa_r+0x5c>
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	604a      	str	r2, [r1, #4]
 8005932:	2301      	movs	r3, #1
 8005934:	4093      	lsls	r3, r2
 8005936:	608b      	str	r3, [r1, #8]
 8005938:	4620      	mov	r0, r4
 800593a:	f000 fe1b 	bl	8006574 <_Bfree>
 800593e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
 8005944:	1e3b      	subs	r3, r7, #0
 8005946:	bfb9      	ittee	lt
 8005948:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800594c:	9303      	strlt	r3, [sp, #12]
 800594e:	2300      	movge	r3, #0
 8005950:	f8c8 3000 	strge.w	r3, [r8]
 8005954:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005958:	4ba3      	ldr	r3, [pc, #652]	; (8005be8 <_dtoa_r+0x300>)
 800595a:	bfbc      	itt	lt
 800595c:	2201      	movlt	r2, #1
 800595e:	f8c8 2000 	strlt.w	r2, [r8]
 8005962:	ea33 0309 	bics.w	r3, r3, r9
 8005966:	d11b      	bne.n	80059a0 <_dtoa_r+0xb8>
 8005968:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800596a:	f242 730f 	movw	r3, #9999	; 0x270f
 800596e:	6013      	str	r3, [r2, #0]
 8005970:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005974:	4333      	orrs	r3, r6
 8005976:	f000 857a 	beq.w	800646e <_dtoa_r+0xb86>
 800597a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800597c:	b963      	cbnz	r3, 8005998 <_dtoa_r+0xb0>
 800597e:	4b9b      	ldr	r3, [pc, #620]	; (8005bec <_dtoa_r+0x304>)
 8005980:	e024      	b.n	80059cc <_dtoa_r+0xe4>
 8005982:	4b9b      	ldr	r3, [pc, #620]	; (8005bf0 <_dtoa_r+0x308>)
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800598a:	6013      	str	r3, [r2, #0]
 800598c:	9800      	ldr	r0, [sp, #0]
 800598e:	b015      	add	sp, #84	; 0x54
 8005990:	ecbd 8b02 	vpop	{d8}
 8005994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005998:	4b94      	ldr	r3, [pc, #592]	; (8005bec <_dtoa_r+0x304>)
 800599a:	9300      	str	r3, [sp, #0]
 800599c:	3303      	adds	r3, #3
 800599e:	e7f3      	b.n	8005988 <_dtoa_r+0xa0>
 80059a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80059a4:	2200      	movs	r2, #0
 80059a6:	ec51 0b17 	vmov	r0, r1, d7
 80059aa:	2300      	movs	r3, #0
 80059ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80059b0:	f7fb f892 	bl	8000ad8 <__aeabi_dcmpeq>
 80059b4:	4680      	mov	r8, r0
 80059b6:	b158      	cbz	r0, 80059d0 <_dtoa_r+0xe8>
 80059b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059ba:	2301      	movs	r3, #1
 80059bc:	6013      	str	r3, [r2, #0]
 80059be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	f000 8551 	beq.w	8006468 <_dtoa_r+0xb80>
 80059c6:	488b      	ldr	r0, [pc, #556]	; (8005bf4 <_dtoa_r+0x30c>)
 80059c8:	6018      	str	r0, [r3, #0]
 80059ca:	1e43      	subs	r3, r0, #1
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	e7dd      	b.n	800598c <_dtoa_r+0xa4>
 80059d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80059d4:	aa12      	add	r2, sp, #72	; 0x48
 80059d6:	a913      	add	r1, sp, #76	; 0x4c
 80059d8:	4620      	mov	r0, r4
 80059da:	f001 f8ad 	bl	8006b38 <__d2b>
 80059de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80059e2:	4683      	mov	fp, r0
 80059e4:	2d00      	cmp	r5, #0
 80059e6:	d07c      	beq.n	8005ae2 <_dtoa_r+0x1fa>
 80059e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80059ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80059f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005a02:	4b7d      	ldr	r3, [pc, #500]	; (8005bf8 <_dtoa_r+0x310>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	4630      	mov	r0, r6
 8005a08:	4639      	mov	r1, r7
 8005a0a:	f7fa fc45 	bl	8000298 <__aeabi_dsub>
 8005a0e:	a36e      	add	r3, pc, #440	; (adr r3, 8005bc8 <_dtoa_r+0x2e0>)
 8005a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a14:	f7fa fdf8 	bl	8000608 <__aeabi_dmul>
 8005a18:	a36d      	add	r3, pc, #436	; (adr r3, 8005bd0 <_dtoa_r+0x2e8>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fc3d 	bl	800029c <__adddf3>
 8005a22:	4606      	mov	r6, r0
 8005a24:	4628      	mov	r0, r5
 8005a26:	460f      	mov	r7, r1
 8005a28:	f7fa fd84 	bl	8000534 <__aeabi_i2d>
 8005a2c:	a36a      	add	r3, pc, #424	; (adr r3, 8005bd8 <_dtoa_r+0x2f0>)
 8005a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a32:	f7fa fde9 	bl	8000608 <__aeabi_dmul>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4630      	mov	r0, r6
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	f7fa fc2d 	bl	800029c <__adddf3>
 8005a42:	4606      	mov	r6, r0
 8005a44:	460f      	mov	r7, r1
 8005a46:	f7fb f88f 	bl	8000b68 <__aeabi_d2iz>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	2300      	movs	r3, #0
 8005a50:	4630      	mov	r0, r6
 8005a52:	4639      	mov	r1, r7
 8005a54:	f7fb f84a 	bl	8000aec <__aeabi_dcmplt>
 8005a58:	b148      	cbz	r0, 8005a6e <_dtoa_r+0x186>
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	f7fa fd6a 	bl	8000534 <__aeabi_i2d>
 8005a60:	4632      	mov	r2, r6
 8005a62:	463b      	mov	r3, r7
 8005a64:	f7fb f838 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a68:	b908      	cbnz	r0, 8005a6e <_dtoa_r+0x186>
 8005a6a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a6e:	f1ba 0f16 	cmp.w	sl, #22
 8005a72:	d854      	bhi.n	8005b1e <_dtoa_r+0x236>
 8005a74:	4b61      	ldr	r3, [pc, #388]	; (8005bfc <_dtoa_r+0x314>)
 8005a76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005a82:	f7fb f833 	bl	8000aec <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d04b      	beq.n	8005b22 <_dtoa_r+0x23a>
 8005a8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a8e:	2300      	movs	r3, #0
 8005a90:	930e      	str	r3, [sp, #56]	; 0x38
 8005a92:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a94:	1b5d      	subs	r5, r3, r5
 8005a96:	1e6b      	subs	r3, r5, #1
 8005a98:	9304      	str	r3, [sp, #16]
 8005a9a:	bf43      	ittte	mi
 8005a9c:	2300      	movmi	r3, #0
 8005a9e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005aa2:	9304      	strmi	r3, [sp, #16]
 8005aa4:	f04f 0800 	movpl.w	r8, #0
 8005aa8:	f1ba 0f00 	cmp.w	sl, #0
 8005aac:	db3b      	blt.n	8005b26 <_dtoa_r+0x23e>
 8005aae:	9b04      	ldr	r3, [sp, #16]
 8005ab0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8005ab4:	4453      	add	r3, sl
 8005ab6:	9304      	str	r3, [sp, #16]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9306      	str	r3, [sp, #24]
 8005abc:	9b05      	ldr	r3, [sp, #20]
 8005abe:	2b09      	cmp	r3, #9
 8005ac0:	d869      	bhi.n	8005b96 <_dtoa_r+0x2ae>
 8005ac2:	2b05      	cmp	r3, #5
 8005ac4:	bfc4      	itt	gt
 8005ac6:	3b04      	subgt	r3, #4
 8005ac8:	9305      	strgt	r3, [sp, #20]
 8005aca:	9b05      	ldr	r3, [sp, #20]
 8005acc:	f1a3 0302 	sub.w	r3, r3, #2
 8005ad0:	bfcc      	ite	gt
 8005ad2:	2500      	movgt	r5, #0
 8005ad4:	2501      	movle	r5, #1
 8005ad6:	2b03      	cmp	r3, #3
 8005ad8:	d869      	bhi.n	8005bae <_dtoa_r+0x2c6>
 8005ada:	e8df f003 	tbb	[pc, r3]
 8005ade:	4e2c      	.short	0x4e2c
 8005ae0:	5a4c      	.short	0x5a4c
 8005ae2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8005ae6:	441d      	add	r5, r3
 8005ae8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005aec:	2b20      	cmp	r3, #32
 8005aee:	bfc1      	itttt	gt
 8005af0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005af4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005af8:	fa09 f303 	lslgt.w	r3, r9, r3
 8005afc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005b00:	bfda      	itte	le
 8005b02:	f1c3 0320 	rsble	r3, r3, #32
 8005b06:	fa06 f003 	lslle.w	r0, r6, r3
 8005b0a:	4318      	orrgt	r0, r3
 8005b0c:	f7fa fd02 	bl	8000514 <__aeabi_ui2d>
 8005b10:	2301      	movs	r3, #1
 8005b12:	4606      	mov	r6, r0
 8005b14:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b18:	3d01      	subs	r5, #1
 8005b1a:	9310      	str	r3, [sp, #64]	; 0x40
 8005b1c:	e771      	b.n	8005a02 <_dtoa_r+0x11a>
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e7b6      	b.n	8005a90 <_dtoa_r+0x1a8>
 8005b22:	900e      	str	r0, [sp, #56]	; 0x38
 8005b24:	e7b5      	b.n	8005a92 <_dtoa_r+0x1aa>
 8005b26:	f1ca 0300 	rsb	r3, sl, #0
 8005b2a:	9306      	str	r3, [sp, #24]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	eba8 080a 	sub.w	r8, r8, sl
 8005b32:	930d      	str	r3, [sp, #52]	; 0x34
 8005b34:	e7c2      	b.n	8005abc <_dtoa_r+0x1d4>
 8005b36:	2300      	movs	r3, #0
 8005b38:	9308      	str	r3, [sp, #32]
 8005b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	dc39      	bgt.n	8005bb4 <_dtoa_r+0x2cc>
 8005b40:	f04f 0901 	mov.w	r9, #1
 8005b44:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b48:	464b      	mov	r3, r9
 8005b4a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005b4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b50:	2200      	movs	r2, #0
 8005b52:	6042      	str	r2, [r0, #4]
 8005b54:	2204      	movs	r2, #4
 8005b56:	f102 0614 	add.w	r6, r2, #20
 8005b5a:	429e      	cmp	r6, r3
 8005b5c:	6841      	ldr	r1, [r0, #4]
 8005b5e:	d92f      	bls.n	8005bc0 <_dtoa_r+0x2d8>
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fcc7 	bl	80064f4 <_Balloc>
 8005b66:	9000      	str	r0, [sp, #0]
 8005b68:	2800      	cmp	r0, #0
 8005b6a:	d14b      	bne.n	8005c04 <_dtoa_r+0x31c>
 8005b6c:	4b24      	ldr	r3, [pc, #144]	; (8005c00 <_dtoa_r+0x318>)
 8005b6e:	4602      	mov	r2, r0
 8005b70:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b74:	e6d1      	b.n	800591a <_dtoa_r+0x32>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e7de      	b.n	8005b38 <_dtoa_r+0x250>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9308      	str	r3, [sp, #32]
 8005b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b80:	eb0a 0903 	add.w	r9, sl, r3
 8005b84:	f109 0301 	add.w	r3, r9, #1
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	9301      	str	r3, [sp, #4]
 8005b8c:	bfb8      	it	lt
 8005b8e:	2301      	movlt	r3, #1
 8005b90:	e7dd      	b.n	8005b4e <_dtoa_r+0x266>
 8005b92:	2301      	movs	r3, #1
 8005b94:	e7f2      	b.n	8005b7c <_dtoa_r+0x294>
 8005b96:	2501      	movs	r5, #1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9305      	str	r3, [sp, #20]
 8005b9c:	9508      	str	r5, [sp, #32]
 8005b9e:	f04f 39ff 	mov.w	r9, #4294967295
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f8cd 9004 	str.w	r9, [sp, #4]
 8005ba8:	2312      	movs	r3, #18
 8005baa:	9209      	str	r2, [sp, #36]	; 0x24
 8005bac:	e7cf      	b.n	8005b4e <_dtoa_r+0x266>
 8005bae:	2301      	movs	r3, #1
 8005bb0:	9308      	str	r3, [sp, #32]
 8005bb2:	e7f4      	b.n	8005b9e <_dtoa_r+0x2b6>
 8005bb4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8005bb8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005bbc:	464b      	mov	r3, r9
 8005bbe:	e7c6      	b.n	8005b4e <_dtoa_r+0x266>
 8005bc0:	3101      	adds	r1, #1
 8005bc2:	6041      	str	r1, [r0, #4]
 8005bc4:	0052      	lsls	r2, r2, #1
 8005bc6:	e7c6      	b.n	8005b56 <_dtoa_r+0x26e>
 8005bc8:	636f4361 	.word	0x636f4361
 8005bcc:	3fd287a7 	.word	0x3fd287a7
 8005bd0:	8b60c8b3 	.word	0x8b60c8b3
 8005bd4:	3fc68a28 	.word	0x3fc68a28
 8005bd8:	509f79fb 	.word	0x509f79fb
 8005bdc:	3fd34413 	.word	0x3fd34413
 8005be0:	08007df9 	.word	0x08007df9
 8005be4:	08007e10 	.word	0x08007e10
 8005be8:	7ff00000 	.word	0x7ff00000
 8005bec:	08007df5 	.word	0x08007df5
 8005bf0:	08007dec 	.word	0x08007dec
 8005bf4:	08007dc9 	.word	0x08007dc9
 8005bf8:	3ff80000 	.word	0x3ff80000
 8005bfc:	08007f08 	.word	0x08007f08
 8005c00:	08007e6f 	.word	0x08007e6f
 8005c04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c06:	9a00      	ldr	r2, [sp, #0]
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	9b01      	ldr	r3, [sp, #4]
 8005c0c:	2b0e      	cmp	r3, #14
 8005c0e:	f200 80ad 	bhi.w	8005d6c <_dtoa_r+0x484>
 8005c12:	2d00      	cmp	r5, #0
 8005c14:	f000 80aa 	beq.w	8005d6c <_dtoa_r+0x484>
 8005c18:	f1ba 0f00 	cmp.w	sl, #0
 8005c1c:	dd36      	ble.n	8005c8c <_dtoa_r+0x3a4>
 8005c1e:	4ac3      	ldr	r2, [pc, #780]	; (8005f2c <_dtoa_r+0x644>)
 8005c20:	f00a 030f 	and.w	r3, sl, #15
 8005c24:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c28:	ed93 7b00 	vldr	d7, [r3]
 8005c2c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005c30:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005c34:	eeb0 8a47 	vmov.f32	s16, s14
 8005c38:	eef0 8a67 	vmov.f32	s17, s15
 8005c3c:	d016      	beq.n	8005c6c <_dtoa_r+0x384>
 8005c3e:	4bbc      	ldr	r3, [pc, #752]	; (8005f30 <_dtoa_r+0x648>)
 8005c40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c48:	f7fa fe08 	bl	800085c <__aeabi_ddiv>
 8005c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c50:	f007 070f 	and.w	r7, r7, #15
 8005c54:	2503      	movs	r5, #3
 8005c56:	4eb6      	ldr	r6, [pc, #728]	; (8005f30 <_dtoa_r+0x648>)
 8005c58:	b957      	cbnz	r7, 8005c70 <_dtoa_r+0x388>
 8005c5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c5e:	ec53 2b18 	vmov	r2, r3, d8
 8005c62:	f7fa fdfb 	bl	800085c <__aeabi_ddiv>
 8005c66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c6a:	e029      	b.n	8005cc0 <_dtoa_r+0x3d8>
 8005c6c:	2502      	movs	r5, #2
 8005c6e:	e7f2      	b.n	8005c56 <_dtoa_r+0x36e>
 8005c70:	07f9      	lsls	r1, r7, #31
 8005c72:	d508      	bpl.n	8005c86 <_dtoa_r+0x39e>
 8005c74:	ec51 0b18 	vmov	r0, r1, d8
 8005c78:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c7c:	f7fa fcc4 	bl	8000608 <__aeabi_dmul>
 8005c80:	ec41 0b18 	vmov	d8, r0, r1
 8005c84:	3501      	adds	r5, #1
 8005c86:	107f      	asrs	r7, r7, #1
 8005c88:	3608      	adds	r6, #8
 8005c8a:	e7e5      	b.n	8005c58 <_dtoa_r+0x370>
 8005c8c:	f000 80a6 	beq.w	8005ddc <_dtoa_r+0x4f4>
 8005c90:	f1ca 0600 	rsb	r6, sl, #0
 8005c94:	4ba5      	ldr	r3, [pc, #660]	; (8005f2c <_dtoa_r+0x644>)
 8005c96:	4fa6      	ldr	r7, [pc, #664]	; (8005f30 <_dtoa_r+0x648>)
 8005c98:	f006 020f 	and.w	r2, r6, #15
 8005c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005ca8:	f7fa fcae 	bl	8000608 <__aeabi_dmul>
 8005cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb0:	1136      	asrs	r6, r6, #4
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2502      	movs	r5, #2
 8005cb6:	2e00      	cmp	r6, #0
 8005cb8:	f040 8085 	bne.w	8005dc6 <_dtoa_r+0x4de>
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d1d2      	bne.n	8005c66 <_dtoa_r+0x37e>
 8005cc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 808c 	beq.w	8005de0 <_dtoa_r+0x4f8>
 8005cc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005ccc:	4b99      	ldr	r3, [pc, #612]	; (8005f34 <_dtoa_r+0x64c>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	f7fa ff0a 	bl	8000aec <__aeabi_dcmplt>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	f000 8081 	beq.w	8005de0 <_dtoa_r+0x4f8>
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d07d      	beq.n	8005de0 <_dtoa_r+0x4f8>
 8005ce4:	f1b9 0f00 	cmp.w	r9, #0
 8005ce8:	dd3c      	ble.n	8005d64 <_dtoa_r+0x47c>
 8005cea:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005cee:	9307      	str	r3, [sp, #28]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	4b91      	ldr	r3, [pc, #580]	; (8005f38 <_dtoa_r+0x650>)
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	f7fa fc86 	bl	8000608 <__aeabi_dmul>
 8005cfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d00:	3501      	adds	r5, #1
 8005d02:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005d06:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7fa fc12 	bl	8000534 <__aeabi_i2d>
 8005d10:	4632      	mov	r2, r6
 8005d12:	463b      	mov	r3, r7
 8005d14:	f7fa fc78 	bl	8000608 <__aeabi_dmul>
 8005d18:	4b88      	ldr	r3, [pc, #544]	; (8005f3c <_dtoa_r+0x654>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f7fa fabe 	bl	800029c <__adddf3>
 8005d20:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005d24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d28:	9303      	str	r3, [sp, #12]
 8005d2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d15c      	bne.n	8005dea <_dtoa_r+0x502>
 8005d30:	4b83      	ldr	r3, [pc, #524]	; (8005f40 <_dtoa_r+0x658>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	4630      	mov	r0, r6
 8005d36:	4639      	mov	r1, r7
 8005d38:	f7fa faae 	bl	8000298 <__aeabi_dsub>
 8005d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d40:	4606      	mov	r6, r0
 8005d42:	460f      	mov	r7, r1
 8005d44:	f7fa fef0 	bl	8000b28 <__aeabi_dcmpgt>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	f040 8296 	bne.w	800627a <_dtoa_r+0x992>
 8005d4e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005d52:	4630      	mov	r0, r6
 8005d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d58:	4639      	mov	r1, r7
 8005d5a:	f7fa fec7 	bl	8000aec <__aeabi_dcmplt>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f040 8288 	bne.w	8006274 <_dtoa_r+0x98c>
 8005d64:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005d68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d6c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f2c0 8158 	blt.w	8006024 <_dtoa_r+0x73c>
 8005d74:	f1ba 0f0e 	cmp.w	sl, #14
 8005d78:	f300 8154 	bgt.w	8006024 <_dtoa_r+0x73c>
 8005d7c:	4b6b      	ldr	r3, [pc, #428]	; (8005f2c <_dtoa_r+0x644>)
 8005d7e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005d82:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f280 80e3 	bge.w	8005f54 <_dtoa_r+0x66c>
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f300 80df 	bgt.w	8005f54 <_dtoa_r+0x66c>
 8005d96:	f040 826d 	bne.w	8006274 <_dtoa_r+0x98c>
 8005d9a:	4b69      	ldr	r3, [pc, #420]	; (8005f40 <_dtoa_r+0x658>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	4640      	mov	r0, r8
 8005da0:	4649      	mov	r1, r9
 8005da2:	f7fa fc31 	bl	8000608 <__aeabi_dmul>
 8005da6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005daa:	f7fa feb3 	bl	8000b14 <__aeabi_dcmpge>
 8005dae:	9e01      	ldr	r6, [sp, #4]
 8005db0:	4637      	mov	r7, r6
 8005db2:	2800      	cmp	r0, #0
 8005db4:	f040 8243 	bne.w	800623e <_dtoa_r+0x956>
 8005db8:	9d00      	ldr	r5, [sp, #0]
 8005dba:	2331      	movs	r3, #49	; 0x31
 8005dbc:	f805 3b01 	strb.w	r3, [r5], #1
 8005dc0:	f10a 0a01 	add.w	sl, sl, #1
 8005dc4:	e23f      	b.n	8006246 <_dtoa_r+0x95e>
 8005dc6:	07f2      	lsls	r2, r6, #31
 8005dc8:	d505      	bpl.n	8005dd6 <_dtoa_r+0x4ee>
 8005dca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dce:	f7fa fc1b 	bl	8000608 <__aeabi_dmul>
 8005dd2:	3501      	adds	r5, #1
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	1076      	asrs	r6, r6, #1
 8005dd8:	3708      	adds	r7, #8
 8005dda:	e76c      	b.n	8005cb6 <_dtoa_r+0x3ce>
 8005ddc:	2502      	movs	r5, #2
 8005dde:	e76f      	b.n	8005cc0 <_dtoa_r+0x3d8>
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	f8cd a01c 	str.w	sl, [sp, #28]
 8005de6:	930c      	str	r3, [sp, #48]	; 0x30
 8005de8:	e78d      	b.n	8005d06 <_dtoa_r+0x41e>
 8005dea:	9900      	ldr	r1, [sp, #0]
 8005dec:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005dee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005df0:	4b4e      	ldr	r3, [pc, #312]	; (8005f2c <_dtoa_r+0x644>)
 8005df2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005df6:	4401      	add	r1, r0
 8005df8:	9102      	str	r1, [sp, #8]
 8005dfa:	9908      	ldr	r1, [sp, #32]
 8005dfc:	eeb0 8a47 	vmov.f32	s16, s14
 8005e00:	eef0 8a67 	vmov.f32	s17, s15
 8005e04:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	d045      	beq.n	8005e9c <_dtoa_r+0x5b4>
 8005e10:	494c      	ldr	r1, [pc, #304]	; (8005f44 <_dtoa_r+0x65c>)
 8005e12:	2000      	movs	r0, #0
 8005e14:	f7fa fd22 	bl	800085c <__aeabi_ddiv>
 8005e18:	ec53 2b18 	vmov	r2, r3, d8
 8005e1c:	f7fa fa3c 	bl	8000298 <__aeabi_dsub>
 8005e20:	9d00      	ldr	r5, [sp, #0]
 8005e22:	ec41 0b18 	vmov	d8, r0, r1
 8005e26:	4639      	mov	r1, r7
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f7fa fe9d 	bl	8000b68 <__aeabi_d2iz>
 8005e2e:	900c      	str	r0, [sp, #48]	; 0x30
 8005e30:	f7fa fb80 	bl	8000534 <__aeabi_i2d>
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	4630      	mov	r0, r6
 8005e3a:	4639      	mov	r1, r7
 8005e3c:	f7fa fa2c 	bl	8000298 <__aeabi_dsub>
 8005e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005e42:	3330      	adds	r3, #48	; 0x30
 8005e44:	f805 3b01 	strb.w	r3, [r5], #1
 8005e48:	ec53 2b18 	vmov	r2, r3, d8
 8005e4c:	4606      	mov	r6, r0
 8005e4e:	460f      	mov	r7, r1
 8005e50:	f7fa fe4c 	bl	8000aec <__aeabi_dcmplt>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	d165      	bne.n	8005f24 <_dtoa_r+0x63c>
 8005e58:	4632      	mov	r2, r6
 8005e5a:	463b      	mov	r3, r7
 8005e5c:	4935      	ldr	r1, [pc, #212]	; (8005f34 <_dtoa_r+0x64c>)
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f7fa fa1a 	bl	8000298 <__aeabi_dsub>
 8005e64:	ec53 2b18 	vmov	r2, r3, d8
 8005e68:	f7fa fe40 	bl	8000aec <__aeabi_dcmplt>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	f040 80b9 	bne.w	8005fe4 <_dtoa_r+0x6fc>
 8005e72:	9b02      	ldr	r3, [sp, #8]
 8005e74:	429d      	cmp	r5, r3
 8005e76:	f43f af75 	beq.w	8005d64 <_dtoa_r+0x47c>
 8005e7a:	4b2f      	ldr	r3, [pc, #188]	; (8005f38 <_dtoa_r+0x650>)
 8005e7c:	ec51 0b18 	vmov	r0, r1, d8
 8005e80:	2200      	movs	r2, #0
 8005e82:	f7fa fbc1 	bl	8000608 <__aeabi_dmul>
 8005e86:	4b2c      	ldr	r3, [pc, #176]	; (8005f38 <_dtoa_r+0x650>)
 8005e88:	ec41 0b18 	vmov	d8, r0, r1
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	4630      	mov	r0, r6
 8005e90:	4639      	mov	r1, r7
 8005e92:	f7fa fbb9 	bl	8000608 <__aeabi_dmul>
 8005e96:	4606      	mov	r6, r0
 8005e98:	460f      	mov	r7, r1
 8005e9a:	e7c4      	b.n	8005e26 <_dtoa_r+0x53e>
 8005e9c:	ec51 0b17 	vmov	r0, r1, d7
 8005ea0:	f7fa fbb2 	bl	8000608 <__aeabi_dmul>
 8005ea4:	9b02      	ldr	r3, [sp, #8]
 8005ea6:	9d00      	ldr	r5, [sp, #0]
 8005ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8005eaa:	ec41 0b18 	vmov	d8, r0, r1
 8005eae:	4639      	mov	r1, r7
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f7fa fe59 	bl	8000b68 <__aeabi_d2iz>
 8005eb6:	9011      	str	r0, [sp, #68]	; 0x44
 8005eb8:	f7fa fb3c 	bl	8000534 <__aeabi_i2d>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa f9e8 	bl	8000298 <__aeabi_dsub>
 8005ec8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eca:	3330      	adds	r3, #48	; 0x30
 8005ecc:	f805 3b01 	strb.w	r3, [r5], #1
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	429d      	cmp	r5, r3
 8005ed4:	4606      	mov	r6, r0
 8005ed6:	460f      	mov	r7, r1
 8005ed8:	f04f 0200 	mov.w	r2, #0
 8005edc:	d134      	bne.n	8005f48 <_dtoa_r+0x660>
 8005ede:	4b19      	ldr	r3, [pc, #100]	; (8005f44 <_dtoa_r+0x65c>)
 8005ee0:	ec51 0b18 	vmov	r0, r1, d8
 8005ee4:	f7fa f9da 	bl	800029c <__adddf3>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4630      	mov	r0, r6
 8005eee:	4639      	mov	r1, r7
 8005ef0:	f7fa fe1a 	bl	8000b28 <__aeabi_dcmpgt>
 8005ef4:	2800      	cmp	r0, #0
 8005ef6:	d175      	bne.n	8005fe4 <_dtoa_r+0x6fc>
 8005ef8:	ec53 2b18 	vmov	r2, r3, d8
 8005efc:	4911      	ldr	r1, [pc, #68]	; (8005f44 <_dtoa_r+0x65c>)
 8005efe:	2000      	movs	r0, #0
 8005f00:	f7fa f9ca 	bl	8000298 <__aeabi_dsub>
 8005f04:	4602      	mov	r2, r0
 8005f06:	460b      	mov	r3, r1
 8005f08:	4630      	mov	r0, r6
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	f7fa fdee 	bl	8000aec <__aeabi_dcmplt>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	f43f af27 	beq.w	8005d64 <_dtoa_r+0x47c>
 8005f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f18:	1e6b      	subs	r3, r5, #1
 8005f1a:	930c      	str	r3, [sp, #48]	; 0x30
 8005f1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005f20:	2b30      	cmp	r3, #48	; 0x30
 8005f22:	d0f8      	beq.n	8005f16 <_dtoa_r+0x62e>
 8005f24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005f28:	e04a      	b.n	8005fc0 <_dtoa_r+0x6d8>
 8005f2a:	bf00      	nop
 8005f2c:	08007f08 	.word	0x08007f08
 8005f30:	08007ee0 	.word	0x08007ee0
 8005f34:	3ff00000 	.word	0x3ff00000
 8005f38:	40240000 	.word	0x40240000
 8005f3c:	401c0000 	.word	0x401c0000
 8005f40:	40140000 	.word	0x40140000
 8005f44:	3fe00000 	.word	0x3fe00000
 8005f48:	4baf      	ldr	r3, [pc, #700]	; (8006208 <_dtoa_r+0x920>)
 8005f4a:	f7fa fb5d 	bl	8000608 <__aeabi_dmul>
 8005f4e:	4606      	mov	r6, r0
 8005f50:	460f      	mov	r7, r1
 8005f52:	e7ac      	b.n	8005eae <_dtoa_r+0x5c6>
 8005f54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005f58:	9d00      	ldr	r5, [sp, #0]
 8005f5a:	4642      	mov	r2, r8
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	4630      	mov	r0, r6
 8005f60:	4639      	mov	r1, r7
 8005f62:	f7fa fc7b 	bl	800085c <__aeabi_ddiv>
 8005f66:	f7fa fdff 	bl	8000b68 <__aeabi_d2iz>
 8005f6a:	9002      	str	r0, [sp, #8]
 8005f6c:	f7fa fae2 	bl	8000534 <__aeabi_i2d>
 8005f70:	4642      	mov	r2, r8
 8005f72:	464b      	mov	r3, r9
 8005f74:	f7fa fb48 	bl	8000608 <__aeabi_dmul>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4630      	mov	r0, r6
 8005f7e:	4639      	mov	r1, r7
 8005f80:	f7fa f98a 	bl	8000298 <__aeabi_dsub>
 8005f84:	9e02      	ldr	r6, [sp, #8]
 8005f86:	9f01      	ldr	r7, [sp, #4]
 8005f88:	3630      	adds	r6, #48	; 0x30
 8005f8a:	f805 6b01 	strb.w	r6, [r5], #1
 8005f8e:	9e00      	ldr	r6, [sp, #0]
 8005f90:	1bae      	subs	r6, r5, r6
 8005f92:	42b7      	cmp	r7, r6
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	d137      	bne.n	800600a <_dtoa_r+0x722>
 8005f9a:	f7fa f97f 	bl	800029c <__adddf3>
 8005f9e:	4642      	mov	r2, r8
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	f7fa fdbf 	bl	8000b28 <__aeabi_dcmpgt>
 8005faa:	b9c8      	cbnz	r0, 8005fe0 <_dtoa_r+0x6f8>
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	4639      	mov	r1, r7
 8005fb4:	f7fa fd90 	bl	8000ad8 <__aeabi_dcmpeq>
 8005fb8:	b110      	cbz	r0, 8005fc0 <_dtoa_r+0x6d8>
 8005fba:	9b02      	ldr	r3, [sp, #8]
 8005fbc:	07d9      	lsls	r1, r3, #31
 8005fbe:	d40f      	bmi.n	8005fe0 <_dtoa_r+0x6f8>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	4659      	mov	r1, fp
 8005fc4:	f000 fad6 	bl	8006574 <_Bfree>
 8005fc8:	2300      	movs	r3, #0
 8005fca:	702b      	strb	r3, [r5, #0]
 8005fcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005fce:	f10a 0001 	add.w	r0, sl, #1
 8005fd2:	6018      	str	r0, [r3, #0]
 8005fd4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f43f acd8 	beq.w	800598c <_dtoa_r+0xa4>
 8005fdc:	601d      	str	r5, [r3, #0]
 8005fde:	e4d5      	b.n	800598c <_dtoa_r+0xa4>
 8005fe0:	f8cd a01c 	str.w	sl, [sp, #28]
 8005fe4:	462b      	mov	r3, r5
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fec:	2a39      	cmp	r2, #57	; 0x39
 8005fee:	d108      	bne.n	8006002 <_dtoa_r+0x71a>
 8005ff0:	9a00      	ldr	r2, [sp, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d1f7      	bne.n	8005fe6 <_dtoa_r+0x6fe>
 8005ff6:	9a07      	ldr	r2, [sp, #28]
 8005ff8:	9900      	ldr	r1, [sp, #0]
 8005ffa:	3201      	adds	r2, #1
 8005ffc:	9207      	str	r2, [sp, #28]
 8005ffe:	2230      	movs	r2, #48	; 0x30
 8006000:	700a      	strb	r2, [r1, #0]
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	3201      	adds	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e78c      	b.n	8005f24 <_dtoa_r+0x63c>
 800600a:	4b7f      	ldr	r3, [pc, #508]	; (8006208 <_dtoa_r+0x920>)
 800600c:	2200      	movs	r2, #0
 800600e:	f7fa fafb 	bl	8000608 <__aeabi_dmul>
 8006012:	2200      	movs	r2, #0
 8006014:	2300      	movs	r3, #0
 8006016:	4606      	mov	r6, r0
 8006018:	460f      	mov	r7, r1
 800601a:	f7fa fd5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800601e:	2800      	cmp	r0, #0
 8006020:	d09b      	beq.n	8005f5a <_dtoa_r+0x672>
 8006022:	e7cd      	b.n	8005fc0 <_dtoa_r+0x6d8>
 8006024:	9a08      	ldr	r2, [sp, #32]
 8006026:	2a00      	cmp	r2, #0
 8006028:	f000 80c4 	beq.w	80061b4 <_dtoa_r+0x8cc>
 800602c:	9a05      	ldr	r2, [sp, #20]
 800602e:	2a01      	cmp	r2, #1
 8006030:	f300 80a8 	bgt.w	8006184 <_dtoa_r+0x89c>
 8006034:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006036:	2a00      	cmp	r2, #0
 8006038:	f000 80a0 	beq.w	800617c <_dtoa_r+0x894>
 800603c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006040:	9e06      	ldr	r6, [sp, #24]
 8006042:	4645      	mov	r5, r8
 8006044:	9a04      	ldr	r2, [sp, #16]
 8006046:	2101      	movs	r1, #1
 8006048:	441a      	add	r2, r3
 800604a:	4620      	mov	r0, r4
 800604c:	4498      	add	r8, r3
 800604e:	9204      	str	r2, [sp, #16]
 8006050:	f000 fb4c 	bl	80066ec <__i2b>
 8006054:	4607      	mov	r7, r0
 8006056:	2d00      	cmp	r5, #0
 8006058:	dd0b      	ble.n	8006072 <_dtoa_r+0x78a>
 800605a:	9b04      	ldr	r3, [sp, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	dd08      	ble.n	8006072 <_dtoa_r+0x78a>
 8006060:	42ab      	cmp	r3, r5
 8006062:	9a04      	ldr	r2, [sp, #16]
 8006064:	bfa8      	it	ge
 8006066:	462b      	movge	r3, r5
 8006068:	eba8 0803 	sub.w	r8, r8, r3
 800606c:	1aed      	subs	r5, r5, r3
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	9304      	str	r3, [sp, #16]
 8006072:	9b06      	ldr	r3, [sp, #24]
 8006074:	b1fb      	cbz	r3, 80060b6 <_dtoa_r+0x7ce>
 8006076:	9b08      	ldr	r3, [sp, #32]
 8006078:	2b00      	cmp	r3, #0
 800607a:	f000 809f 	beq.w	80061bc <_dtoa_r+0x8d4>
 800607e:	2e00      	cmp	r6, #0
 8006080:	dd11      	ble.n	80060a6 <_dtoa_r+0x7be>
 8006082:	4639      	mov	r1, r7
 8006084:	4632      	mov	r2, r6
 8006086:	4620      	mov	r0, r4
 8006088:	f000 fbec 	bl	8006864 <__pow5mult>
 800608c:	465a      	mov	r2, fp
 800608e:	4601      	mov	r1, r0
 8006090:	4607      	mov	r7, r0
 8006092:	4620      	mov	r0, r4
 8006094:	f000 fb40 	bl	8006718 <__multiply>
 8006098:	4659      	mov	r1, fp
 800609a:	9007      	str	r0, [sp, #28]
 800609c:	4620      	mov	r0, r4
 800609e:	f000 fa69 	bl	8006574 <_Bfree>
 80060a2:	9b07      	ldr	r3, [sp, #28]
 80060a4:	469b      	mov	fp, r3
 80060a6:	9b06      	ldr	r3, [sp, #24]
 80060a8:	1b9a      	subs	r2, r3, r6
 80060aa:	d004      	beq.n	80060b6 <_dtoa_r+0x7ce>
 80060ac:	4659      	mov	r1, fp
 80060ae:	4620      	mov	r0, r4
 80060b0:	f000 fbd8 	bl	8006864 <__pow5mult>
 80060b4:	4683      	mov	fp, r0
 80060b6:	2101      	movs	r1, #1
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 fb17 	bl	80066ec <__i2b>
 80060be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	4606      	mov	r6, r0
 80060c4:	dd7c      	ble.n	80061c0 <_dtoa_r+0x8d8>
 80060c6:	461a      	mov	r2, r3
 80060c8:	4601      	mov	r1, r0
 80060ca:	4620      	mov	r0, r4
 80060cc:	f000 fbca 	bl	8006864 <__pow5mult>
 80060d0:	9b05      	ldr	r3, [sp, #20]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	4606      	mov	r6, r0
 80060d6:	dd76      	ble.n	80061c6 <_dtoa_r+0x8de>
 80060d8:	2300      	movs	r3, #0
 80060da:	9306      	str	r3, [sp, #24]
 80060dc:	6933      	ldr	r3, [r6, #16]
 80060de:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060e2:	6918      	ldr	r0, [r3, #16]
 80060e4:	f000 fab2 	bl	800664c <__hi0bits>
 80060e8:	f1c0 0020 	rsb	r0, r0, #32
 80060ec:	9b04      	ldr	r3, [sp, #16]
 80060ee:	4418      	add	r0, r3
 80060f0:	f010 001f 	ands.w	r0, r0, #31
 80060f4:	f000 8086 	beq.w	8006204 <_dtoa_r+0x91c>
 80060f8:	f1c0 0320 	rsb	r3, r0, #32
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	dd7f      	ble.n	8006200 <_dtoa_r+0x918>
 8006100:	f1c0 001c 	rsb	r0, r0, #28
 8006104:	9b04      	ldr	r3, [sp, #16]
 8006106:	4403      	add	r3, r0
 8006108:	4480      	add	r8, r0
 800610a:	4405      	add	r5, r0
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	f1b8 0f00 	cmp.w	r8, #0
 8006112:	dd05      	ble.n	8006120 <_dtoa_r+0x838>
 8006114:	4659      	mov	r1, fp
 8006116:	4642      	mov	r2, r8
 8006118:	4620      	mov	r0, r4
 800611a:	f000 fbfd 	bl	8006918 <__lshift>
 800611e:	4683      	mov	fp, r0
 8006120:	9b04      	ldr	r3, [sp, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	dd05      	ble.n	8006132 <_dtoa_r+0x84a>
 8006126:	4631      	mov	r1, r6
 8006128:	461a      	mov	r2, r3
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fbf4 	bl	8006918 <__lshift>
 8006130:	4606      	mov	r6, r0
 8006132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006134:	2b00      	cmp	r3, #0
 8006136:	d069      	beq.n	800620c <_dtoa_r+0x924>
 8006138:	4631      	mov	r1, r6
 800613a:	4658      	mov	r0, fp
 800613c:	f000 fc58 	bl	80069f0 <__mcmp>
 8006140:	2800      	cmp	r0, #0
 8006142:	da63      	bge.n	800620c <_dtoa_r+0x924>
 8006144:	2300      	movs	r3, #0
 8006146:	4659      	mov	r1, fp
 8006148:	220a      	movs	r2, #10
 800614a:	4620      	mov	r0, r4
 800614c:	f000 fa34 	bl	80065b8 <__multadd>
 8006150:	9b08      	ldr	r3, [sp, #32]
 8006152:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006156:	4683      	mov	fp, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	f000 818f 	beq.w	800647c <_dtoa_r+0xb94>
 800615e:	4639      	mov	r1, r7
 8006160:	2300      	movs	r3, #0
 8006162:	220a      	movs	r2, #10
 8006164:	4620      	mov	r0, r4
 8006166:	f000 fa27 	bl	80065b8 <__multadd>
 800616a:	f1b9 0f00 	cmp.w	r9, #0
 800616e:	4607      	mov	r7, r0
 8006170:	f300 808e 	bgt.w	8006290 <_dtoa_r+0x9a8>
 8006174:	9b05      	ldr	r3, [sp, #20]
 8006176:	2b02      	cmp	r3, #2
 8006178:	dc50      	bgt.n	800621c <_dtoa_r+0x934>
 800617a:	e089      	b.n	8006290 <_dtoa_r+0x9a8>
 800617c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800617e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006182:	e75d      	b.n	8006040 <_dtoa_r+0x758>
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	1e5e      	subs	r6, r3, #1
 8006188:	9b06      	ldr	r3, [sp, #24]
 800618a:	42b3      	cmp	r3, r6
 800618c:	bfbf      	itttt	lt
 800618e:	9b06      	ldrlt	r3, [sp, #24]
 8006190:	9606      	strlt	r6, [sp, #24]
 8006192:	1af2      	sublt	r2, r6, r3
 8006194:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8006196:	bfb6      	itet	lt
 8006198:	189b      	addlt	r3, r3, r2
 800619a:	1b9e      	subge	r6, r3, r6
 800619c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800619e:	9b01      	ldr	r3, [sp, #4]
 80061a0:	bfb8      	it	lt
 80061a2:	2600      	movlt	r6, #0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	bfb5      	itete	lt
 80061a8:	eba8 0503 	sublt.w	r5, r8, r3
 80061ac:	9b01      	ldrge	r3, [sp, #4]
 80061ae:	2300      	movlt	r3, #0
 80061b0:	4645      	movge	r5, r8
 80061b2:	e747      	b.n	8006044 <_dtoa_r+0x75c>
 80061b4:	9e06      	ldr	r6, [sp, #24]
 80061b6:	9f08      	ldr	r7, [sp, #32]
 80061b8:	4645      	mov	r5, r8
 80061ba:	e74c      	b.n	8006056 <_dtoa_r+0x76e>
 80061bc:	9a06      	ldr	r2, [sp, #24]
 80061be:	e775      	b.n	80060ac <_dtoa_r+0x7c4>
 80061c0:	9b05      	ldr	r3, [sp, #20]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	dc18      	bgt.n	80061f8 <_dtoa_r+0x910>
 80061c6:	9b02      	ldr	r3, [sp, #8]
 80061c8:	b9b3      	cbnz	r3, 80061f8 <_dtoa_r+0x910>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80061d0:	b9a3      	cbnz	r3, 80061fc <_dtoa_r+0x914>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061d8:	0d1b      	lsrs	r3, r3, #20
 80061da:	051b      	lsls	r3, r3, #20
 80061dc:	b12b      	cbz	r3, 80061ea <_dtoa_r+0x902>
 80061de:	9b04      	ldr	r3, [sp, #16]
 80061e0:	3301      	adds	r3, #1
 80061e2:	9304      	str	r3, [sp, #16]
 80061e4:	f108 0801 	add.w	r8, r8, #1
 80061e8:	2301      	movs	r3, #1
 80061ea:	9306      	str	r3, [sp, #24]
 80061ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f47f af74 	bne.w	80060dc <_dtoa_r+0x7f4>
 80061f4:	2001      	movs	r0, #1
 80061f6:	e779      	b.n	80060ec <_dtoa_r+0x804>
 80061f8:	2300      	movs	r3, #0
 80061fa:	e7f6      	b.n	80061ea <_dtoa_r+0x902>
 80061fc:	9b02      	ldr	r3, [sp, #8]
 80061fe:	e7f4      	b.n	80061ea <_dtoa_r+0x902>
 8006200:	d085      	beq.n	800610e <_dtoa_r+0x826>
 8006202:	4618      	mov	r0, r3
 8006204:	301c      	adds	r0, #28
 8006206:	e77d      	b.n	8006104 <_dtoa_r+0x81c>
 8006208:	40240000 	.word	0x40240000
 800620c:	9b01      	ldr	r3, [sp, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	dc38      	bgt.n	8006284 <_dtoa_r+0x99c>
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	2b02      	cmp	r3, #2
 8006216:	dd35      	ble.n	8006284 <_dtoa_r+0x99c>
 8006218:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800621c:	f1b9 0f00 	cmp.w	r9, #0
 8006220:	d10d      	bne.n	800623e <_dtoa_r+0x956>
 8006222:	4631      	mov	r1, r6
 8006224:	464b      	mov	r3, r9
 8006226:	2205      	movs	r2, #5
 8006228:	4620      	mov	r0, r4
 800622a:	f000 f9c5 	bl	80065b8 <__multadd>
 800622e:	4601      	mov	r1, r0
 8006230:	4606      	mov	r6, r0
 8006232:	4658      	mov	r0, fp
 8006234:	f000 fbdc 	bl	80069f0 <__mcmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	f73f adbd 	bgt.w	8005db8 <_dtoa_r+0x4d0>
 800623e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006240:	9d00      	ldr	r5, [sp, #0]
 8006242:	ea6f 0a03 	mvn.w	sl, r3
 8006246:	f04f 0800 	mov.w	r8, #0
 800624a:	4631      	mov	r1, r6
 800624c:	4620      	mov	r0, r4
 800624e:	f000 f991 	bl	8006574 <_Bfree>
 8006252:	2f00      	cmp	r7, #0
 8006254:	f43f aeb4 	beq.w	8005fc0 <_dtoa_r+0x6d8>
 8006258:	f1b8 0f00 	cmp.w	r8, #0
 800625c:	d005      	beq.n	800626a <_dtoa_r+0x982>
 800625e:	45b8      	cmp	r8, r7
 8006260:	d003      	beq.n	800626a <_dtoa_r+0x982>
 8006262:	4641      	mov	r1, r8
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f985 	bl	8006574 <_Bfree>
 800626a:	4639      	mov	r1, r7
 800626c:	4620      	mov	r0, r4
 800626e:	f000 f981 	bl	8006574 <_Bfree>
 8006272:	e6a5      	b.n	8005fc0 <_dtoa_r+0x6d8>
 8006274:	2600      	movs	r6, #0
 8006276:	4637      	mov	r7, r6
 8006278:	e7e1      	b.n	800623e <_dtoa_r+0x956>
 800627a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800627c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8006280:	4637      	mov	r7, r6
 8006282:	e599      	b.n	8005db8 <_dtoa_r+0x4d0>
 8006284:	9b08      	ldr	r3, [sp, #32]
 8006286:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f000 80fd 	beq.w	800648a <_dtoa_r+0xba2>
 8006290:	2d00      	cmp	r5, #0
 8006292:	dd05      	ble.n	80062a0 <_dtoa_r+0x9b8>
 8006294:	4639      	mov	r1, r7
 8006296:	462a      	mov	r2, r5
 8006298:	4620      	mov	r0, r4
 800629a:	f000 fb3d 	bl	8006918 <__lshift>
 800629e:	4607      	mov	r7, r0
 80062a0:	9b06      	ldr	r3, [sp, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d05c      	beq.n	8006360 <_dtoa_r+0xa78>
 80062a6:	6879      	ldr	r1, [r7, #4]
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 f923 	bl	80064f4 <_Balloc>
 80062ae:	4605      	mov	r5, r0
 80062b0:	b928      	cbnz	r0, 80062be <_dtoa_r+0x9d6>
 80062b2:	4b80      	ldr	r3, [pc, #512]	; (80064b4 <_dtoa_r+0xbcc>)
 80062b4:	4602      	mov	r2, r0
 80062b6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80062ba:	f7ff bb2e 	b.w	800591a <_dtoa_r+0x32>
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	3202      	adds	r2, #2
 80062c2:	0092      	lsls	r2, r2, #2
 80062c4:	f107 010c 	add.w	r1, r7, #12
 80062c8:	300c      	adds	r0, #12
 80062ca:	f000 f905 	bl	80064d8 <memcpy>
 80062ce:	2201      	movs	r2, #1
 80062d0:	4629      	mov	r1, r5
 80062d2:	4620      	mov	r0, r4
 80062d4:	f000 fb20 	bl	8006918 <__lshift>
 80062d8:	9b00      	ldr	r3, [sp, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	9301      	str	r3, [sp, #4]
 80062de:	9b00      	ldr	r3, [sp, #0]
 80062e0:	444b      	add	r3, r9
 80062e2:	9307      	str	r3, [sp, #28]
 80062e4:	9b02      	ldr	r3, [sp, #8]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	46b8      	mov	r8, r7
 80062ec:	9306      	str	r3, [sp, #24]
 80062ee:	4607      	mov	r7, r0
 80062f0:	9b01      	ldr	r3, [sp, #4]
 80062f2:	4631      	mov	r1, r6
 80062f4:	3b01      	subs	r3, #1
 80062f6:	4658      	mov	r0, fp
 80062f8:	9302      	str	r3, [sp, #8]
 80062fa:	f7ff fa69 	bl	80057d0 <quorem>
 80062fe:	4603      	mov	r3, r0
 8006300:	3330      	adds	r3, #48	; 0x30
 8006302:	9004      	str	r0, [sp, #16]
 8006304:	4641      	mov	r1, r8
 8006306:	4658      	mov	r0, fp
 8006308:	9308      	str	r3, [sp, #32]
 800630a:	f000 fb71 	bl	80069f0 <__mcmp>
 800630e:	463a      	mov	r2, r7
 8006310:	4681      	mov	r9, r0
 8006312:	4631      	mov	r1, r6
 8006314:	4620      	mov	r0, r4
 8006316:	f000 fb87 	bl	8006a28 <__mdiff>
 800631a:	68c2      	ldr	r2, [r0, #12]
 800631c:	9b08      	ldr	r3, [sp, #32]
 800631e:	4605      	mov	r5, r0
 8006320:	bb02      	cbnz	r2, 8006364 <_dtoa_r+0xa7c>
 8006322:	4601      	mov	r1, r0
 8006324:	4658      	mov	r0, fp
 8006326:	f000 fb63 	bl	80069f0 <__mcmp>
 800632a:	9b08      	ldr	r3, [sp, #32]
 800632c:	4602      	mov	r2, r0
 800632e:	4629      	mov	r1, r5
 8006330:	4620      	mov	r0, r4
 8006332:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8006336:	f000 f91d 	bl	8006574 <_Bfree>
 800633a:	9b05      	ldr	r3, [sp, #20]
 800633c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800633e:	9d01      	ldr	r5, [sp, #4]
 8006340:	ea43 0102 	orr.w	r1, r3, r2
 8006344:	9b06      	ldr	r3, [sp, #24]
 8006346:	430b      	orrs	r3, r1
 8006348:	9b08      	ldr	r3, [sp, #32]
 800634a:	d10d      	bne.n	8006368 <_dtoa_r+0xa80>
 800634c:	2b39      	cmp	r3, #57	; 0x39
 800634e:	d029      	beq.n	80063a4 <_dtoa_r+0xabc>
 8006350:	f1b9 0f00 	cmp.w	r9, #0
 8006354:	dd01      	ble.n	800635a <_dtoa_r+0xa72>
 8006356:	9b04      	ldr	r3, [sp, #16]
 8006358:	3331      	adds	r3, #49	; 0x31
 800635a:	9a02      	ldr	r2, [sp, #8]
 800635c:	7013      	strb	r3, [r2, #0]
 800635e:	e774      	b.n	800624a <_dtoa_r+0x962>
 8006360:	4638      	mov	r0, r7
 8006362:	e7b9      	b.n	80062d8 <_dtoa_r+0x9f0>
 8006364:	2201      	movs	r2, #1
 8006366:	e7e2      	b.n	800632e <_dtoa_r+0xa46>
 8006368:	f1b9 0f00 	cmp.w	r9, #0
 800636c:	db06      	blt.n	800637c <_dtoa_r+0xa94>
 800636e:	9905      	ldr	r1, [sp, #20]
 8006370:	ea41 0909 	orr.w	r9, r1, r9
 8006374:	9906      	ldr	r1, [sp, #24]
 8006376:	ea59 0101 	orrs.w	r1, r9, r1
 800637a:	d120      	bne.n	80063be <_dtoa_r+0xad6>
 800637c:	2a00      	cmp	r2, #0
 800637e:	ddec      	ble.n	800635a <_dtoa_r+0xa72>
 8006380:	4659      	mov	r1, fp
 8006382:	2201      	movs	r2, #1
 8006384:	4620      	mov	r0, r4
 8006386:	9301      	str	r3, [sp, #4]
 8006388:	f000 fac6 	bl	8006918 <__lshift>
 800638c:	4631      	mov	r1, r6
 800638e:	4683      	mov	fp, r0
 8006390:	f000 fb2e 	bl	80069f0 <__mcmp>
 8006394:	2800      	cmp	r0, #0
 8006396:	9b01      	ldr	r3, [sp, #4]
 8006398:	dc02      	bgt.n	80063a0 <_dtoa_r+0xab8>
 800639a:	d1de      	bne.n	800635a <_dtoa_r+0xa72>
 800639c:	07da      	lsls	r2, r3, #31
 800639e:	d5dc      	bpl.n	800635a <_dtoa_r+0xa72>
 80063a0:	2b39      	cmp	r3, #57	; 0x39
 80063a2:	d1d8      	bne.n	8006356 <_dtoa_r+0xa6e>
 80063a4:	9a02      	ldr	r2, [sp, #8]
 80063a6:	2339      	movs	r3, #57	; 0x39
 80063a8:	7013      	strb	r3, [r2, #0]
 80063aa:	462b      	mov	r3, r5
 80063ac:	461d      	mov	r5, r3
 80063ae:	3b01      	subs	r3, #1
 80063b0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80063b4:	2a39      	cmp	r2, #57	; 0x39
 80063b6:	d050      	beq.n	800645a <_dtoa_r+0xb72>
 80063b8:	3201      	adds	r2, #1
 80063ba:	701a      	strb	r2, [r3, #0]
 80063bc:	e745      	b.n	800624a <_dtoa_r+0x962>
 80063be:	2a00      	cmp	r2, #0
 80063c0:	dd03      	ble.n	80063ca <_dtoa_r+0xae2>
 80063c2:	2b39      	cmp	r3, #57	; 0x39
 80063c4:	d0ee      	beq.n	80063a4 <_dtoa_r+0xabc>
 80063c6:	3301      	adds	r3, #1
 80063c8:	e7c7      	b.n	800635a <_dtoa_r+0xa72>
 80063ca:	9a01      	ldr	r2, [sp, #4]
 80063cc:	9907      	ldr	r1, [sp, #28]
 80063ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 80063d2:	428a      	cmp	r2, r1
 80063d4:	d02a      	beq.n	800642c <_dtoa_r+0xb44>
 80063d6:	4659      	mov	r1, fp
 80063d8:	2300      	movs	r3, #0
 80063da:	220a      	movs	r2, #10
 80063dc:	4620      	mov	r0, r4
 80063de:	f000 f8eb 	bl	80065b8 <__multadd>
 80063e2:	45b8      	cmp	r8, r7
 80063e4:	4683      	mov	fp, r0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	f04f 020a 	mov.w	r2, #10
 80063ee:	4641      	mov	r1, r8
 80063f0:	4620      	mov	r0, r4
 80063f2:	d107      	bne.n	8006404 <_dtoa_r+0xb1c>
 80063f4:	f000 f8e0 	bl	80065b8 <__multadd>
 80063f8:	4680      	mov	r8, r0
 80063fa:	4607      	mov	r7, r0
 80063fc:	9b01      	ldr	r3, [sp, #4]
 80063fe:	3301      	adds	r3, #1
 8006400:	9301      	str	r3, [sp, #4]
 8006402:	e775      	b.n	80062f0 <_dtoa_r+0xa08>
 8006404:	f000 f8d8 	bl	80065b8 <__multadd>
 8006408:	4639      	mov	r1, r7
 800640a:	4680      	mov	r8, r0
 800640c:	2300      	movs	r3, #0
 800640e:	220a      	movs	r2, #10
 8006410:	4620      	mov	r0, r4
 8006412:	f000 f8d1 	bl	80065b8 <__multadd>
 8006416:	4607      	mov	r7, r0
 8006418:	e7f0      	b.n	80063fc <_dtoa_r+0xb14>
 800641a:	f1b9 0f00 	cmp.w	r9, #0
 800641e:	9a00      	ldr	r2, [sp, #0]
 8006420:	bfcc      	ite	gt
 8006422:	464d      	movgt	r5, r9
 8006424:	2501      	movle	r5, #1
 8006426:	4415      	add	r5, r2
 8006428:	f04f 0800 	mov.w	r8, #0
 800642c:	4659      	mov	r1, fp
 800642e:	2201      	movs	r2, #1
 8006430:	4620      	mov	r0, r4
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	f000 fa70 	bl	8006918 <__lshift>
 8006438:	4631      	mov	r1, r6
 800643a:	4683      	mov	fp, r0
 800643c:	f000 fad8 	bl	80069f0 <__mcmp>
 8006440:	2800      	cmp	r0, #0
 8006442:	dcb2      	bgt.n	80063aa <_dtoa_r+0xac2>
 8006444:	d102      	bne.n	800644c <_dtoa_r+0xb64>
 8006446:	9b01      	ldr	r3, [sp, #4]
 8006448:	07db      	lsls	r3, r3, #31
 800644a:	d4ae      	bmi.n	80063aa <_dtoa_r+0xac2>
 800644c:	462b      	mov	r3, r5
 800644e:	461d      	mov	r5, r3
 8006450:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006454:	2a30      	cmp	r2, #48	; 0x30
 8006456:	d0fa      	beq.n	800644e <_dtoa_r+0xb66>
 8006458:	e6f7      	b.n	800624a <_dtoa_r+0x962>
 800645a:	9a00      	ldr	r2, [sp, #0]
 800645c:	429a      	cmp	r2, r3
 800645e:	d1a5      	bne.n	80063ac <_dtoa_r+0xac4>
 8006460:	f10a 0a01 	add.w	sl, sl, #1
 8006464:	2331      	movs	r3, #49	; 0x31
 8006466:	e779      	b.n	800635c <_dtoa_r+0xa74>
 8006468:	4b13      	ldr	r3, [pc, #76]	; (80064b8 <_dtoa_r+0xbd0>)
 800646a:	f7ff baaf 	b.w	80059cc <_dtoa_r+0xe4>
 800646e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006470:	2b00      	cmp	r3, #0
 8006472:	f47f aa86 	bne.w	8005982 <_dtoa_r+0x9a>
 8006476:	4b11      	ldr	r3, [pc, #68]	; (80064bc <_dtoa_r+0xbd4>)
 8006478:	f7ff baa8 	b.w	80059cc <_dtoa_r+0xe4>
 800647c:	f1b9 0f00 	cmp.w	r9, #0
 8006480:	dc03      	bgt.n	800648a <_dtoa_r+0xba2>
 8006482:	9b05      	ldr	r3, [sp, #20]
 8006484:	2b02      	cmp	r3, #2
 8006486:	f73f aec9 	bgt.w	800621c <_dtoa_r+0x934>
 800648a:	9d00      	ldr	r5, [sp, #0]
 800648c:	4631      	mov	r1, r6
 800648e:	4658      	mov	r0, fp
 8006490:	f7ff f99e 	bl	80057d0 <quorem>
 8006494:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006498:	f805 3b01 	strb.w	r3, [r5], #1
 800649c:	9a00      	ldr	r2, [sp, #0]
 800649e:	1aaa      	subs	r2, r5, r2
 80064a0:	4591      	cmp	r9, r2
 80064a2:	ddba      	ble.n	800641a <_dtoa_r+0xb32>
 80064a4:	4659      	mov	r1, fp
 80064a6:	2300      	movs	r3, #0
 80064a8:	220a      	movs	r2, #10
 80064aa:	4620      	mov	r0, r4
 80064ac:	f000 f884 	bl	80065b8 <__multadd>
 80064b0:	4683      	mov	fp, r0
 80064b2:	e7eb      	b.n	800648c <_dtoa_r+0xba4>
 80064b4:	08007e6f 	.word	0x08007e6f
 80064b8:	08007dc8 	.word	0x08007dc8
 80064bc:	08007dec 	.word	0x08007dec

080064c0 <_localeconv_r>:
 80064c0:	4800      	ldr	r0, [pc, #0]	; (80064c4 <_localeconv_r+0x4>)
 80064c2:	4770      	bx	lr
 80064c4:	20000160 	.word	0x20000160

080064c8 <malloc>:
 80064c8:	4b02      	ldr	r3, [pc, #8]	; (80064d4 <malloc+0xc>)
 80064ca:	4601      	mov	r1, r0
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	f000 bbef 	b.w	8006cb0 <_malloc_r>
 80064d2:	bf00      	nop
 80064d4:	2000000c 	.word	0x2000000c

080064d8 <memcpy>:
 80064d8:	440a      	add	r2, r1
 80064da:	4291      	cmp	r1, r2
 80064dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80064e0:	d100      	bne.n	80064e4 <memcpy+0xc>
 80064e2:	4770      	bx	lr
 80064e4:	b510      	push	{r4, lr}
 80064e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064ee:	4291      	cmp	r1, r2
 80064f0:	d1f9      	bne.n	80064e6 <memcpy+0xe>
 80064f2:	bd10      	pop	{r4, pc}

080064f4 <_Balloc>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064f8:	4604      	mov	r4, r0
 80064fa:	460d      	mov	r5, r1
 80064fc:	b976      	cbnz	r6, 800651c <_Balloc+0x28>
 80064fe:	2010      	movs	r0, #16
 8006500:	f7ff ffe2 	bl	80064c8 <malloc>
 8006504:	4602      	mov	r2, r0
 8006506:	6260      	str	r0, [r4, #36]	; 0x24
 8006508:	b920      	cbnz	r0, 8006514 <_Balloc+0x20>
 800650a:	4b18      	ldr	r3, [pc, #96]	; (800656c <_Balloc+0x78>)
 800650c:	4818      	ldr	r0, [pc, #96]	; (8006570 <_Balloc+0x7c>)
 800650e:	2166      	movs	r1, #102	; 0x66
 8006510:	f000 fd94 	bl	800703c <__assert_func>
 8006514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006518:	6006      	str	r6, [r0, #0]
 800651a:	60c6      	str	r6, [r0, #12]
 800651c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800651e:	68f3      	ldr	r3, [r6, #12]
 8006520:	b183      	cbz	r3, 8006544 <_Balloc+0x50>
 8006522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800652a:	b9b8      	cbnz	r0, 800655c <_Balloc+0x68>
 800652c:	2101      	movs	r1, #1
 800652e:	fa01 f605 	lsl.w	r6, r1, r5
 8006532:	1d72      	adds	r2, r6, #5
 8006534:	0092      	lsls	r2, r2, #2
 8006536:	4620      	mov	r0, r4
 8006538:	f000 fb5a 	bl	8006bf0 <_calloc_r>
 800653c:	b160      	cbz	r0, 8006558 <_Balloc+0x64>
 800653e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006542:	e00e      	b.n	8006562 <_Balloc+0x6e>
 8006544:	2221      	movs	r2, #33	; 0x21
 8006546:	2104      	movs	r1, #4
 8006548:	4620      	mov	r0, r4
 800654a:	f000 fb51 	bl	8006bf0 <_calloc_r>
 800654e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006550:	60f0      	str	r0, [r6, #12]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e4      	bne.n	8006522 <_Balloc+0x2e>
 8006558:	2000      	movs	r0, #0
 800655a:	bd70      	pop	{r4, r5, r6, pc}
 800655c:	6802      	ldr	r2, [r0, #0]
 800655e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006562:	2300      	movs	r3, #0
 8006564:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006568:	e7f7      	b.n	800655a <_Balloc+0x66>
 800656a:	bf00      	nop
 800656c:	08007df9 	.word	0x08007df9
 8006570:	08007e80 	.word	0x08007e80

08006574 <_Bfree>:
 8006574:	b570      	push	{r4, r5, r6, lr}
 8006576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006578:	4605      	mov	r5, r0
 800657a:	460c      	mov	r4, r1
 800657c:	b976      	cbnz	r6, 800659c <_Bfree+0x28>
 800657e:	2010      	movs	r0, #16
 8006580:	f7ff ffa2 	bl	80064c8 <malloc>
 8006584:	4602      	mov	r2, r0
 8006586:	6268      	str	r0, [r5, #36]	; 0x24
 8006588:	b920      	cbnz	r0, 8006594 <_Bfree+0x20>
 800658a:	4b09      	ldr	r3, [pc, #36]	; (80065b0 <_Bfree+0x3c>)
 800658c:	4809      	ldr	r0, [pc, #36]	; (80065b4 <_Bfree+0x40>)
 800658e:	218a      	movs	r1, #138	; 0x8a
 8006590:	f000 fd54 	bl	800703c <__assert_func>
 8006594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006598:	6006      	str	r6, [r0, #0]
 800659a:	60c6      	str	r6, [r0, #12]
 800659c:	b13c      	cbz	r4, 80065ae <_Bfree+0x3a>
 800659e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80065a0:	6862      	ldr	r2, [r4, #4]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80065a8:	6021      	str	r1, [r4, #0]
 80065aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	08007df9 	.word	0x08007df9
 80065b4:	08007e80 	.word	0x08007e80

080065b8 <__multadd>:
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	690e      	ldr	r6, [r1, #16]
 80065be:	4607      	mov	r7, r0
 80065c0:	4698      	mov	r8, r3
 80065c2:	460c      	mov	r4, r1
 80065c4:	f101 0014 	add.w	r0, r1, #20
 80065c8:	2300      	movs	r3, #0
 80065ca:	6805      	ldr	r5, [r0, #0]
 80065cc:	b2a9      	uxth	r1, r5
 80065ce:	fb02 8101 	mla	r1, r2, r1, r8
 80065d2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80065d6:	0c2d      	lsrs	r5, r5, #16
 80065d8:	fb02 c505 	mla	r5, r2, r5, ip
 80065dc:	b289      	uxth	r1, r1
 80065de:	3301      	adds	r3, #1
 80065e0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80065e4:	429e      	cmp	r6, r3
 80065e6:	f840 1b04 	str.w	r1, [r0], #4
 80065ea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80065ee:	dcec      	bgt.n	80065ca <__multadd+0x12>
 80065f0:	f1b8 0f00 	cmp.w	r8, #0
 80065f4:	d022      	beq.n	800663c <__multadd+0x84>
 80065f6:	68a3      	ldr	r3, [r4, #8]
 80065f8:	42b3      	cmp	r3, r6
 80065fa:	dc19      	bgt.n	8006630 <__multadd+0x78>
 80065fc:	6861      	ldr	r1, [r4, #4]
 80065fe:	4638      	mov	r0, r7
 8006600:	3101      	adds	r1, #1
 8006602:	f7ff ff77 	bl	80064f4 <_Balloc>
 8006606:	4605      	mov	r5, r0
 8006608:	b928      	cbnz	r0, 8006616 <__multadd+0x5e>
 800660a:	4602      	mov	r2, r0
 800660c:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <__multadd+0x8c>)
 800660e:	480e      	ldr	r0, [pc, #56]	; (8006648 <__multadd+0x90>)
 8006610:	21b5      	movs	r1, #181	; 0xb5
 8006612:	f000 fd13 	bl	800703c <__assert_func>
 8006616:	6922      	ldr	r2, [r4, #16]
 8006618:	3202      	adds	r2, #2
 800661a:	f104 010c 	add.w	r1, r4, #12
 800661e:	0092      	lsls	r2, r2, #2
 8006620:	300c      	adds	r0, #12
 8006622:	f7ff ff59 	bl	80064d8 <memcpy>
 8006626:	4621      	mov	r1, r4
 8006628:	4638      	mov	r0, r7
 800662a:	f7ff ffa3 	bl	8006574 <_Bfree>
 800662e:	462c      	mov	r4, r5
 8006630:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006634:	3601      	adds	r6, #1
 8006636:	f8c3 8014 	str.w	r8, [r3, #20]
 800663a:	6126      	str	r6, [r4, #16]
 800663c:	4620      	mov	r0, r4
 800663e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006642:	bf00      	nop
 8006644:	08007e6f 	.word	0x08007e6f
 8006648:	08007e80 	.word	0x08007e80

0800664c <__hi0bits>:
 800664c:	0c03      	lsrs	r3, r0, #16
 800664e:	041b      	lsls	r3, r3, #16
 8006650:	b9d3      	cbnz	r3, 8006688 <__hi0bits+0x3c>
 8006652:	0400      	lsls	r0, r0, #16
 8006654:	2310      	movs	r3, #16
 8006656:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800665a:	bf04      	itt	eq
 800665c:	0200      	lsleq	r0, r0, #8
 800665e:	3308      	addeq	r3, #8
 8006660:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006664:	bf04      	itt	eq
 8006666:	0100      	lsleq	r0, r0, #4
 8006668:	3304      	addeq	r3, #4
 800666a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800666e:	bf04      	itt	eq
 8006670:	0080      	lsleq	r0, r0, #2
 8006672:	3302      	addeq	r3, #2
 8006674:	2800      	cmp	r0, #0
 8006676:	db05      	blt.n	8006684 <__hi0bits+0x38>
 8006678:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800667c:	f103 0301 	add.w	r3, r3, #1
 8006680:	bf08      	it	eq
 8006682:	2320      	moveq	r3, #32
 8006684:	4618      	mov	r0, r3
 8006686:	4770      	bx	lr
 8006688:	2300      	movs	r3, #0
 800668a:	e7e4      	b.n	8006656 <__hi0bits+0xa>

0800668c <__lo0bits>:
 800668c:	6803      	ldr	r3, [r0, #0]
 800668e:	f013 0207 	ands.w	r2, r3, #7
 8006692:	4601      	mov	r1, r0
 8006694:	d00b      	beq.n	80066ae <__lo0bits+0x22>
 8006696:	07da      	lsls	r2, r3, #31
 8006698:	d424      	bmi.n	80066e4 <__lo0bits+0x58>
 800669a:	0798      	lsls	r0, r3, #30
 800669c:	bf49      	itett	mi
 800669e:	085b      	lsrmi	r3, r3, #1
 80066a0:	089b      	lsrpl	r3, r3, #2
 80066a2:	2001      	movmi	r0, #1
 80066a4:	600b      	strmi	r3, [r1, #0]
 80066a6:	bf5c      	itt	pl
 80066a8:	600b      	strpl	r3, [r1, #0]
 80066aa:	2002      	movpl	r0, #2
 80066ac:	4770      	bx	lr
 80066ae:	b298      	uxth	r0, r3
 80066b0:	b9b0      	cbnz	r0, 80066e0 <__lo0bits+0x54>
 80066b2:	0c1b      	lsrs	r3, r3, #16
 80066b4:	2010      	movs	r0, #16
 80066b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80066ba:	bf04      	itt	eq
 80066bc:	0a1b      	lsreq	r3, r3, #8
 80066be:	3008      	addeq	r0, #8
 80066c0:	071a      	lsls	r2, r3, #28
 80066c2:	bf04      	itt	eq
 80066c4:	091b      	lsreq	r3, r3, #4
 80066c6:	3004      	addeq	r0, #4
 80066c8:	079a      	lsls	r2, r3, #30
 80066ca:	bf04      	itt	eq
 80066cc:	089b      	lsreq	r3, r3, #2
 80066ce:	3002      	addeq	r0, #2
 80066d0:	07da      	lsls	r2, r3, #31
 80066d2:	d403      	bmi.n	80066dc <__lo0bits+0x50>
 80066d4:	085b      	lsrs	r3, r3, #1
 80066d6:	f100 0001 	add.w	r0, r0, #1
 80066da:	d005      	beq.n	80066e8 <__lo0bits+0x5c>
 80066dc:	600b      	str	r3, [r1, #0]
 80066de:	4770      	bx	lr
 80066e0:	4610      	mov	r0, r2
 80066e2:	e7e8      	b.n	80066b6 <__lo0bits+0x2a>
 80066e4:	2000      	movs	r0, #0
 80066e6:	4770      	bx	lr
 80066e8:	2020      	movs	r0, #32
 80066ea:	4770      	bx	lr

080066ec <__i2b>:
 80066ec:	b510      	push	{r4, lr}
 80066ee:	460c      	mov	r4, r1
 80066f0:	2101      	movs	r1, #1
 80066f2:	f7ff feff 	bl	80064f4 <_Balloc>
 80066f6:	4602      	mov	r2, r0
 80066f8:	b928      	cbnz	r0, 8006706 <__i2b+0x1a>
 80066fa:	4b05      	ldr	r3, [pc, #20]	; (8006710 <__i2b+0x24>)
 80066fc:	4805      	ldr	r0, [pc, #20]	; (8006714 <__i2b+0x28>)
 80066fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006702:	f000 fc9b 	bl	800703c <__assert_func>
 8006706:	2301      	movs	r3, #1
 8006708:	6144      	str	r4, [r0, #20]
 800670a:	6103      	str	r3, [r0, #16]
 800670c:	bd10      	pop	{r4, pc}
 800670e:	bf00      	nop
 8006710:	08007e6f 	.word	0x08007e6f
 8006714:	08007e80 	.word	0x08007e80

08006718 <__multiply>:
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	4614      	mov	r4, r2
 800671e:	690a      	ldr	r2, [r1, #16]
 8006720:	6923      	ldr	r3, [r4, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	bfb8      	it	lt
 8006726:	460b      	movlt	r3, r1
 8006728:	460d      	mov	r5, r1
 800672a:	bfbc      	itt	lt
 800672c:	4625      	movlt	r5, r4
 800672e:	461c      	movlt	r4, r3
 8006730:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006734:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006738:	68ab      	ldr	r3, [r5, #8]
 800673a:	6869      	ldr	r1, [r5, #4]
 800673c:	eb0a 0709 	add.w	r7, sl, r9
 8006740:	42bb      	cmp	r3, r7
 8006742:	b085      	sub	sp, #20
 8006744:	bfb8      	it	lt
 8006746:	3101      	addlt	r1, #1
 8006748:	f7ff fed4 	bl	80064f4 <_Balloc>
 800674c:	b930      	cbnz	r0, 800675c <__multiply+0x44>
 800674e:	4602      	mov	r2, r0
 8006750:	4b42      	ldr	r3, [pc, #264]	; (800685c <__multiply+0x144>)
 8006752:	4843      	ldr	r0, [pc, #268]	; (8006860 <__multiply+0x148>)
 8006754:	f240 115d 	movw	r1, #349	; 0x15d
 8006758:	f000 fc70 	bl	800703c <__assert_func>
 800675c:	f100 0614 	add.w	r6, r0, #20
 8006760:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006764:	4633      	mov	r3, r6
 8006766:	2200      	movs	r2, #0
 8006768:	4543      	cmp	r3, r8
 800676a:	d31e      	bcc.n	80067aa <__multiply+0x92>
 800676c:	f105 0c14 	add.w	ip, r5, #20
 8006770:	f104 0314 	add.w	r3, r4, #20
 8006774:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006778:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800677c:	9202      	str	r2, [sp, #8]
 800677e:	ebac 0205 	sub.w	r2, ip, r5
 8006782:	3a15      	subs	r2, #21
 8006784:	f022 0203 	bic.w	r2, r2, #3
 8006788:	3204      	adds	r2, #4
 800678a:	f105 0115 	add.w	r1, r5, #21
 800678e:	458c      	cmp	ip, r1
 8006790:	bf38      	it	cc
 8006792:	2204      	movcc	r2, #4
 8006794:	9201      	str	r2, [sp, #4]
 8006796:	9a02      	ldr	r2, [sp, #8]
 8006798:	9303      	str	r3, [sp, #12]
 800679a:	429a      	cmp	r2, r3
 800679c:	d808      	bhi.n	80067b0 <__multiply+0x98>
 800679e:	2f00      	cmp	r7, #0
 80067a0:	dc55      	bgt.n	800684e <__multiply+0x136>
 80067a2:	6107      	str	r7, [r0, #16]
 80067a4:	b005      	add	sp, #20
 80067a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067aa:	f843 2b04 	str.w	r2, [r3], #4
 80067ae:	e7db      	b.n	8006768 <__multiply+0x50>
 80067b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80067b4:	f1ba 0f00 	cmp.w	sl, #0
 80067b8:	d020      	beq.n	80067fc <__multiply+0xe4>
 80067ba:	f105 0e14 	add.w	lr, r5, #20
 80067be:	46b1      	mov	r9, r6
 80067c0:	2200      	movs	r2, #0
 80067c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80067c6:	f8d9 b000 	ldr.w	fp, [r9]
 80067ca:	b2a1      	uxth	r1, r4
 80067cc:	fa1f fb8b 	uxth.w	fp, fp
 80067d0:	fb0a b101 	mla	r1, sl, r1, fp
 80067d4:	4411      	add	r1, r2
 80067d6:	f8d9 2000 	ldr.w	r2, [r9]
 80067da:	0c24      	lsrs	r4, r4, #16
 80067dc:	0c12      	lsrs	r2, r2, #16
 80067de:	fb0a 2404 	mla	r4, sl, r4, r2
 80067e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80067e6:	b289      	uxth	r1, r1
 80067e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80067ec:	45f4      	cmp	ip, lr
 80067ee:	f849 1b04 	str.w	r1, [r9], #4
 80067f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80067f6:	d8e4      	bhi.n	80067c2 <__multiply+0xaa>
 80067f8:	9901      	ldr	r1, [sp, #4]
 80067fa:	5072      	str	r2, [r6, r1]
 80067fc:	9a03      	ldr	r2, [sp, #12]
 80067fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006802:	3304      	adds	r3, #4
 8006804:	f1b9 0f00 	cmp.w	r9, #0
 8006808:	d01f      	beq.n	800684a <__multiply+0x132>
 800680a:	6834      	ldr	r4, [r6, #0]
 800680c:	f105 0114 	add.w	r1, r5, #20
 8006810:	46b6      	mov	lr, r6
 8006812:	f04f 0a00 	mov.w	sl, #0
 8006816:	880a      	ldrh	r2, [r1, #0]
 8006818:	f8be b002 	ldrh.w	fp, [lr, #2]
 800681c:	fb09 b202 	mla	r2, r9, r2, fp
 8006820:	4492      	add	sl, r2
 8006822:	b2a4      	uxth	r4, r4
 8006824:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006828:	f84e 4b04 	str.w	r4, [lr], #4
 800682c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006830:	f8be 2000 	ldrh.w	r2, [lr]
 8006834:	0c24      	lsrs	r4, r4, #16
 8006836:	fb09 2404 	mla	r4, r9, r4, r2
 800683a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800683e:	458c      	cmp	ip, r1
 8006840:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006844:	d8e7      	bhi.n	8006816 <__multiply+0xfe>
 8006846:	9a01      	ldr	r2, [sp, #4]
 8006848:	50b4      	str	r4, [r6, r2]
 800684a:	3604      	adds	r6, #4
 800684c:	e7a3      	b.n	8006796 <__multiply+0x7e>
 800684e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1a5      	bne.n	80067a2 <__multiply+0x8a>
 8006856:	3f01      	subs	r7, #1
 8006858:	e7a1      	b.n	800679e <__multiply+0x86>
 800685a:	bf00      	nop
 800685c:	08007e6f 	.word	0x08007e6f
 8006860:	08007e80 	.word	0x08007e80

08006864 <__pow5mult>:
 8006864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006868:	4615      	mov	r5, r2
 800686a:	f012 0203 	ands.w	r2, r2, #3
 800686e:	4606      	mov	r6, r0
 8006870:	460f      	mov	r7, r1
 8006872:	d007      	beq.n	8006884 <__pow5mult+0x20>
 8006874:	4c25      	ldr	r4, [pc, #148]	; (800690c <__pow5mult+0xa8>)
 8006876:	3a01      	subs	r2, #1
 8006878:	2300      	movs	r3, #0
 800687a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800687e:	f7ff fe9b 	bl	80065b8 <__multadd>
 8006882:	4607      	mov	r7, r0
 8006884:	10ad      	asrs	r5, r5, #2
 8006886:	d03d      	beq.n	8006904 <__pow5mult+0xa0>
 8006888:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800688a:	b97c      	cbnz	r4, 80068ac <__pow5mult+0x48>
 800688c:	2010      	movs	r0, #16
 800688e:	f7ff fe1b 	bl	80064c8 <malloc>
 8006892:	4602      	mov	r2, r0
 8006894:	6270      	str	r0, [r6, #36]	; 0x24
 8006896:	b928      	cbnz	r0, 80068a4 <__pow5mult+0x40>
 8006898:	4b1d      	ldr	r3, [pc, #116]	; (8006910 <__pow5mult+0xac>)
 800689a:	481e      	ldr	r0, [pc, #120]	; (8006914 <__pow5mult+0xb0>)
 800689c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80068a0:	f000 fbcc 	bl	800703c <__assert_func>
 80068a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80068a8:	6004      	str	r4, [r0, #0]
 80068aa:	60c4      	str	r4, [r0, #12]
 80068ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068b4:	b94c      	cbnz	r4, 80068ca <__pow5mult+0x66>
 80068b6:	f240 2171 	movw	r1, #625	; 0x271
 80068ba:	4630      	mov	r0, r6
 80068bc:	f7ff ff16 	bl	80066ec <__i2b>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80068c6:	4604      	mov	r4, r0
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	f04f 0900 	mov.w	r9, #0
 80068ce:	07eb      	lsls	r3, r5, #31
 80068d0:	d50a      	bpl.n	80068e8 <__pow5mult+0x84>
 80068d2:	4639      	mov	r1, r7
 80068d4:	4622      	mov	r2, r4
 80068d6:	4630      	mov	r0, r6
 80068d8:	f7ff ff1e 	bl	8006718 <__multiply>
 80068dc:	4639      	mov	r1, r7
 80068de:	4680      	mov	r8, r0
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7ff fe47 	bl	8006574 <_Bfree>
 80068e6:	4647      	mov	r7, r8
 80068e8:	106d      	asrs	r5, r5, #1
 80068ea:	d00b      	beq.n	8006904 <__pow5mult+0xa0>
 80068ec:	6820      	ldr	r0, [r4, #0]
 80068ee:	b938      	cbnz	r0, 8006900 <__pow5mult+0x9c>
 80068f0:	4622      	mov	r2, r4
 80068f2:	4621      	mov	r1, r4
 80068f4:	4630      	mov	r0, r6
 80068f6:	f7ff ff0f 	bl	8006718 <__multiply>
 80068fa:	6020      	str	r0, [r4, #0]
 80068fc:	f8c0 9000 	str.w	r9, [r0]
 8006900:	4604      	mov	r4, r0
 8006902:	e7e4      	b.n	80068ce <__pow5mult+0x6a>
 8006904:	4638      	mov	r0, r7
 8006906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800690a:	bf00      	nop
 800690c:	08007fd0 	.word	0x08007fd0
 8006910:	08007df9 	.word	0x08007df9
 8006914:	08007e80 	.word	0x08007e80

08006918 <__lshift>:
 8006918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800691c:	460c      	mov	r4, r1
 800691e:	6849      	ldr	r1, [r1, #4]
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006926:	68a3      	ldr	r3, [r4, #8]
 8006928:	4607      	mov	r7, r0
 800692a:	4691      	mov	r9, r2
 800692c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006930:	f108 0601 	add.w	r6, r8, #1
 8006934:	42b3      	cmp	r3, r6
 8006936:	db0b      	blt.n	8006950 <__lshift+0x38>
 8006938:	4638      	mov	r0, r7
 800693a:	f7ff fddb 	bl	80064f4 <_Balloc>
 800693e:	4605      	mov	r5, r0
 8006940:	b948      	cbnz	r0, 8006956 <__lshift+0x3e>
 8006942:	4602      	mov	r2, r0
 8006944:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <__lshift+0xd0>)
 8006946:	4829      	ldr	r0, [pc, #164]	; (80069ec <__lshift+0xd4>)
 8006948:	f240 11d9 	movw	r1, #473	; 0x1d9
 800694c:	f000 fb76 	bl	800703c <__assert_func>
 8006950:	3101      	adds	r1, #1
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	e7ee      	b.n	8006934 <__lshift+0x1c>
 8006956:	2300      	movs	r3, #0
 8006958:	f100 0114 	add.w	r1, r0, #20
 800695c:	f100 0210 	add.w	r2, r0, #16
 8006960:	4618      	mov	r0, r3
 8006962:	4553      	cmp	r3, sl
 8006964:	db33      	blt.n	80069ce <__lshift+0xb6>
 8006966:	6920      	ldr	r0, [r4, #16]
 8006968:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800696c:	f104 0314 	add.w	r3, r4, #20
 8006970:	f019 091f 	ands.w	r9, r9, #31
 8006974:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006978:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800697c:	d02b      	beq.n	80069d6 <__lshift+0xbe>
 800697e:	f1c9 0e20 	rsb	lr, r9, #32
 8006982:	468a      	mov	sl, r1
 8006984:	2200      	movs	r2, #0
 8006986:	6818      	ldr	r0, [r3, #0]
 8006988:	fa00 f009 	lsl.w	r0, r0, r9
 800698c:	4302      	orrs	r2, r0
 800698e:	f84a 2b04 	str.w	r2, [sl], #4
 8006992:	f853 2b04 	ldr.w	r2, [r3], #4
 8006996:	459c      	cmp	ip, r3
 8006998:	fa22 f20e 	lsr.w	r2, r2, lr
 800699c:	d8f3      	bhi.n	8006986 <__lshift+0x6e>
 800699e:	ebac 0304 	sub.w	r3, ip, r4
 80069a2:	3b15      	subs	r3, #21
 80069a4:	f023 0303 	bic.w	r3, r3, #3
 80069a8:	3304      	adds	r3, #4
 80069aa:	f104 0015 	add.w	r0, r4, #21
 80069ae:	4584      	cmp	ip, r0
 80069b0:	bf38      	it	cc
 80069b2:	2304      	movcc	r3, #4
 80069b4:	50ca      	str	r2, [r1, r3]
 80069b6:	b10a      	cbz	r2, 80069bc <__lshift+0xa4>
 80069b8:	f108 0602 	add.w	r6, r8, #2
 80069bc:	3e01      	subs	r6, #1
 80069be:	4638      	mov	r0, r7
 80069c0:	612e      	str	r6, [r5, #16]
 80069c2:	4621      	mov	r1, r4
 80069c4:	f7ff fdd6 	bl	8006574 <_Bfree>
 80069c8:	4628      	mov	r0, r5
 80069ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80069d2:	3301      	adds	r3, #1
 80069d4:	e7c5      	b.n	8006962 <__lshift+0x4a>
 80069d6:	3904      	subs	r1, #4
 80069d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80069dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80069e0:	459c      	cmp	ip, r3
 80069e2:	d8f9      	bhi.n	80069d8 <__lshift+0xc0>
 80069e4:	e7ea      	b.n	80069bc <__lshift+0xa4>
 80069e6:	bf00      	nop
 80069e8:	08007e6f 	.word	0x08007e6f
 80069ec:	08007e80 	.word	0x08007e80

080069f0 <__mcmp>:
 80069f0:	b530      	push	{r4, r5, lr}
 80069f2:	6902      	ldr	r2, [r0, #16]
 80069f4:	690c      	ldr	r4, [r1, #16]
 80069f6:	1b12      	subs	r2, r2, r4
 80069f8:	d10e      	bne.n	8006a18 <__mcmp+0x28>
 80069fa:	f100 0314 	add.w	r3, r0, #20
 80069fe:	3114      	adds	r1, #20
 8006a00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a10:	42a5      	cmp	r5, r4
 8006a12:	d003      	beq.n	8006a1c <__mcmp+0x2c>
 8006a14:	d305      	bcc.n	8006a22 <__mcmp+0x32>
 8006a16:	2201      	movs	r2, #1
 8006a18:	4610      	mov	r0, r2
 8006a1a:	bd30      	pop	{r4, r5, pc}
 8006a1c:	4283      	cmp	r3, r0
 8006a1e:	d3f3      	bcc.n	8006a08 <__mcmp+0x18>
 8006a20:	e7fa      	b.n	8006a18 <__mcmp+0x28>
 8006a22:	f04f 32ff 	mov.w	r2, #4294967295
 8006a26:	e7f7      	b.n	8006a18 <__mcmp+0x28>

08006a28 <__mdiff>:
 8006a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	460c      	mov	r4, r1
 8006a2e:	4606      	mov	r6, r0
 8006a30:	4611      	mov	r1, r2
 8006a32:	4620      	mov	r0, r4
 8006a34:	4617      	mov	r7, r2
 8006a36:	f7ff ffdb 	bl	80069f0 <__mcmp>
 8006a3a:	1e05      	subs	r5, r0, #0
 8006a3c:	d110      	bne.n	8006a60 <__mdiff+0x38>
 8006a3e:	4629      	mov	r1, r5
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff fd57 	bl	80064f4 <_Balloc>
 8006a46:	b930      	cbnz	r0, 8006a56 <__mdiff+0x2e>
 8006a48:	4b39      	ldr	r3, [pc, #228]	; (8006b30 <__mdiff+0x108>)
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	f240 2132 	movw	r1, #562	; 0x232
 8006a50:	4838      	ldr	r0, [pc, #224]	; (8006b34 <__mdiff+0x10c>)
 8006a52:	f000 faf3 	bl	800703c <__assert_func>
 8006a56:	2301      	movs	r3, #1
 8006a58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	bfa4      	itt	ge
 8006a62:	463b      	movge	r3, r7
 8006a64:	4627      	movge	r7, r4
 8006a66:	4630      	mov	r0, r6
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	bfa6      	itte	ge
 8006a6c:	461c      	movge	r4, r3
 8006a6e:	2500      	movge	r5, #0
 8006a70:	2501      	movlt	r5, #1
 8006a72:	f7ff fd3f 	bl	80064f4 <_Balloc>
 8006a76:	b920      	cbnz	r0, 8006a82 <__mdiff+0x5a>
 8006a78:	4b2d      	ldr	r3, [pc, #180]	; (8006b30 <__mdiff+0x108>)
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a80:	e7e6      	b.n	8006a50 <__mdiff+0x28>
 8006a82:	693e      	ldr	r6, [r7, #16]
 8006a84:	60c5      	str	r5, [r0, #12]
 8006a86:	6925      	ldr	r5, [r4, #16]
 8006a88:	f107 0114 	add.w	r1, r7, #20
 8006a8c:	f104 0914 	add.w	r9, r4, #20
 8006a90:	f100 0e14 	add.w	lr, r0, #20
 8006a94:	f107 0210 	add.w	r2, r7, #16
 8006a98:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8006a9c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8006aa0:	46f2      	mov	sl, lr
 8006aa2:	2700      	movs	r7, #0
 8006aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006aa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006aac:	fa1f f883 	uxth.w	r8, r3
 8006ab0:	fa17 f78b 	uxtah	r7, r7, fp
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	eba7 0808 	sub.w	r8, r7, r8
 8006aba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006abe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ac2:	fa1f f888 	uxth.w	r8, r8
 8006ac6:	141f      	asrs	r7, r3, #16
 8006ac8:	454d      	cmp	r5, r9
 8006aca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ace:	f84a 3b04 	str.w	r3, [sl], #4
 8006ad2:	d8e7      	bhi.n	8006aa4 <__mdiff+0x7c>
 8006ad4:	1b2b      	subs	r3, r5, r4
 8006ad6:	3b15      	subs	r3, #21
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	3304      	adds	r3, #4
 8006ade:	3415      	adds	r4, #21
 8006ae0:	42a5      	cmp	r5, r4
 8006ae2:	bf38      	it	cc
 8006ae4:	2304      	movcc	r3, #4
 8006ae6:	4419      	add	r1, r3
 8006ae8:	4473      	add	r3, lr
 8006aea:	469e      	mov	lr, r3
 8006aec:	460d      	mov	r5, r1
 8006aee:	4565      	cmp	r5, ip
 8006af0:	d30e      	bcc.n	8006b10 <__mdiff+0xe8>
 8006af2:	f10c 0203 	add.w	r2, ip, #3
 8006af6:	1a52      	subs	r2, r2, r1
 8006af8:	f022 0203 	bic.w	r2, r2, #3
 8006afc:	3903      	subs	r1, #3
 8006afe:	458c      	cmp	ip, r1
 8006b00:	bf38      	it	cc
 8006b02:	2200      	movcc	r2, #0
 8006b04:	441a      	add	r2, r3
 8006b06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b0a:	b17b      	cbz	r3, 8006b2c <__mdiff+0x104>
 8006b0c:	6106      	str	r6, [r0, #16]
 8006b0e:	e7a5      	b.n	8006a5c <__mdiff+0x34>
 8006b10:	f855 8b04 	ldr.w	r8, [r5], #4
 8006b14:	fa17 f488 	uxtah	r4, r7, r8
 8006b18:	1422      	asrs	r2, r4, #16
 8006b1a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8006b1e:	b2a4      	uxth	r4, r4
 8006b20:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b24:	f84e 4b04 	str.w	r4, [lr], #4
 8006b28:	1417      	asrs	r7, r2, #16
 8006b2a:	e7e0      	b.n	8006aee <__mdiff+0xc6>
 8006b2c:	3e01      	subs	r6, #1
 8006b2e:	e7ea      	b.n	8006b06 <__mdiff+0xde>
 8006b30:	08007e6f 	.word	0x08007e6f
 8006b34:	08007e80 	.word	0x08007e80

08006b38 <__d2b>:
 8006b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	4689      	mov	r9, r1
 8006b3e:	2101      	movs	r1, #1
 8006b40:	ec57 6b10 	vmov	r6, r7, d0
 8006b44:	4690      	mov	r8, r2
 8006b46:	f7ff fcd5 	bl	80064f4 <_Balloc>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	b930      	cbnz	r0, 8006b5c <__d2b+0x24>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <__d2b+0xb0>)
 8006b52:	4826      	ldr	r0, [pc, #152]	; (8006bec <__d2b+0xb4>)
 8006b54:	f240 310a 	movw	r1, #778	; 0x30a
 8006b58:	f000 fa70 	bl	800703c <__assert_func>
 8006b5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b64:	bb35      	cbnz	r5, 8006bb4 <__d2b+0x7c>
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	d028      	beq.n	8006bbe <__d2b+0x86>
 8006b6c:	4668      	mov	r0, sp
 8006b6e:	9600      	str	r6, [sp, #0]
 8006b70:	f7ff fd8c 	bl	800668c <__lo0bits>
 8006b74:	9900      	ldr	r1, [sp, #0]
 8006b76:	b300      	cbz	r0, 8006bba <__d2b+0x82>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	f1c0 0320 	rsb	r3, r0, #32
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	430b      	orrs	r3, r1
 8006b84:	40c2      	lsrs	r2, r0
 8006b86:	6163      	str	r3, [r4, #20]
 8006b88:	9201      	str	r2, [sp, #4]
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	61a3      	str	r3, [r4, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2202      	movne	r2, #2
 8006b94:	2201      	moveq	r2, #1
 8006b96:	6122      	str	r2, [r4, #16]
 8006b98:	b1d5      	cbz	r5, 8006bd0 <__d2b+0x98>
 8006b9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b9e:	4405      	add	r5, r0
 8006ba0:	f8c9 5000 	str.w	r5, [r9]
 8006ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ba8:	f8c8 0000 	str.w	r0, [r8]
 8006bac:	4620      	mov	r0, r4
 8006bae:	b003      	add	sp, #12
 8006bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb8:	e7d5      	b.n	8006b66 <__d2b+0x2e>
 8006bba:	6161      	str	r1, [r4, #20]
 8006bbc:	e7e5      	b.n	8006b8a <__d2b+0x52>
 8006bbe:	a801      	add	r0, sp, #4
 8006bc0:	f7ff fd64 	bl	800668c <__lo0bits>
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	6163      	str	r3, [r4, #20]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	6122      	str	r2, [r4, #16]
 8006bcc:	3020      	adds	r0, #32
 8006bce:	e7e3      	b.n	8006b98 <__d2b+0x60>
 8006bd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bd8:	f8c9 0000 	str.w	r0, [r9]
 8006bdc:	6918      	ldr	r0, [r3, #16]
 8006bde:	f7ff fd35 	bl	800664c <__hi0bits>
 8006be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006be6:	e7df      	b.n	8006ba8 <__d2b+0x70>
 8006be8:	08007e6f 	.word	0x08007e6f
 8006bec:	08007e80 	.word	0x08007e80

08006bf0 <_calloc_r>:
 8006bf0:	b513      	push	{r0, r1, r4, lr}
 8006bf2:	434a      	muls	r2, r1
 8006bf4:	4611      	mov	r1, r2
 8006bf6:	9201      	str	r2, [sp, #4]
 8006bf8:	f000 f85a 	bl	8006cb0 <_malloc_r>
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	b118      	cbz	r0, 8006c08 <_calloc_r+0x18>
 8006c00:	9a01      	ldr	r2, [sp, #4]
 8006c02:	2100      	movs	r1, #0
 8006c04:	f7fe f952 	bl	8004eac <memset>
 8006c08:	4620      	mov	r0, r4
 8006c0a:	b002      	add	sp, #8
 8006c0c:	bd10      	pop	{r4, pc}
	...

08006c10 <_free_r>:
 8006c10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c12:	2900      	cmp	r1, #0
 8006c14:	d048      	beq.n	8006ca8 <_free_r+0x98>
 8006c16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c1a:	9001      	str	r0, [sp, #4]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006c22:	bfb8      	it	lt
 8006c24:	18e4      	addlt	r4, r4, r3
 8006c26:	f000 fa65 	bl	80070f4 <__malloc_lock>
 8006c2a:	4a20      	ldr	r2, [pc, #128]	; (8006cac <_free_r+0x9c>)
 8006c2c:	9801      	ldr	r0, [sp, #4]
 8006c2e:	6813      	ldr	r3, [r2, #0]
 8006c30:	4615      	mov	r5, r2
 8006c32:	b933      	cbnz	r3, 8006c42 <_free_r+0x32>
 8006c34:	6063      	str	r3, [r4, #4]
 8006c36:	6014      	str	r4, [r2, #0]
 8006c38:	b003      	add	sp, #12
 8006c3a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c3e:	f000 ba5f 	b.w	8007100 <__malloc_unlock>
 8006c42:	42a3      	cmp	r3, r4
 8006c44:	d90b      	bls.n	8006c5e <_free_r+0x4e>
 8006c46:	6821      	ldr	r1, [r4, #0]
 8006c48:	1862      	adds	r2, r4, r1
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	bf04      	itt	eq
 8006c4e:	681a      	ldreq	r2, [r3, #0]
 8006c50:	685b      	ldreq	r3, [r3, #4]
 8006c52:	6063      	str	r3, [r4, #4]
 8006c54:	bf04      	itt	eq
 8006c56:	1852      	addeq	r2, r2, r1
 8006c58:	6022      	streq	r2, [r4, #0]
 8006c5a:	602c      	str	r4, [r5, #0]
 8006c5c:	e7ec      	b.n	8006c38 <_free_r+0x28>
 8006c5e:	461a      	mov	r2, r3
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	b10b      	cbz	r3, 8006c68 <_free_r+0x58>
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	d9fa      	bls.n	8006c5e <_free_r+0x4e>
 8006c68:	6811      	ldr	r1, [r2, #0]
 8006c6a:	1855      	adds	r5, r2, r1
 8006c6c:	42a5      	cmp	r5, r4
 8006c6e:	d10b      	bne.n	8006c88 <_free_r+0x78>
 8006c70:	6824      	ldr	r4, [r4, #0]
 8006c72:	4421      	add	r1, r4
 8006c74:	1854      	adds	r4, r2, r1
 8006c76:	42a3      	cmp	r3, r4
 8006c78:	6011      	str	r1, [r2, #0]
 8006c7a:	d1dd      	bne.n	8006c38 <_free_r+0x28>
 8006c7c:	681c      	ldr	r4, [r3, #0]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	6053      	str	r3, [r2, #4]
 8006c82:	4421      	add	r1, r4
 8006c84:	6011      	str	r1, [r2, #0]
 8006c86:	e7d7      	b.n	8006c38 <_free_r+0x28>
 8006c88:	d902      	bls.n	8006c90 <_free_r+0x80>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	6003      	str	r3, [r0, #0]
 8006c8e:	e7d3      	b.n	8006c38 <_free_r+0x28>
 8006c90:	6825      	ldr	r5, [r4, #0]
 8006c92:	1961      	adds	r1, r4, r5
 8006c94:	428b      	cmp	r3, r1
 8006c96:	bf04      	itt	eq
 8006c98:	6819      	ldreq	r1, [r3, #0]
 8006c9a:	685b      	ldreq	r3, [r3, #4]
 8006c9c:	6063      	str	r3, [r4, #4]
 8006c9e:	bf04      	itt	eq
 8006ca0:	1949      	addeq	r1, r1, r5
 8006ca2:	6021      	streq	r1, [r4, #0]
 8006ca4:	6054      	str	r4, [r2, #4]
 8006ca6:	e7c7      	b.n	8006c38 <_free_r+0x28>
 8006ca8:	b003      	add	sp, #12
 8006caa:	bd30      	pop	{r4, r5, pc}
 8006cac:	2000026c 	.word	0x2000026c

08006cb0 <_malloc_r>:
 8006cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cb2:	1ccd      	adds	r5, r1, #3
 8006cb4:	f025 0503 	bic.w	r5, r5, #3
 8006cb8:	3508      	adds	r5, #8
 8006cba:	2d0c      	cmp	r5, #12
 8006cbc:	bf38      	it	cc
 8006cbe:	250c      	movcc	r5, #12
 8006cc0:	2d00      	cmp	r5, #0
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	db01      	blt.n	8006cca <_malloc_r+0x1a>
 8006cc6:	42a9      	cmp	r1, r5
 8006cc8:	d903      	bls.n	8006cd2 <_malloc_r+0x22>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	6033      	str	r3, [r6, #0]
 8006cce:	2000      	movs	r0, #0
 8006cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd2:	f000 fa0f 	bl	80070f4 <__malloc_lock>
 8006cd6:	4921      	ldr	r1, [pc, #132]	; (8006d5c <_malloc_r+0xac>)
 8006cd8:	680a      	ldr	r2, [r1, #0]
 8006cda:	4614      	mov	r4, r2
 8006cdc:	b99c      	cbnz	r4, 8006d06 <_malloc_r+0x56>
 8006cde:	4f20      	ldr	r7, [pc, #128]	; (8006d60 <_malloc_r+0xb0>)
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b923      	cbnz	r3, 8006cee <_malloc_r+0x3e>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4630      	mov	r0, r6
 8006ce8:	f000 f998 	bl	800701c <_sbrk_r>
 8006cec:	6038      	str	r0, [r7, #0]
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f000 f993 	bl	800701c <_sbrk_r>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	d123      	bne.n	8006d42 <_malloc_r+0x92>
 8006cfa:	230c      	movs	r3, #12
 8006cfc:	6033      	str	r3, [r6, #0]
 8006cfe:	4630      	mov	r0, r6
 8006d00:	f000 f9fe 	bl	8007100 <__malloc_unlock>
 8006d04:	e7e3      	b.n	8006cce <_malloc_r+0x1e>
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	1b5b      	subs	r3, r3, r5
 8006d0a:	d417      	bmi.n	8006d3c <_malloc_r+0x8c>
 8006d0c:	2b0b      	cmp	r3, #11
 8006d0e:	d903      	bls.n	8006d18 <_malloc_r+0x68>
 8006d10:	6023      	str	r3, [r4, #0]
 8006d12:	441c      	add	r4, r3
 8006d14:	6025      	str	r5, [r4, #0]
 8006d16:	e004      	b.n	8006d22 <_malloc_r+0x72>
 8006d18:	6863      	ldr	r3, [r4, #4]
 8006d1a:	42a2      	cmp	r2, r4
 8006d1c:	bf0c      	ite	eq
 8006d1e:	600b      	streq	r3, [r1, #0]
 8006d20:	6053      	strne	r3, [r2, #4]
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 f9ec 	bl	8007100 <__malloc_unlock>
 8006d28:	f104 000b 	add.w	r0, r4, #11
 8006d2c:	1d23      	adds	r3, r4, #4
 8006d2e:	f020 0007 	bic.w	r0, r0, #7
 8006d32:	1ac2      	subs	r2, r0, r3
 8006d34:	d0cc      	beq.n	8006cd0 <_malloc_r+0x20>
 8006d36:	1a1b      	subs	r3, r3, r0
 8006d38:	50a3      	str	r3, [r4, r2]
 8006d3a:	e7c9      	b.n	8006cd0 <_malloc_r+0x20>
 8006d3c:	4622      	mov	r2, r4
 8006d3e:	6864      	ldr	r4, [r4, #4]
 8006d40:	e7cc      	b.n	8006cdc <_malloc_r+0x2c>
 8006d42:	1cc4      	adds	r4, r0, #3
 8006d44:	f024 0403 	bic.w	r4, r4, #3
 8006d48:	42a0      	cmp	r0, r4
 8006d4a:	d0e3      	beq.n	8006d14 <_malloc_r+0x64>
 8006d4c:	1a21      	subs	r1, r4, r0
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f000 f964 	bl	800701c <_sbrk_r>
 8006d54:	3001      	adds	r0, #1
 8006d56:	d1dd      	bne.n	8006d14 <_malloc_r+0x64>
 8006d58:	e7cf      	b.n	8006cfa <_malloc_r+0x4a>
 8006d5a:	bf00      	nop
 8006d5c:	2000026c 	.word	0x2000026c
 8006d60:	20000270 	.word	0x20000270

08006d64 <__ssputs_r>:
 8006d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d68:	688e      	ldr	r6, [r1, #8]
 8006d6a:	429e      	cmp	r6, r3
 8006d6c:	4682      	mov	sl, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4690      	mov	r8, r2
 8006d72:	461f      	mov	r7, r3
 8006d74:	d838      	bhi.n	8006de8 <__ssputs_r+0x84>
 8006d76:	898a      	ldrh	r2, [r1, #12]
 8006d78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d7c:	d032      	beq.n	8006de4 <__ssputs_r+0x80>
 8006d7e:	6825      	ldr	r5, [r4, #0]
 8006d80:	6909      	ldr	r1, [r1, #16]
 8006d82:	eba5 0901 	sub.w	r9, r5, r1
 8006d86:	6965      	ldr	r5, [r4, #20]
 8006d88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d90:	3301      	adds	r3, #1
 8006d92:	444b      	add	r3, r9
 8006d94:	106d      	asrs	r5, r5, #1
 8006d96:	429d      	cmp	r5, r3
 8006d98:	bf38      	it	cc
 8006d9a:	461d      	movcc	r5, r3
 8006d9c:	0553      	lsls	r3, r2, #21
 8006d9e:	d531      	bpl.n	8006e04 <__ssputs_r+0xa0>
 8006da0:	4629      	mov	r1, r5
 8006da2:	f7ff ff85 	bl	8006cb0 <_malloc_r>
 8006da6:	4606      	mov	r6, r0
 8006da8:	b950      	cbnz	r0, 8006dc0 <__ssputs_r+0x5c>
 8006daa:	230c      	movs	r3, #12
 8006dac:	f8ca 3000 	str.w	r3, [sl]
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006db6:	81a3      	strh	r3, [r4, #12]
 8006db8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dc0:	6921      	ldr	r1, [r4, #16]
 8006dc2:	464a      	mov	r2, r9
 8006dc4:	f7ff fb88 	bl	80064d8 <memcpy>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006dce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	6126      	str	r6, [r4, #16]
 8006dd6:	6165      	str	r5, [r4, #20]
 8006dd8:	444e      	add	r6, r9
 8006dda:	eba5 0509 	sub.w	r5, r5, r9
 8006dde:	6026      	str	r6, [r4, #0]
 8006de0:	60a5      	str	r5, [r4, #8]
 8006de2:	463e      	mov	r6, r7
 8006de4:	42be      	cmp	r6, r7
 8006de6:	d900      	bls.n	8006dea <__ssputs_r+0x86>
 8006de8:	463e      	mov	r6, r7
 8006dea:	4632      	mov	r2, r6
 8006dec:	6820      	ldr	r0, [r4, #0]
 8006dee:	4641      	mov	r1, r8
 8006df0:	f000 f966 	bl	80070c0 <memmove>
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	1b9b      	subs	r3, r3, r6
 8006dfa:	4432      	add	r2, r6
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	6022      	str	r2, [r4, #0]
 8006e00:	2000      	movs	r0, #0
 8006e02:	e7db      	b.n	8006dbc <__ssputs_r+0x58>
 8006e04:	462a      	mov	r2, r5
 8006e06:	f000 f981 	bl	800710c <_realloc_r>
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	2800      	cmp	r0, #0
 8006e0e:	d1e1      	bne.n	8006dd4 <__ssputs_r+0x70>
 8006e10:	6921      	ldr	r1, [r4, #16]
 8006e12:	4650      	mov	r0, sl
 8006e14:	f7ff fefc 	bl	8006c10 <_free_r>
 8006e18:	e7c7      	b.n	8006daa <__ssputs_r+0x46>
	...

08006e1c <_svfiprintf_r>:
 8006e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	4698      	mov	r8, r3
 8006e22:	898b      	ldrh	r3, [r1, #12]
 8006e24:	061b      	lsls	r3, r3, #24
 8006e26:	b09d      	sub	sp, #116	; 0x74
 8006e28:	4607      	mov	r7, r0
 8006e2a:	460d      	mov	r5, r1
 8006e2c:	4614      	mov	r4, r2
 8006e2e:	d50e      	bpl.n	8006e4e <_svfiprintf_r+0x32>
 8006e30:	690b      	ldr	r3, [r1, #16]
 8006e32:	b963      	cbnz	r3, 8006e4e <_svfiprintf_r+0x32>
 8006e34:	2140      	movs	r1, #64	; 0x40
 8006e36:	f7ff ff3b 	bl	8006cb0 <_malloc_r>
 8006e3a:	6028      	str	r0, [r5, #0]
 8006e3c:	6128      	str	r0, [r5, #16]
 8006e3e:	b920      	cbnz	r0, 8006e4a <_svfiprintf_r+0x2e>
 8006e40:	230c      	movs	r3, #12
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	f04f 30ff 	mov.w	r0, #4294967295
 8006e48:	e0d1      	b.n	8006fee <_svfiprintf_r+0x1d2>
 8006e4a:	2340      	movs	r3, #64	; 0x40
 8006e4c:	616b      	str	r3, [r5, #20]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9309      	str	r3, [sp, #36]	; 0x24
 8006e52:	2320      	movs	r3, #32
 8006e54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e5c:	2330      	movs	r3, #48	; 0x30
 8006e5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007008 <_svfiprintf_r+0x1ec>
 8006e62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e66:	f04f 0901 	mov.w	r9, #1
 8006e6a:	4623      	mov	r3, r4
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e72:	b10a      	cbz	r2, 8006e78 <_svfiprintf_r+0x5c>
 8006e74:	2a25      	cmp	r2, #37	; 0x25
 8006e76:	d1f9      	bne.n	8006e6c <_svfiprintf_r+0x50>
 8006e78:	ebba 0b04 	subs.w	fp, sl, r4
 8006e7c:	d00b      	beq.n	8006e96 <_svfiprintf_r+0x7a>
 8006e7e:	465b      	mov	r3, fp
 8006e80:	4622      	mov	r2, r4
 8006e82:	4629      	mov	r1, r5
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff ff6d 	bl	8006d64 <__ssputs_r>
 8006e8a:	3001      	adds	r0, #1
 8006e8c:	f000 80aa 	beq.w	8006fe4 <_svfiprintf_r+0x1c8>
 8006e90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e92:	445a      	add	r2, fp
 8006e94:	9209      	str	r2, [sp, #36]	; 0x24
 8006e96:	f89a 3000 	ldrb.w	r3, [sl]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 80a2 	beq.w	8006fe4 <_svfiprintf_r+0x1c8>
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ea6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eaa:	f10a 0a01 	add.w	sl, sl, #1
 8006eae:	9304      	str	r3, [sp, #16]
 8006eb0:	9307      	str	r3, [sp, #28]
 8006eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb8:	4654      	mov	r4, sl
 8006eba:	2205      	movs	r2, #5
 8006ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ec0:	4851      	ldr	r0, [pc, #324]	; (8007008 <_svfiprintf_r+0x1ec>)
 8006ec2:	f7f9 f995 	bl	80001f0 <memchr>
 8006ec6:	9a04      	ldr	r2, [sp, #16]
 8006ec8:	b9d8      	cbnz	r0, 8006f02 <_svfiprintf_r+0xe6>
 8006eca:	06d0      	lsls	r0, r2, #27
 8006ecc:	bf44      	itt	mi
 8006ece:	2320      	movmi	r3, #32
 8006ed0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed4:	0711      	lsls	r1, r2, #28
 8006ed6:	bf44      	itt	mi
 8006ed8:	232b      	movmi	r3, #43	; 0x2b
 8006eda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ede:	f89a 3000 	ldrb.w	r3, [sl]
 8006ee2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ee4:	d015      	beq.n	8006f12 <_svfiprintf_r+0xf6>
 8006ee6:	9a07      	ldr	r2, [sp, #28]
 8006ee8:	4654      	mov	r4, sl
 8006eea:	2000      	movs	r0, #0
 8006eec:	f04f 0c0a 	mov.w	ip, #10
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef6:	3b30      	subs	r3, #48	; 0x30
 8006ef8:	2b09      	cmp	r3, #9
 8006efa:	d94e      	bls.n	8006f9a <_svfiprintf_r+0x17e>
 8006efc:	b1b0      	cbz	r0, 8006f2c <_svfiprintf_r+0x110>
 8006efe:	9207      	str	r2, [sp, #28]
 8006f00:	e014      	b.n	8006f2c <_svfiprintf_r+0x110>
 8006f02:	eba0 0308 	sub.w	r3, r0, r8
 8006f06:	fa09 f303 	lsl.w	r3, r9, r3
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	9304      	str	r3, [sp, #16]
 8006f0e:	46a2      	mov	sl, r4
 8006f10:	e7d2      	b.n	8006eb8 <_svfiprintf_r+0x9c>
 8006f12:	9b03      	ldr	r3, [sp, #12]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	9103      	str	r1, [sp, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	bfbb      	ittet	lt
 8006f1e:	425b      	neglt	r3, r3
 8006f20:	f042 0202 	orrlt.w	r2, r2, #2
 8006f24:	9307      	strge	r3, [sp, #28]
 8006f26:	9307      	strlt	r3, [sp, #28]
 8006f28:	bfb8      	it	lt
 8006f2a:	9204      	strlt	r2, [sp, #16]
 8006f2c:	7823      	ldrb	r3, [r4, #0]
 8006f2e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f30:	d10c      	bne.n	8006f4c <_svfiprintf_r+0x130>
 8006f32:	7863      	ldrb	r3, [r4, #1]
 8006f34:	2b2a      	cmp	r3, #42	; 0x2a
 8006f36:	d135      	bne.n	8006fa4 <_svfiprintf_r+0x188>
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	1d1a      	adds	r2, r3, #4
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	9203      	str	r2, [sp, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	bfb8      	it	lt
 8006f44:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f48:	3402      	adds	r4, #2
 8006f4a:	9305      	str	r3, [sp, #20]
 8006f4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007018 <_svfiprintf_r+0x1fc>
 8006f50:	7821      	ldrb	r1, [r4, #0]
 8006f52:	2203      	movs	r2, #3
 8006f54:	4650      	mov	r0, sl
 8006f56:	f7f9 f94b 	bl	80001f0 <memchr>
 8006f5a:	b140      	cbz	r0, 8006f6e <_svfiprintf_r+0x152>
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	eba0 000a 	sub.w	r0, r0, sl
 8006f62:	fa03 f000 	lsl.w	r0, r3, r0
 8006f66:	9b04      	ldr	r3, [sp, #16]
 8006f68:	4303      	orrs	r3, r0
 8006f6a:	3401      	adds	r4, #1
 8006f6c:	9304      	str	r3, [sp, #16]
 8006f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f72:	4826      	ldr	r0, [pc, #152]	; (800700c <_svfiprintf_r+0x1f0>)
 8006f74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f78:	2206      	movs	r2, #6
 8006f7a:	f7f9 f939 	bl	80001f0 <memchr>
 8006f7e:	2800      	cmp	r0, #0
 8006f80:	d038      	beq.n	8006ff4 <_svfiprintf_r+0x1d8>
 8006f82:	4b23      	ldr	r3, [pc, #140]	; (8007010 <_svfiprintf_r+0x1f4>)
 8006f84:	bb1b      	cbnz	r3, 8006fce <_svfiprintf_r+0x1b2>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	3307      	adds	r3, #7
 8006f8a:	f023 0307 	bic.w	r3, r3, #7
 8006f8e:	3308      	adds	r3, #8
 8006f90:	9303      	str	r3, [sp, #12]
 8006f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f94:	4433      	add	r3, r6
 8006f96:	9309      	str	r3, [sp, #36]	; 0x24
 8006f98:	e767      	b.n	8006e6a <_svfiprintf_r+0x4e>
 8006f9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f9e:	460c      	mov	r4, r1
 8006fa0:	2001      	movs	r0, #1
 8006fa2:	e7a5      	b.n	8006ef0 <_svfiprintf_r+0xd4>
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	3401      	adds	r4, #1
 8006fa8:	9305      	str	r3, [sp, #20]
 8006faa:	4619      	mov	r1, r3
 8006fac:	f04f 0c0a 	mov.w	ip, #10
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb6:	3a30      	subs	r2, #48	; 0x30
 8006fb8:	2a09      	cmp	r2, #9
 8006fba:	d903      	bls.n	8006fc4 <_svfiprintf_r+0x1a8>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d0c5      	beq.n	8006f4c <_svfiprintf_r+0x130>
 8006fc0:	9105      	str	r1, [sp, #20]
 8006fc2:	e7c3      	b.n	8006f4c <_svfiprintf_r+0x130>
 8006fc4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc8:	4604      	mov	r4, r0
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e7f0      	b.n	8006fb0 <_svfiprintf_r+0x194>
 8006fce:	ab03      	add	r3, sp, #12
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	462a      	mov	r2, r5
 8006fd4:	4b0f      	ldr	r3, [pc, #60]	; (8007014 <_svfiprintf_r+0x1f8>)
 8006fd6:	a904      	add	r1, sp, #16
 8006fd8:	4638      	mov	r0, r7
 8006fda:	f7fe f80f 	bl	8004ffc <_printf_float>
 8006fde:	1c42      	adds	r2, r0, #1
 8006fe0:	4606      	mov	r6, r0
 8006fe2:	d1d6      	bne.n	8006f92 <_svfiprintf_r+0x176>
 8006fe4:	89ab      	ldrh	r3, [r5, #12]
 8006fe6:	065b      	lsls	r3, r3, #25
 8006fe8:	f53f af2c 	bmi.w	8006e44 <_svfiprintf_r+0x28>
 8006fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fee:	b01d      	add	sp, #116	; 0x74
 8006ff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ff4:	ab03      	add	r3, sp, #12
 8006ff6:	9300      	str	r3, [sp, #0]
 8006ff8:	462a      	mov	r2, r5
 8006ffa:	4b06      	ldr	r3, [pc, #24]	; (8007014 <_svfiprintf_r+0x1f8>)
 8006ffc:	a904      	add	r1, sp, #16
 8006ffe:	4638      	mov	r0, r7
 8007000:	f7fe faa0 	bl	8005544 <_printf_i>
 8007004:	e7eb      	b.n	8006fde <_svfiprintf_r+0x1c2>
 8007006:	bf00      	nop
 8007008:	08007fdc 	.word	0x08007fdc
 800700c:	08007fe6 	.word	0x08007fe6
 8007010:	08004ffd 	.word	0x08004ffd
 8007014:	08006d65 	.word	0x08006d65
 8007018:	08007fe2 	.word	0x08007fe2

0800701c <_sbrk_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d06      	ldr	r5, [pc, #24]	; (8007038 <_sbrk_r+0x1c>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	602b      	str	r3, [r5, #0]
 8007028:	f7fd fea4 	bl	8004d74 <_sbrk>
 800702c:	1c43      	adds	r3, r0, #1
 800702e:	d102      	bne.n	8007036 <_sbrk_r+0x1a>
 8007030:	682b      	ldr	r3, [r5, #0]
 8007032:	b103      	cbz	r3, 8007036 <_sbrk_r+0x1a>
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	bd38      	pop	{r3, r4, r5, pc}
 8007038:	2000035c 	.word	0x2000035c

0800703c <__assert_func>:
 800703c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800703e:	4614      	mov	r4, r2
 8007040:	461a      	mov	r2, r3
 8007042:	4b09      	ldr	r3, [pc, #36]	; (8007068 <__assert_func+0x2c>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4605      	mov	r5, r0
 8007048:	68d8      	ldr	r0, [r3, #12]
 800704a:	b14c      	cbz	r4, 8007060 <__assert_func+0x24>
 800704c:	4b07      	ldr	r3, [pc, #28]	; (800706c <__assert_func+0x30>)
 800704e:	9100      	str	r1, [sp, #0]
 8007050:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007054:	4906      	ldr	r1, [pc, #24]	; (8007070 <__assert_func+0x34>)
 8007056:	462b      	mov	r3, r5
 8007058:	f000 f80e 	bl	8007078 <fiprintf>
 800705c:	f000 faa4 	bl	80075a8 <abort>
 8007060:	4b04      	ldr	r3, [pc, #16]	; (8007074 <__assert_func+0x38>)
 8007062:	461c      	mov	r4, r3
 8007064:	e7f3      	b.n	800704e <__assert_func+0x12>
 8007066:	bf00      	nop
 8007068:	2000000c 	.word	0x2000000c
 800706c:	08007fed 	.word	0x08007fed
 8007070:	08007ffa 	.word	0x08007ffa
 8007074:	08008028 	.word	0x08008028

08007078 <fiprintf>:
 8007078:	b40e      	push	{r1, r2, r3}
 800707a:	b503      	push	{r0, r1, lr}
 800707c:	4601      	mov	r1, r0
 800707e:	ab03      	add	r3, sp, #12
 8007080:	4805      	ldr	r0, [pc, #20]	; (8007098 <fiprintf+0x20>)
 8007082:	f853 2b04 	ldr.w	r2, [r3], #4
 8007086:	6800      	ldr	r0, [r0, #0]
 8007088:	9301      	str	r3, [sp, #4]
 800708a:	f000 f88f 	bl	80071ac <_vfiprintf_r>
 800708e:	b002      	add	sp, #8
 8007090:	f85d eb04 	ldr.w	lr, [sp], #4
 8007094:	b003      	add	sp, #12
 8007096:	4770      	bx	lr
 8007098:	2000000c 	.word	0x2000000c

0800709c <__ascii_mbtowc>:
 800709c:	b082      	sub	sp, #8
 800709e:	b901      	cbnz	r1, 80070a2 <__ascii_mbtowc+0x6>
 80070a0:	a901      	add	r1, sp, #4
 80070a2:	b142      	cbz	r2, 80070b6 <__ascii_mbtowc+0x1a>
 80070a4:	b14b      	cbz	r3, 80070ba <__ascii_mbtowc+0x1e>
 80070a6:	7813      	ldrb	r3, [r2, #0]
 80070a8:	600b      	str	r3, [r1, #0]
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	1e10      	subs	r0, r2, #0
 80070ae:	bf18      	it	ne
 80070b0:	2001      	movne	r0, #1
 80070b2:	b002      	add	sp, #8
 80070b4:	4770      	bx	lr
 80070b6:	4610      	mov	r0, r2
 80070b8:	e7fb      	b.n	80070b2 <__ascii_mbtowc+0x16>
 80070ba:	f06f 0001 	mvn.w	r0, #1
 80070be:	e7f8      	b.n	80070b2 <__ascii_mbtowc+0x16>

080070c0 <memmove>:
 80070c0:	4288      	cmp	r0, r1
 80070c2:	b510      	push	{r4, lr}
 80070c4:	eb01 0402 	add.w	r4, r1, r2
 80070c8:	d902      	bls.n	80070d0 <memmove+0x10>
 80070ca:	4284      	cmp	r4, r0
 80070cc:	4623      	mov	r3, r4
 80070ce:	d807      	bhi.n	80070e0 <memmove+0x20>
 80070d0:	1e43      	subs	r3, r0, #1
 80070d2:	42a1      	cmp	r1, r4
 80070d4:	d008      	beq.n	80070e8 <memmove+0x28>
 80070d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070de:	e7f8      	b.n	80070d2 <memmove+0x12>
 80070e0:	4402      	add	r2, r0
 80070e2:	4601      	mov	r1, r0
 80070e4:	428a      	cmp	r2, r1
 80070e6:	d100      	bne.n	80070ea <memmove+0x2a>
 80070e8:	bd10      	pop	{r4, pc}
 80070ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070f2:	e7f7      	b.n	80070e4 <memmove+0x24>

080070f4 <__malloc_lock>:
 80070f4:	4801      	ldr	r0, [pc, #4]	; (80070fc <__malloc_lock+0x8>)
 80070f6:	f000 bc17 	b.w	8007928 <__retarget_lock_acquire_recursive>
 80070fa:	bf00      	nop
 80070fc:	20000364 	.word	0x20000364

08007100 <__malloc_unlock>:
 8007100:	4801      	ldr	r0, [pc, #4]	; (8007108 <__malloc_unlock+0x8>)
 8007102:	f000 bc12 	b.w	800792a <__retarget_lock_release_recursive>
 8007106:	bf00      	nop
 8007108:	20000364 	.word	0x20000364

0800710c <_realloc_r>:
 800710c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710e:	4607      	mov	r7, r0
 8007110:	4614      	mov	r4, r2
 8007112:	460e      	mov	r6, r1
 8007114:	b921      	cbnz	r1, 8007120 <_realloc_r+0x14>
 8007116:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800711a:	4611      	mov	r1, r2
 800711c:	f7ff bdc8 	b.w	8006cb0 <_malloc_r>
 8007120:	b922      	cbnz	r2, 800712c <_realloc_r+0x20>
 8007122:	f7ff fd75 	bl	8006c10 <_free_r>
 8007126:	4625      	mov	r5, r4
 8007128:	4628      	mov	r0, r5
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712c:	f000 fc62 	bl	80079f4 <_malloc_usable_size_r>
 8007130:	42a0      	cmp	r0, r4
 8007132:	d20f      	bcs.n	8007154 <_realloc_r+0x48>
 8007134:	4621      	mov	r1, r4
 8007136:	4638      	mov	r0, r7
 8007138:	f7ff fdba 	bl	8006cb0 <_malloc_r>
 800713c:	4605      	mov	r5, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d0f2      	beq.n	8007128 <_realloc_r+0x1c>
 8007142:	4631      	mov	r1, r6
 8007144:	4622      	mov	r2, r4
 8007146:	f7ff f9c7 	bl	80064d8 <memcpy>
 800714a:	4631      	mov	r1, r6
 800714c:	4638      	mov	r0, r7
 800714e:	f7ff fd5f 	bl	8006c10 <_free_r>
 8007152:	e7e9      	b.n	8007128 <_realloc_r+0x1c>
 8007154:	4635      	mov	r5, r6
 8007156:	e7e7      	b.n	8007128 <_realloc_r+0x1c>

08007158 <__sfputc_r>:
 8007158:	6893      	ldr	r3, [r2, #8]
 800715a:	3b01      	subs	r3, #1
 800715c:	2b00      	cmp	r3, #0
 800715e:	b410      	push	{r4}
 8007160:	6093      	str	r3, [r2, #8]
 8007162:	da08      	bge.n	8007176 <__sfputc_r+0x1e>
 8007164:	6994      	ldr	r4, [r2, #24]
 8007166:	42a3      	cmp	r3, r4
 8007168:	db01      	blt.n	800716e <__sfputc_r+0x16>
 800716a:	290a      	cmp	r1, #10
 800716c:	d103      	bne.n	8007176 <__sfputc_r+0x1e>
 800716e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007172:	f000 b94b 	b.w	800740c <__swbuf_r>
 8007176:	6813      	ldr	r3, [r2, #0]
 8007178:	1c58      	adds	r0, r3, #1
 800717a:	6010      	str	r0, [r2, #0]
 800717c:	7019      	strb	r1, [r3, #0]
 800717e:	4608      	mov	r0, r1
 8007180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007184:	4770      	bx	lr

08007186 <__sfputs_r>:
 8007186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	4614      	mov	r4, r2
 800718e:	18d5      	adds	r5, r2, r3
 8007190:	42ac      	cmp	r4, r5
 8007192:	d101      	bne.n	8007198 <__sfputs_r+0x12>
 8007194:	2000      	movs	r0, #0
 8007196:	e007      	b.n	80071a8 <__sfputs_r+0x22>
 8007198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719c:	463a      	mov	r2, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ffda 	bl	8007158 <__sfputc_r>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	d1f3      	bne.n	8007190 <__sfputs_r+0xa>
 80071a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080071ac <_vfiprintf_r>:
 80071ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460d      	mov	r5, r1
 80071b2:	b09d      	sub	sp, #116	; 0x74
 80071b4:	4614      	mov	r4, r2
 80071b6:	4698      	mov	r8, r3
 80071b8:	4606      	mov	r6, r0
 80071ba:	b118      	cbz	r0, 80071c4 <_vfiprintf_r+0x18>
 80071bc:	6983      	ldr	r3, [r0, #24]
 80071be:	b90b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x18>
 80071c0:	f000 fb14 	bl	80077ec <__sinit>
 80071c4:	4b89      	ldr	r3, [pc, #548]	; (80073ec <_vfiprintf_r+0x240>)
 80071c6:	429d      	cmp	r5, r3
 80071c8:	d11b      	bne.n	8007202 <_vfiprintf_r+0x56>
 80071ca:	6875      	ldr	r5, [r6, #4]
 80071cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071ce:	07d9      	lsls	r1, r3, #31
 80071d0:	d405      	bmi.n	80071de <_vfiprintf_r+0x32>
 80071d2:	89ab      	ldrh	r3, [r5, #12]
 80071d4:	059a      	lsls	r2, r3, #22
 80071d6:	d402      	bmi.n	80071de <_vfiprintf_r+0x32>
 80071d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071da:	f000 fba5 	bl	8007928 <__retarget_lock_acquire_recursive>
 80071de:	89ab      	ldrh	r3, [r5, #12]
 80071e0:	071b      	lsls	r3, r3, #28
 80071e2:	d501      	bpl.n	80071e8 <_vfiprintf_r+0x3c>
 80071e4:	692b      	ldr	r3, [r5, #16]
 80071e6:	b9eb      	cbnz	r3, 8007224 <_vfiprintf_r+0x78>
 80071e8:	4629      	mov	r1, r5
 80071ea:	4630      	mov	r0, r6
 80071ec:	f000 f96e 	bl	80074cc <__swsetup_r>
 80071f0:	b1c0      	cbz	r0, 8007224 <_vfiprintf_r+0x78>
 80071f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071f4:	07dc      	lsls	r4, r3, #31
 80071f6:	d50e      	bpl.n	8007216 <_vfiprintf_r+0x6a>
 80071f8:	f04f 30ff 	mov.w	r0, #4294967295
 80071fc:	b01d      	add	sp, #116	; 0x74
 80071fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007202:	4b7b      	ldr	r3, [pc, #492]	; (80073f0 <_vfiprintf_r+0x244>)
 8007204:	429d      	cmp	r5, r3
 8007206:	d101      	bne.n	800720c <_vfiprintf_r+0x60>
 8007208:	68b5      	ldr	r5, [r6, #8]
 800720a:	e7df      	b.n	80071cc <_vfiprintf_r+0x20>
 800720c:	4b79      	ldr	r3, [pc, #484]	; (80073f4 <_vfiprintf_r+0x248>)
 800720e:	429d      	cmp	r5, r3
 8007210:	bf08      	it	eq
 8007212:	68f5      	ldreq	r5, [r6, #12]
 8007214:	e7da      	b.n	80071cc <_vfiprintf_r+0x20>
 8007216:	89ab      	ldrh	r3, [r5, #12]
 8007218:	0598      	lsls	r0, r3, #22
 800721a:	d4ed      	bmi.n	80071f8 <_vfiprintf_r+0x4c>
 800721c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800721e:	f000 fb84 	bl	800792a <__retarget_lock_release_recursive>
 8007222:	e7e9      	b.n	80071f8 <_vfiprintf_r+0x4c>
 8007224:	2300      	movs	r3, #0
 8007226:	9309      	str	r3, [sp, #36]	; 0x24
 8007228:	2320      	movs	r3, #32
 800722a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800722e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007232:	2330      	movs	r3, #48	; 0x30
 8007234:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80073f8 <_vfiprintf_r+0x24c>
 8007238:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800723c:	f04f 0901 	mov.w	r9, #1
 8007240:	4623      	mov	r3, r4
 8007242:	469a      	mov	sl, r3
 8007244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007248:	b10a      	cbz	r2, 800724e <_vfiprintf_r+0xa2>
 800724a:	2a25      	cmp	r2, #37	; 0x25
 800724c:	d1f9      	bne.n	8007242 <_vfiprintf_r+0x96>
 800724e:	ebba 0b04 	subs.w	fp, sl, r4
 8007252:	d00b      	beq.n	800726c <_vfiprintf_r+0xc0>
 8007254:	465b      	mov	r3, fp
 8007256:	4622      	mov	r2, r4
 8007258:	4629      	mov	r1, r5
 800725a:	4630      	mov	r0, r6
 800725c:	f7ff ff93 	bl	8007186 <__sfputs_r>
 8007260:	3001      	adds	r0, #1
 8007262:	f000 80aa 	beq.w	80073ba <_vfiprintf_r+0x20e>
 8007266:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007268:	445a      	add	r2, fp
 800726a:	9209      	str	r2, [sp, #36]	; 0x24
 800726c:	f89a 3000 	ldrb.w	r3, [sl]
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 80a2 	beq.w	80073ba <_vfiprintf_r+0x20e>
 8007276:	2300      	movs	r3, #0
 8007278:	f04f 32ff 	mov.w	r2, #4294967295
 800727c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007280:	f10a 0a01 	add.w	sl, sl, #1
 8007284:	9304      	str	r3, [sp, #16]
 8007286:	9307      	str	r3, [sp, #28]
 8007288:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800728c:	931a      	str	r3, [sp, #104]	; 0x68
 800728e:	4654      	mov	r4, sl
 8007290:	2205      	movs	r2, #5
 8007292:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007296:	4858      	ldr	r0, [pc, #352]	; (80073f8 <_vfiprintf_r+0x24c>)
 8007298:	f7f8 ffaa 	bl	80001f0 <memchr>
 800729c:	9a04      	ldr	r2, [sp, #16]
 800729e:	b9d8      	cbnz	r0, 80072d8 <_vfiprintf_r+0x12c>
 80072a0:	06d1      	lsls	r1, r2, #27
 80072a2:	bf44      	itt	mi
 80072a4:	2320      	movmi	r3, #32
 80072a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072aa:	0713      	lsls	r3, r2, #28
 80072ac:	bf44      	itt	mi
 80072ae:	232b      	movmi	r3, #43	; 0x2b
 80072b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072b4:	f89a 3000 	ldrb.w	r3, [sl]
 80072b8:	2b2a      	cmp	r3, #42	; 0x2a
 80072ba:	d015      	beq.n	80072e8 <_vfiprintf_r+0x13c>
 80072bc:	9a07      	ldr	r2, [sp, #28]
 80072be:	4654      	mov	r4, sl
 80072c0:	2000      	movs	r0, #0
 80072c2:	f04f 0c0a 	mov.w	ip, #10
 80072c6:	4621      	mov	r1, r4
 80072c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072cc:	3b30      	subs	r3, #48	; 0x30
 80072ce:	2b09      	cmp	r3, #9
 80072d0:	d94e      	bls.n	8007370 <_vfiprintf_r+0x1c4>
 80072d2:	b1b0      	cbz	r0, 8007302 <_vfiprintf_r+0x156>
 80072d4:	9207      	str	r2, [sp, #28]
 80072d6:	e014      	b.n	8007302 <_vfiprintf_r+0x156>
 80072d8:	eba0 0308 	sub.w	r3, r0, r8
 80072dc:	fa09 f303 	lsl.w	r3, r9, r3
 80072e0:	4313      	orrs	r3, r2
 80072e2:	9304      	str	r3, [sp, #16]
 80072e4:	46a2      	mov	sl, r4
 80072e6:	e7d2      	b.n	800728e <_vfiprintf_r+0xe2>
 80072e8:	9b03      	ldr	r3, [sp, #12]
 80072ea:	1d19      	adds	r1, r3, #4
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	9103      	str	r1, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	bfbb      	ittet	lt
 80072f4:	425b      	neglt	r3, r3
 80072f6:	f042 0202 	orrlt.w	r2, r2, #2
 80072fa:	9307      	strge	r3, [sp, #28]
 80072fc:	9307      	strlt	r3, [sp, #28]
 80072fe:	bfb8      	it	lt
 8007300:	9204      	strlt	r2, [sp, #16]
 8007302:	7823      	ldrb	r3, [r4, #0]
 8007304:	2b2e      	cmp	r3, #46	; 0x2e
 8007306:	d10c      	bne.n	8007322 <_vfiprintf_r+0x176>
 8007308:	7863      	ldrb	r3, [r4, #1]
 800730a:	2b2a      	cmp	r3, #42	; 0x2a
 800730c:	d135      	bne.n	800737a <_vfiprintf_r+0x1ce>
 800730e:	9b03      	ldr	r3, [sp, #12]
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	9203      	str	r2, [sp, #12]
 8007316:	2b00      	cmp	r3, #0
 8007318:	bfb8      	it	lt
 800731a:	f04f 33ff 	movlt.w	r3, #4294967295
 800731e:	3402      	adds	r4, #2
 8007320:	9305      	str	r3, [sp, #20]
 8007322:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007408 <_vfiprintf_r+0x25c>
 8007326:	7821      	ldrb	r1, [r4, #0]
 8007328:	2203      	movs	r2, #3
 800732a:	4650      	mov	r0, sl
 800732c:	f7f8 ff60 	bl	80001f0 <memchr>
 8007330:	b140      	cbz	r0, 8007344 <_vfiprintf_r+0x198>
 8007332:	2340      	movs	r3, #64	; 0x40
 8007334:	eba0 000a 	sub.w	r0, r0, sl
 8007338:	fa03 f000 	lsl.w	r0, r3, r0
 800733c:	9b04      	ldr	r3, [sp, #16]
 800733e:	4303      	orrs	r3, r0
 8007340:	3401      	adds	r4, #1
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007348:	482c      	ldr	r0, [pc, #176]	; (80073fc <_vfiprintf_r+0x250>)
 800734a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800734e:	2206      	movs	r2, #6
 8007350:	f7f8 ff4e 	bl	80001f0 <memchr>
 8007354:	2800      	cmp	r0, #0
 8007356:	d03f      	beq.n	80073d8 <_vfiprintf_r+0x22c>
 8007358:	4b29      	ldr	r3, [pc, #164]	; (8007400 <_vfiprintf_r+0x254>)
 800735a:	bb1b      	cbnz	r3, 80073a4 <_vfiprintf_r+0x1f8>
 800735c:	9b03      	ldr	r3, [sp, #12]
 800735e:	3307      	adds	r3, #7
 8007360:	f023 0307 	bic.w	r3, r3, #7
 8007364:	3308      	adds	r3, #8
 8007366:	9303      	str	r3, [sp, #12]
 8007368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800736a:	443b      	add	r3, r7
 800736c:	9309      	str	r3, [sp, #36]	; 0x24
 800736e:	e767      	b.n	8007240 <_vfiprintf_r+0x94>
 8007370:	fb0c 3202 	mla	r2, ip, r2, r3
 8007374:	460c      	mov	r4, r1
 8007376:	2001      	movs	r0, #1
 8007378:	e7a5      	b.n	80072c6 <_vfiprintf_r+0x11a>
 800737a:	2300      	movs	r3, #0
 800737c:	3401      	adds	r4, #1
 800737e:	9305      	str	r3, [sp, #20]
 8007380:	4619      	mov	r1, r3
 8007382:	f04f 0c0a 	mov.w	ip, #10
 8007386:	4620      	mov	r0, r4
 8007388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800738c:	3a30      	subs	r2, #48	; 0x30
 800738e:	2a09      	cmp	r2, #9
 8007390:	d903      	bls.n	800739a <_vfiprintf_r+0x1ee>
 8007392:	2b00      	cmp	r3, #0
 8007394:	d0c5      	beq.n	8007322 <_vfiprintf_r+0x176>
 8007396:	9105      	str	r1, [sp, #20]
 8007398:	e7c3      	b.n	8007322 <_vfiprintf_r+0x176>
 800739a:	fb0c 2101 	mla	r1, ip, r1, r2
 800739e:	4604      	mov	r4, r0
 80073a0:	2301      	movs	r3, #1
 80073a2:	e7f0      	b.n	8007386 <_vfiprintf_r+0x1da>
 80073a4:	ab03      	add	r3, sp, #12
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	462a      	mov	r2, r5
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <_vfiprintf_r+0x258>)
 80073ac:	a904      	add	r1, sp, #16
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7fd fe24 	bl	8004ffc <_printf_float>
 80073b4:	4607      	mov	r7, r0
 80073b6:	1c78      	adds	r0, r7, #1
 80073b8:	d1d6      	bne.n	8007368 <_vfiprintf_r+0x1bc>
 80073ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073bc:	07d9      	lsls	r1, r3, #31
 80073be:	d405      	bmi.n	80073cc <_vfiprintf_r+0x220>
 80073c0:	89ab      	ldrh	r3, [r5, #12]
 80073c2:	059a      	lsls	r2, r3, #22
 80073c4:	d402      	bmi.n	80073cc <_vfiprintf_r+0x220>
 80073c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073c8:	f000 faaf 	bl	800792a <__retarget_lock_release_recursive>
 80073cc:	89ab      	ldrh	r3, [r5, #12]
 80073ce:	065b      	lsls	r3, r3, #25
 80073d0:	f53f af12 	bmi.w	80071f8 <_vfiprintf_r+0x4c>
 80073d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073d6:	e711      	b.n	80071fc <_vfiprintf_r+0x50>
 80073d8:	ab03      	add	r3, sp, #12
 80073da:	9300      	str	r3, [sp, #0]
 80073dc:	462a      	mov	r2, r5
 80073de:	4b09      	ldr	r3, [pc, #36]	; (8007404 <_vfiprintf_r+0x258>)
 80073e0:	a904      	add	r1, sp, #16
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7fe f8ae 	bl	8005544 <_printf_i>
 80073e8:	e7e4      	b.n	80073b4 <_vfiprintf_r+0x208>
 80073ea:	bf00      	nop
 80073ec:	08008154 	.word	0x08008154
 80073f0:	08008174 	.word	0x08008174
 80073f4:	08008134 	.word	0x08008134
 80073f8:	08007fdc 	.word	0x08007fdc
 80073fc:	08007fe6 	.word	0x08007fe6
 8007400:	08004ffd 	.word	0x08004ffd
 8007404:	08007187 	.word	0x08007187
 8007408:	08007fe2 	.word	0x08007fe2

0800740c <__swbuf_r>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	460e      	mov	r6, r1
 8007410:	4614      	mov	r4, r2
 8007412:	4605      	mov	r5, r0
 8007414:	b118      	cbz	r0, 800741e <__swbuf_r+0x12>
 8007416:	6983      	ldr	r3, [r0, #24]
 8007418:	b90b      	cbnz	r3, 800741e <__swbuf_r+0x12>
 800741a:	f000 f9e7 	bl	80077ec <__sinit>
 800741e:	4b21      	ldr	r3, [pc, #132]	; (80074a4 <__swbuf_r+0x98>)
 8007420:	429c      	cmp	r4, r3
 8007422:	d12b      	bne.n	800747c <__swbuf_r+0x70>
 8007424:	686c      	ldr	r4, [r5, #4]
 8007426:	69a3      	ldr	r3, [r4, #24]
 8007428:	60a3      	str	r3, [r4, #8]
 800742a:	89a3      	ldrh	r3, [r4, #12]
 800742c:	071a      	lsls	r2, r3, #28
 800742e:	d52f      	bpl.n	8007490 <__swbuf_r+0x84>
 8007430:	6923      	ldr	r3, [r4, #16]
 8007432:	b36b      	cbz	r3, 8007490 <__swbuf_r+0x84>
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	6820      	ldr	r0, [r4, #0]
 8007438:	1ac0      	subs	r0, r0, r3
 800743a:	6963      	ldr	r3, [r4, #20]
 800743c:	b2f6      	uxtb	r6, r6
 800743e:	4283      	cmp	r3, r0
 8007440:	4637      	mov	r7, r6
 8007442:	dc04      	bgt.n	800744e <__swbuf_r+0x42>
 8007444:	4621      	mov	r1, r4
 8007446:	4628      	mov	r0, r5
 8007448:	f000 f93c 	bl	80076c4 <_fflush_r>
 800744c:	bb30      	cbnz	r0, 800749c <__swbuf_r+0x90>
 800744e:	68a3      	ldr	r3, [r4, #8]
 8007450:	3b01      	subs	r3, #1
 8007452:	60a3      	str	r3, [r4, #8]
 8007454:	6823      	ldr	r3, [r4, #0]
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	6022      	str	r2, [r4, #0]
 800745a:	701e      	strb	r6, [r3, #0]
 800745c:	6963      	ldr	r3, [r4, #20]
 800745e:	3001      	adds	r0, #1
 8007460:	4283      	cmp	r3, r0
 8007462:	d004      	beq.n	800746e <__swbuf_r+0x62>
 8007464:	89a3      	ldrh	r3, [r4, #12]
 8007466:	07db      	lsls	r3, r3, #31
 8007468:	d506      	bpl.n	8007478 <__swbuf_r+0x6c>
 800746a:	2e0a      	cmp	r6, #10
 800746c:	d104      	bne.n	8007478 <__swbuf_r+0x6c>
 800746e:	4621      	mov	r1, r4
 8007470:	4628      	mov	r0, r5
 8007472:	f000 f927 	bl	80076c4 <_fflush_r>
 8007476:	b988      	cbnz	r0, 800749c <__swbuf_r+0x90>
 8007478:	4638      	mov	r0, r7
 800747a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <__swbuf_r+0x9c>)
 800747e:	429c      	cmp	r4, r3
 8007480:	d101      	bne.n	8007486 <__swbuf_r+0x7a>
 8007482:	68ac      	ldr	r4, [r5, #8]
 8007484:	e7cf      	b.n	8007426 <__swbuf_r+0x1a>
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <__swbuf_r+0xa0>)
 8007488:	429c      	cmp	r4, r3
 800748a:	bf08      	it	eq
 800748c:	68ec      	ldreq	r4, [r5, #12]
 800748e:	e7ca      	b.n	8007426 <__swbuf_r+0x1a>
 8007490:	4621      	mov	r1, r4
 8007492:	4628      	mov	r0, r5
 8007494:	f000 f81a 	bl	80074cc <__swsetup_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0cb      	beq.n	8007434 <__swbuf_r+0x28>
 800749c:	f04f 37ff 	mov.w	r7, #4294967295
 80074a0:	e7ea      	b.n	8007478 <__swbuf_r+0x6c>
 80074a2:	bf00      	nop
 80074a4:	08008154 	.word	0x08008154
 80074a8:	08008174 	.word	0x08008174
 80074ac:	08008134 	.word	0x08008134

080074b0 <__ascii_wctomb>:
 80074b0:	b149      	cbz	r1, 80074c6 <__ascii_wctomb+0x16>
 80074b2:	2aff      	cmp	r2, #255	; 0xff
 80074b4:	bf85      	ittet	hi
 80074b6:	238a      	movhi	r3, #138	; 0x8a
 80074b8:	6003      	strhi	r3, [r0, #0]
 80074ba:	700a      	strbls	r2, [r1, #0]
 80074bc:	f04f 30ff 	movhi.w	r0, #4294967295
 80074c0:	bf98      	it	ls
 80074c2:	2001      	movls	r0, #1
 80074c4:	4770      	bx	lr
 80074c6:	4608      	mov	r0, r1
 80074c8:	4770      	bx	lr
	...

080074cc <__swsetup_r>:
 80074cc:	4b32      	ldr	r3, [pc, #200]	; (8007598 <__swsetup_r+0xcc>)
 80074ce:	b570      	push	{r4, r5, r6, lr}
 80074d0:	681d      	ldr	r5, [r3, #0]
 80074d2:	4606      	mov	r6, r0
 80074d4:	460c      	mov	r4, r1
 80074d6:	b125      	cbz	r5, 80074e2 <__swsetup_r+0x16>
 80074d8:	69ab      	ldr	r3, [r5, #24]
 80074da:	b913      	cbnz	r3, 80074e2 <__swsetup_r+0x16>
 80074dc:	4628      	mov	r0, r5
 80074de:	f000 f985 	bl	80077ec <__sinit>
 80074e2:	4b2e      	ldr	r3, [pc, #184]	; (800759c <__swsetup_r+0xd0>)
 80074e4:	429c      	cmp	r4, r3
 80074e6:	d10f      	bne.n	8007508 <__swsetup_r+0x3c>
 80074e8:	686c      	ldr	r4, [r5, #4]
 80074ea:	89a3      	ldrh	r3, [r4, #12]
 80074ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074f0:	0719      	lsls	r1, r3, #28
 80074f2:	d42c      	bmi.n	800754e <__swsetup_r+0x82>
 80074f4:	06dd      	lsls	r5, r3, #27
 80074f6:	d411      	bmi.n	800751c <__swsetup_r+0x50>
 80074f8:	2309      	movs	r3, #9
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	f04f 30ff 	mov.w	r0, #4294967295
 8007506:	e03e      	b.n	8007586 <__swsetup_r+0xba>
 8007508:	4b25      	ldr	r3, [pc, #148]	; (80075a0 <__swsetup_r+0xd4>)
 800750a:	429c      	cmp	r4, r3
 800750c:	d101      	bne.n	8007512 <__swsetup_r+0x46>
 800750e:	68ac      	ldr	r4, [r5, #8]
 8007510:	e7eb      	b.n	80074ea <__swsetup_r+0x1e>
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <__swsetup_r+0xd8>)
 8007514:	429c      	cmp	r4, r3
 8007516:	bf08      	it	eq
 8007518:	68ec      	ldreq	r4, [r5, #12]
 800751a:	e7e6      	b.n	80074ea <__swsetup_r+0x1e>
 800751c:	0758      	lsls	r0, r3, #29
 800751e:	d512      	bpl.n	8007546 <__swsetup_r+0x7a>
 8007520:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007522:	b141      	cbz	r1, 8007536 <__swsetup_r+0x6a>
 8007524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__swsetup_r+0x66>
 800752c:	4630      	mov	r0, r6
 800752e:	f7ff fb6f 	bl	8006c10 <_free_r>
 8007532:	2300      	movs	r3, #0
 8007534:	6363      	str	r3, [r4, #52]	; 0x34
 8007536:	89a3      	ldrh	r3, [r4, #12]
 8007538:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800753c:	81a3      	strh	r3, [r4, #12]
 800753e:	2300      	movs	r3, #0
 8007540:	6063      	str	r3, [r4, #4]
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	f043 0308 	orr.w	r3, r3, #8
 800754c:	81a3      	strh	r3, [r4, #12]
 800754e:	6923      	ldr	r3, [r4, #16]
 8007550:	b94b      	cbnz	r3, 8007566 <__swsetup_r+0x9a>
 8007552:	89a3      	ldrh	r3, [r4, #12]
 8007554:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800755c:	d003      	beq.n	8007566 <__swsetup_r+0x9a>
 800755e:	4621      	mov	r1, r4
 8007560:	4630      	mov	r0, r6
 8007562:	f000 fa07 	bl	8007974 <__smakebuf_r>
 8007566:	89a0      	ldrh	r0, [r4, #12]
 8007568:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800756c:	f010 0301 	ands.w	r3, r0, #1
 8007570:	d00a      	beq.n	8007588 <__swsetup_r+0xbc>
 8007572:	2300      	movs	r3, #0
 8007574:	60a3      	str	r3, [r4, #8]
 8007576:	6963      	ldr	r3, [r4, #20]
 8007578:	425b      	negs	r3, r3
 800757a:	61a3      	str	r3, [r4, #24]
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	b943      	cbnz	r3, 8007592 <__swsetup_r+0xc6>
 8007580:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007584:	d1ba      	bne.n	80074fc <__swsetup_r+0x30>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	0781      	lsls	r1, r0, #30
 800758a:	bf58      	it	pl
 800758c:	6963      	ldrpl	r3, [r4, #20]
 800758e:	60a3      	str	r3, [r4, #8]
 8007590:	e7f4      	b.n	800757c <__swsetup_r+0xb0>
 8007592:	2000      	movs	r0, #0
 8007594:	e7f7      	b.n	8007586 <__swsetup_r+0xba>
 8007596:	bf00      	nop
 8007598:	2000000c 	.word	0x2000000c
 800759c:	08008154 	.word	0x08008154
 80075a0:	08008174 	.word	0x08008174
 80075a4:	08008134 	.word	0x08008134

080075a8 <abort>:
 80075a8:	b508      	push	{r3, lr}
 80075aa:	2006      	movs	r0, #6
 80075ac:	f000 fa52 	bl	8007a54 <raise>
 80075b0:	2001      	movs	r0, #1
 80075b2:	f7fd fb67 	bl	8004c84 <_exit>
	...

080075b8 <__sflush_r>:
 80075b8:	898a      	ldrh	r2, [r1, #12]
 80075ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075be:	4605      	mov	r5, r0
 80075c0:	0710      	lsls	r0, r2, #28
 80075c2:	460c      	mov	r4, r1
 80075c4:	d458      	bmi.n	8007678 <__sflush_r+0xc0>
 80075c6:	684b      	ldr	r3, [r1, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	dc05      	bgt.n	80075d8 <__sflush_r+0x20>
 80075cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	dc02      	bgt.n	80075d8 <__sflush_r+0x20>
 80075d2:	2000      	movs	r0, #0
 80075d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075da:	2e00      	cmp	r6, #0
 80075dc:	d0f9      	beq.n	80075d2 <__sflush_r+0x1a>
 80075de:	2300      	movs	r3, #0
 80075e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e4:	682f      	ldr	r7, [r5, #0]
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	d032      	beq.n	8007650 <__sflush_r+0x98>
 80075ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075ec:	89a3      	ldrh	r3, [r4, #12]
 80075ee:	075a      	lsls	r2, r3, #29
 80075f0:	d505      	bpl.n	80075fe <__sflush_r+0x46>
 80075f2:	6863      	ldr	r3, [r4, #4]
 80075f4:	1ac0      	subs	r0, r0, r3
 80075f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075f8:	b10b      	cbz	r3, 80075fe <__sflush_r+0x46>
 80075fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80075fc:	1ac0      	subs	r0, r0, r3
 80075fe:	2300      	movs	r3, #0
 8007600:	4602      	mov	r2, r0
 8007602:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007604:	6a21      	ldr	r1, [r4, #32]
 8007606:	4628      	mov	r0, r5
 8007608:	47b0      	blx	r6
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	89a3      	ldrh	r3, [r4, #12]
 800760e:	d106      	bne.n	800761e <__sflush_r+0x66>
 8007610:	6829      	ldr	r1, [r5, #0]
 8007612:	291d      	cmp	r1, #29
 8007614:	d82c      	bhi.n	8007670 <__sflush_r+0xb8>
 8007616:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <__sflush_r+0x108>)
 8007618:	40ca      	lsrs	r2, r1
 800761a:	07d6      	lsls	r6, r2, #31
 800761c:	d528      	bpl.n	8007670 <__sflush_r+0xb8>
 800761e:	2200      	movs	r2, #0
 8007620:	6062      	str	r2, [r4, #4]
 8007622:	04d9      	lsls	r1, r3, #19
 8007624:	6922      	ldr	r2, [r4, #16]
 8007626:	6022      	str	r2, [r4, #0]
 8007628:	d504      	bpl.n	8007634 <__sflush_r+0x7c>
 800762a:	1c42      	adds	r2, r0, #1
 800762c:	d101      	bne.n	8007632 <__sflush_r+0x7a>
 800762e:	682b      	ldr	r3, [r5, #0]
 8007630:	b903      	cbnz	r3, 8007634 <__sflush_r+0x7c>
 8007632:	6560      	str	r0, [r4, #84]	; 0x54
 8007634:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007636:	602f      	str	r7, [r5, #0]
 8007638:	2900      	cmp	r1, #0
 800763a:	d0ca      	beq.n	80075d2 <__sflush_r+0x1a>
 800763c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007640:	4299      	cmp	r1, r3
 8007642:	d002      	beq.n	800764a <__sflush_r+0x92>
 8007644:	4628      	mov	r0, r5
 8007646:	f7ff fae3 	bl	8006c10 <_free_r>
 800764a:	2000      	movs	r0, #0
 800764c:	6360      	str	r0, [r4, #52]	; 0x34
 800764e:	e7c1      	b.n	80075d4 <__sflush_r+0x1c>
 8007650:	6a21      	ldr	r1, [r4, #32]
 8007652:	2301      	movs	r3, #1
 8007654:	4628      	mov	r0, r5
 8007656:	47b0      	blx	r6
 8007658:	1c41      	adds	r1, r0, #1
 800765a:	d1c7      	bne.n	80075ec <__sflush_r+0x34>
 800765c:	682b      	ldr	r3, [r5, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d0c4      	beq.n	80075ec <__sflush_r+0x34>
 8007662:	2b1d      	cmp	r3, #29
 8007664:	d001      	beq.n	800766a <__sflush_r+0xb2>
 8007666:	2b16      	cmp	r3, #22
 8007668:	d101      	bne.n	800766e <__sflush_r+0xb6>
 800766a:	602f      	str	r7, [r5, #0]
 800766c:	e7b1      	b.n	80075d2 <__sflush_r+0x1a>
 800766e:	89a3      	ldrh	r3, [r4, #12]
 8007670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007674:	81a3      	strh	r3, [r4, #12]
 8007676:	e7ad      	b.n	80075d4 <__sflush_r+0x1c>
 8007678:	690f      	ldr	r7, [r1, #16]
 800767a:	2f00      	cmp	r7, #0
 800767c:	d0a9      	beq.n	80075d2 <__sflush_r+0x1a>
 800767e:	0793      	lsls	r3, r2, #30
 8007680:	680e      	ldr	r6, [r1, #0]
 8007682:	bf08      	it	eq
 8007684:	694b      	ldreq	r3, [r1, #20]
 8007686:	600f      	str	r7, [r1, #0]
 8007688:	bf18      	it	ne
 800768a:	2300      	movne	r3, #0
 800768c:	eba6 0807 	sub.w	r8, r6, r7
 8007690:	608b      	str	r3, [r1, #8]
 8007692:	f1b8 0f00 	cmp.w	r8, #0
 8007696:	dd9c      	ble.n	80075d2 <__sflush_r+0x1a>
 8007698:	6a21      	ldr	r1, [r4, #32]
 800769a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800769c:	4643      	mov	r3, r8
 800769e:	463a      	mov	r2, r7
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b0      	blx	r6
 80076a4:	2800      	cmp	r0, #0
 80076a6:	dc06      	bgt.n	80076b6 <__sflush_r+0xfe>
 80076a8:	89a3      	ldrh	r3, [r4, #12]
 80076aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	e78e      	b.n	80075d4 <__sflush_r+0x1c>
 80076b6:	4407      	add	r7, r0
 80076b8:	eba8 0800 	sub.w	r8, r8, r0
 80076bc:	e7e9      	b.n	8007692 <__sflush_r+0xda>
 80076be:	bf00      	nop
 80076c0:	20400001 	.word	0x20400001

080076c4 <_fflush_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	690b      	ldr	r3, [r1, #16]
 80076c8:	4605      	mov	r5, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	b913      	cbnz	r3, 80076d4 <_fflush_r+0x10>
 80076ce:	2500      	movs	r5, #0
 80076d0:	4628      	mov	r0, r5
 80076d2:	bd38      	pop	{r3, r4, r5, pc}
 80076d4:	b118      	cbz	r0, 80076de <_fflush_r+0x1a>
 80076d6:	6983      	ldr	r3, [r0, #24]
 80076d8:	b90b      	cbnz	r3, 80076de <_fflush_r+0x1a>
 80076da:	f000 f887 	bl	80077ec <__sinit>
 80076de:	4b14      	ldr	r3, [pc, #80]	; (8007730 <_fflush_r+0x6c>)
 80076e0:	429c      	cmp	r4, r3
 80076e2:	d11b      	bne.n	800771c <_fflush_r+0x58>
 80076e4:	686c      	ldr	r4, [r5, #4]
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d0ef      	beq.n	80076ce <_fflush_r+0xa>
 80076ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f0:	07d0      	lsls	r0, r2, #31
 80076f2:	d404      	bmi.n	80076fe <_fflush_r+0x3a>
 80076f4:	0599      	lsls	r1, r3, #22
 80076f6:	d402      	bmi.n	80076fe <_fflush_r+0x3a>
 80076f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fa:	f000 f915 	bl	8007928 <__retarget_lock_acquire_recursive>
 80076fe:	4628      	mov	r0, r5
 8007700:	4621      	mov	r1, r4
 8007702:	f7ff ff59 	bl	80075b8 <__sflush_r>
 8007706:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007708:	07da      	lsls	r2, r3, #31
 800770a:	4605      	mov	r5, r0
 800770c:	d4e0      	bmi.n	80076d0 <_fflush_r+0xc>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	059b      	lsls	r3, r3, #22
 8007712:	d4dd      	bmi.n	80076d0 <_fflush_r+0xc>
 8007714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007716:	f000 f908 	bl	800792a <__retarget_lock_release_recursive>
 800771a:	e7d9      	b.n	80076d0 <_fflush_r+0xc>
 800771c:	4b05      	ldr	r3, [pc, #20]	; (8007734 <_fflush_r+0x70>)
 800771e:	429c      	cmp	r4, r3
 8007720:	d101      	bne.n	8007726 <_fflush_r+0x62>
 8007722:	68ac      	ldr	r4, [r5, #8]
 8007724:	e7df      	b.n	80076e6 <_fflush_r+0x22>
 8007726:	4b04      	ldr	r3, [pc, #16]	; (8007738 <_fflush_r+0x74>)
 8007728:	429c      	cmp	r4, r3
 800772a:	bf08      	it	eq
 800772c:	68ec      	ldreq	r4, [r5, #12]
 800772e:	e7da      	b.n	80076e6 <_fflush_r+0x22>
 8007730:	08008154 	.word	0x08008154
 8007734:	08008174 	.word	0x08008174
 8007738:	08008134 	.word	0x08008134

0800773c <std>:
 800773c:	2300      	movs	r3, #0
 800773e:	b510      	push	{r4, lr}
 8007740:	4604      	mov	r4, r0
 8007742:	e9c0 3300 	strd	r3, r3, [r0]
 8007746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800774a:	6083      	str	r3, [r0, #8]
 800774c:	8181      	strh	r1, [r0, #12]
 800774e:	6643      	str	r3, [r0, #100]	; 0x64
 8007750:	81c2      	strh	r2, [r0, #14]
 8007752:	6183      	str	r3, [r0, #24]
 8007754:	4619      	mov	r1, r3
 8007756:	2208      	movs	r2, #8
 8007758:	305c      	adds	r0, #92	; 0x5c
 800775a:	f7fd fba7 	bl	8004eac <memset>
 800775e:	4b05      	ldr	r3, [pc, #20]	; (8007774 <std+0x38>)
 8007760:	6263      	str	r3, [r4, #36]	; 0x24
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <std+0x3c>)
 8007764:	62a3      	str	r3, [r4, #40]	; 0x28
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <std+0x40>)
 8007768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <std+0x44>)
 800776c:	6224      	str	r4, [r4, #32]
 800776e:	6323      	str	r3, [r4, #48]	; 0x30
 8007770:	bd10      	pop	{r4, pc}
 8007772:	bf00      	nop
 8007774:	08007a8d 	.word	0x08007a8d
 8007778:	08007aaf 	.word	0x08007aaf
 800777c:	08007ae7 	.word	0x08007ae7
 8007780:	08007b0b 	.word	0x08007b0b

08007784 <_cleanup_r>:
 8007784:	4901      	ldr	r1, [pc, #4]	; (800778c <_cleanup_r+0x8>)
 8007786:	f000 b8af 	b.w	80078e8 <_fwalk_reent>
 800778a:	bf00      	nop
 800778c:	080076c5 	.word	0x080076c5

08007790 <__sfmoreglue>:
 8007790:	b570      	push	{r4, r5, r6, lr}
 8007792:	1e4a      	subs	r2, r1, #1
 8007794:	2568      	movs	r5, #104	; 0x68
 8007796:	4355      	muls	r5, r2
 8007798:	460e      	mov	r6, r1
 800779a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800779e:	f7ff fa87 	bl	8006cb0 <_malloc_r>
 80077a2:	4604      	mov	r4, r0
 80077a4:	b140      	cbz	r0, 80077b8 <__sfmoreglue+0x28>
 80077a6:	2100      	movs	r1, #0
 80077a8:	e9c0 1600 	strd	r1, r6, [r0]
 80077ac:	300c      	adds	r0, #12
 80077ae:	60a0      	str	r0, [r4, #8]
 80077b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077b4:	f7fd fb7a 	bl	8004eac <memset>
 80077b8:	4620      	mov	r0, r4
 80077ba:	bd70      	pop	{r4, r5, r6, pc}

080077bc <__sfp_lock_acquire>:
 80077bc:	4801      	ldr	r0, [pc, #4]	; (80077c4 <__sfp_lock_acquire+0x8>)
 80077be:	f000 b8b3 	b.w	8007928 <__retarget_lock_acquire_recursive>
 80077c2:	bf00      	nop
 80077c4:	20000368 	.word	0x20000368

080077c8 <__sfp_lock_release>:
 80077c8:	4801      	ldr	r0, [pc, #4]	; (80077d0 <__sfp_lock_release+0x8>)
 80077ca:	f000 b8ae 	b.w	800792a <__retarget_lock_release_recursive>
 80077ce:	bf00      	nop
 80077d0:	20000368 	.word	0x20000368

080077d4 <__sinit_lock_acquire>:
 80077d4:	4801      	ldr	r0, [pc, #4]	; (80077dc <__sinit_lock_acquire+0x8>)
 80077d6:	f000 b8a7 	b.w	8007928 <__retarget_lock_acquire_recursive>
 80077da:	bf00      	nop
 80077dc:	20000363 	.word	0x20000363

080077e0 <__sinit_lock_release>:
 80077e0:	4801      	ldr	r0, [pc, #4]	; (80077e8 <__sinit_lock_release+0x8>)
 80077e2:	f000 b8a2 	b.w	800792a <__retarget_lock_release_recursive>
 80077e6:	bf00      	nop
 80077e8:	20000363 	.word	0x20000363

080077ec <__sinit>:
 80077ec:	b510      	push	{r4, lr}
 80077ee:	4604      	mov	r4, r0
 80077f0:	f7ff fff0 	bl	80077d4 <__sinit_lock_acquire>
 80077f4:	69a3      	ldr	r3, [r4, #24]
 80077f6:	b11b      	cbz	r3, 8007800 <__sinit+0x14>
 80077f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077fc:	f7ff bff0 	b.w	80077e0 <__sinit_lock_release>
 8007800:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007804:	6523      	str	r3, [r4, #80]	; 0x50
 8007806:	4b13      	ldr	r3, [pc, #76]	; (8007854 <__sinit+0x68>)
 8007808:	4a13      	ldr	r2, [pc, #76]	; (8007858 <__sinit+0x6c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	62a2      	str	r2, [r4, #40]	; 0x28
 800780e:	42a3      	cmp	r3, r4
 8007810:	bf04      	itt	eq
 8007812:	2301      	moveq	r3, #1
 8007814:	61a3      	streq	r3, [r4, #24]
 8007816:	4620      	mov	r0, r4
 8007818:	f000 f820 	bl	800785c <__sfp>
 800781c:	6060      	str	r0, [r4, #4]
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f81c 	bl	800785c <__sfp>
 8007824:	60a0      	str	r0, [r4, #8]
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f818 	bl	800785c <__sfp>
 800782c:	2200      	movs	r2, #0
 800782e:	60e0      	str	r0, [r4, #12]
 8007830:	2104      	movs	r1, #4
 8007832:	6860      	ldr	r0, [r4, #4]
 8007834:	f7ff ff82 	bl	800773c <std>
 8007838:	68a0      	ldr	r0, [r4, #8]
 800783a:	2201      	movs	r2, #1
 800783c:	2109      	movs	r1, #9
 800783e:	f7ff ff7d 	bl	800773c <std>
 8007842:	68e0      	ldr	r0, [r4, #12]
 8007844:	2202      	movs	r2, #2
 8007846:	2112      	movs	r1, #18
 8007848:	f7ff ff78 	bl	800773c <std>
 800784c:	2301      	movs	r3, #1
 800784e:	61a3      	str	r3, [r4, #24]
 8007850:	e7d2      	b.n	80077f8 <__sinit+0xc>
 8007852:	bf00      	nop
 8007854:	08007db4 	.word	0x08007db4
 8007858:	08007785 	.word	0x08007785

0800785c <__sfp>:
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	4607      	mov	r7, r0
 8007860:	f7ff ffac 	bl	80077bc <__sfp_lock_acquire>
 8007864:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <__sfp+0x84>)
 8007866:	681e      	ldr	r6, [r3, #0]
 8007868:	69b3      	ldr	r3, [r6, #24]
 800786a:	b913      	cbnz	r3, 8007872 <__sfp+0x16>
 800786c:	4630      	mov	r0, r6
 800786e:	f7ff ffbd 	bl	80077ec <__sinit>
 8007872:	3648      	adds	r6, #72	; 0x48
 8007874:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007878:	3b01      	subs	r3, #1
 800787a:	d503      	bpl.n	8007884 <__sfp+0x28>
 800787c:	6833      	ldr	r3, [r6, #0]
 800787e:	b30b      	cbz	r3, 80078c4 <__sfp+0x68>
 8007880:	6836      	ldr	r6, [r6, #0]
 8007882:	e7f7      	b.n	8007874 <__sfp+0x18>
 8007884:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007888:	b9d5      	cbnz	r5, 80078c0 <__sfp+0x64>
 800788a:	4b16      	ldr	r3, [pc, #88]	; (80078e4 <__sfp+0x88>)
 800788c:	60e3      	str	r3, [r4, #12]
 800788e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007892:	6665      	str	r5, [r4, #100]	; 0x64
 8007894:	f000 f847 	bl	8007926 <__retarget_lock_init_recursive>
 8007898:	f7ff ff96 	bl	80077c8 <__sfp_lock_release>
 800789c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078a4:	6025      	str	r5, [r4, #0]
 80078a6:	61a5      	str	r5, [r4, #24]
 80078a8:	2208      	movs	r2, #8
 80078aa:	4629      	mov	r1, r5
 80078ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078b0:	f7fd fafc 	bl	8004eac <memset>
 80078b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078bc:	4620      	mov	r0, r4
 80078be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c0:	3468      	adds	r4, #104	; 0x68
 80078c2:	e7d9      	b.n	8007878 <__sfp+0x1c>
 80078c4:	2104      	movs	r1, #4
 80078c6:	4638      	mov	r0, r7
 80078c8:	f7ff ff62 	bl	8007790 <__sfmoreglue>
 80078cc:	4604      	mov	r4, r0
 80078ce:	6030      	str	r0, [r6, #0]
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d1d5      	bne.n	8007880 <__sfp+0x24>
 80078d4:	f7ff ff78 	bl	80077c8 <__sfp_lock_release>
 80078d8:	230c      	movs	r3, #12
 80078da:	603b      	str	r3, [r7, #0]
 80078dc:	e7ee      	b.n	80078bc <__sfp+0x60>
 80078de:	bf00      	nop
 80078e0:	08007db4 	.word	0x08007db4
 80078e4:	ffff0001 	.word	0xffff0001

080078e8 <_fwalk_reent>:
 80078e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078ec:	4606      	mov	r6, r0
 80078ee:	4688      	mov	r8, r1
 80078f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078f4:	2700      	movs	r7, #0
 80078f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078fa:	f1b9 0901 	subs.w	r9, r9, #1
 80078fe:	d505      	bpl.n	800790c <_fwalk_reent+0x24>
 8007900:	6824      	ldr	r4, [r4, #0]
 8007902:	2c00      	cmp	r4, #0
 8007904:	d1f7      	bne.n	80078f6 <_fwalk_reent+0xe>
 8007906:	4638      	mov	r0, r7
 8007908:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800790c:	89ab      	ldrh	r3, [r5, #12]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d907      	bls.n	8007922 <_fwalk_reent+0x3a>
 8007912:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007916:	3301      	adds	r3, #1
 8007918:	d003      	beq.n	8007922 <_fwalk_reent+0x3a>
 800791a:	4629      	mov	r1, r5
 800791c:	4630      	mov	r0, r6
 800791e:	47c0      	blx	r8
 8007920:	4307      	orrs	r7, r0
 8007922:	3568      	adds	r5, #104	; 0x68
 8007924:	e7e9      	b.n	80078fa <_fwalk_reent+0x12>

08007926 <__retarget_lock_init_recursive>:
 8007926:	4770      	bx	lr

08007928 <__retarget_lock_acquire_recursive>:
 8007928:	4770      	bx	lr

0800792a <__retarget_lock_release_recursive>:
 800792a:	4770      	bx	lr

0800792c <__swhatbuf_r>:
 800792c:	b570      	push	{r4, r5, r6, lr}
 800792e:	460e      	mov	r6, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	2900      	cmp	r1, #0
 8007936:	b096      	sub	sp, #88	; 0x58
 8007938:	4614      	mov	r4, r2
 800793a:	461d      	mov	r5, r3
 800793c:	da07      	bge.n	800794e <__swhatbuf_r+0x22>
 800793e:	2300      	movs	r3, #0
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	89b3      	ldrh	r3, [r6, #12]
 8007944:	061a      	lsls	r2, r3, #24
 8007946:	d410      	bmi.n	800796a <__swhatbuf_r+0x3e>
 8007948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800794c:	e00e      	b.n	800796c <__swhatbuf_r+0x40>
 800794e:	466a      	mov	r2, sp
 8007950:	f000 f902 	bl	8007b58 <_fstat_r>
 8007954:	2800      	cmp	r0, #0
 8007956:	dbf2      	blt.n	800793e <__swhatbuf_r+0x12>
 8007958:	9a01      	ldr	r2, [sp, #4]
 800795a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800795e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007962:	425a      	negs	r2, r3
 8007964:	415a      	adcs	r2, r3
 8007966:	602a      	str	r2, [r5, #0]
 8007968:	e7ee      	b.n	8007948 <__swhatbuf_r+0x1c>
 800796a:	2340      	movs	r3, #64	; 0x40
 800796c:	2000      	movs	r0, #0
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	b016      	add	sp, #88	; 0x58
 8007972:	bd70      	pop	{r4, r5, r6, pc}

08007974 <__smakebuf_r>:
 8007974:	898b      	ldrh	r3, [r1, #12]
 8007976:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007978:	079d      	lsls	r5, r3, #30
 800797a:	4606      	mov	r6, r0
 800797c:	460c      	mov	r4, r1
 800797e:	d507      	bpl.n	8007990 <__smakebuf_r+0x1c>
 8007980:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	6123      	str	r3, [r4, #16]
 8007988:	2301      	movs	r3, #1
 800798a:	6163      	str	r3, [r4, #20]
 800798c:	b002      	add	sp, #8
 800798e:	bd70      	pop	{r4, r5, r6, pc}
 8007990:	ab01      	add	r3, sp, #4
 8007992:	466a      	mov	r2, sp
 8007994:	f7ff ffca 	bl	800792c <__swhatbuf_r>
 8007998:	9900      	ldr	r1, [sp, #0]
 800799a:	4605      	mov	r5, r0
 800799c:	4630      	mov	r0, r6
 800799e:	f7ff f987 	bl	8006cb0 <_malloc_r>
 80079a2:	b948      	cbnz	r0, 80079b8 <__smakebuf_r+0x44>
 80079a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079a8:	059a      	lsls	r2, r3, #22
 80079aa:	d4ef      	bmi.n	800798c <__smakebuf_r+0x18>
 80079ac:	f023 0303 	bic.w	r3, r3, #3
 80079b0:	f043 0302 	orr.w	r3, r3, #2
 80079b4:	81a3      	strh	r3, [r4, #12]
 80079b6:	e7e3      	b.n	8007980 <__smakebuf_r+0xc>
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <__smakebuf_r+0x7c>)
 80079ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80079bc:	89a3      	ldrh	r3, [r4, #12]
 80079be:	6020      	str	r0, [r4, #0]
 80079c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	9b00      	ldr	r3, [sp, #0]
 80079c8:	6163      	str	r3, [r4, #20]
 80079ca:	9b01      	ldr	r3, [sp, #4]
 80079cc:	6120      	str	r0, [r4, #16]
 80079ce:	b15b      	cbz	r3, 80079e8 <__smakebuf_r+0x74>
 80079d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079d4:	4630      	mov	r0, r6
 80079d6:	f000 f8d1 	bl	8007b7c <_isatty_r>
 80079da:	b128      	cbz	r0, 80079e8 <__smakebuf_r+0x74>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	f043 0301 	orr.w	r3, r3, #1
 80079e6:	81a3      	strh	r3, [r4, #12]
 80079e8:	89a0      	ldrh	r0, [r4, #12]
 80079ea:	4305      	orrs	r5, r0
 80079ec:	81a5      	strh	r5, [r4, #12]
 80079ee:	e7cd      	b.n	800798c <__smakebuf_r+0x18>
 80079f0:	08007785 	.word	0x08007785

080079f4 <_malloc_usable_size_r>:
 80079f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079f8:	1f18      	subs	r0, r3, #4
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	bfbc      	itt	lt
 80079fe:	580b      	ldrlt	r3, [r1, r0]
 8007a00:	18c0      	addlt	r0, r0, r3
 8007a02:	4770      	bx	lr

08007a04 <_raise_r>:
 8007a04:	291f      	cmp	r1, #31
 8007a06:	b538      	push	{r3, r4, r5, lr}
 8007a08:	4604      	mov	r4, r0
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	d904      	bls.n	8007a18 <_raise_r+0x14>
 8007a0e:	2316      	movs	r3, #22
 8007a10:	6003      	str	r3, [r0, #0]
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	bd38      	pop	{r3, r4, r5, pc}
 8007a18:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007a1a:	b112      	cbz	r2, 8007a22 <_raise_r+0x1e>
 8007a1c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007a20:	b94b      	cbnz	r3, 8007a36 <_raise_r+0x32>
 8007a22:	4620      	mov	r0, r4
 8007a24:	f000 f830 	bl	8007a88 <_getpid_r>
 8007a28:	462a      	mov	r2, r5
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a32:	f000 b817 	b.w	8007a64 <_kill_r>
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d00a      	beq.n	8007a50 <_raise_r+0x4c>
 8007a3a:	1c59      	adds	r1, r3, #1
 8007a3c:	d103      	bne.n	8007a46 <_raise_r+0x42>
 8007a3e:	2316      	movs	r3, #22
 8007a40:	6003      	str	r3, [r0, #0]
 8007a42:	2001      	movs	r0, #1
 8007a44:	e7e7      	b.n	8007a16 <_raise_r+0x12>
 8007a46:	2400      	movs	r4, #0
 8007a48:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	4798      	blx	r3
 8007a50:	2000      	movs	r0, #0
 8007a52:	e7e0      	b.n	8007a16 <_raise_r+0x12>

08007a54 <raise>:
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <raise+0xc>)
 8007a56:	4601      	mov	r1, r0
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	f7ff bfd3 	b.w	8007a04 <_raise_r>
 8007a5e:	bf00      	nop
 8007a60:	2000000c 	.word	0x2000000c

08007a64 <_kill_r>:
 8007a64:	b538      	push	{r3, r4, r5, lr}
 8007a66:	4d07      	ldr	r5, [pc, #28]	; (8007a84 <_kill_r+0x20>)
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4604      	mov	r4, r0
 8007a6c:	4608      	mov	r0, r1
 8007a6e:	4611      	mov	r1, r2
 8007a70:	602b      	str	r3, [r5, #0]
 8007a72:	f7fd f8f7 	bl	8004c64 <_kill>
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	d102      	bne.n	8007a80 <_kill_r+0x1c>
 8007a7a:	682b      	ldr	r3, [r5, #0]
 8007a7c:	b103      	cbz	r3, 8007a80 <_kill_r+0x1c>
 8007a7e:	6023      	str	r3, [r4, #0]
 8007a80:	bd38      	pop	{r3, r4, r5, pc}
 8007a82:	bf00      	nop
 8007a84:	2000035c 	.word	0x2000035c

08007a88 <_getpid_r>:
 8007a88:	f7fd b8e4 	b.w	8004c54 <_getpid>

08007a8c <__sread>:
 8007a8c:	b510      	push	{r4, lr}
 8007a8e:	460c      	mov	r4, r1
 8007a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a94:	f000 f894 	bl	8007bc0 <_read_r>
 8007a98:	2800      	cmp	r0, #0
 8007a9a:	bfab      	itete	ge
 8007a9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007a9e:	89a3      	ldrhlt	r3, [r4, #12]
 8007aa0:	181b      	addge	r3, r3, r0
 8007aa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aa6:	bfac      	ite	ge
 8007aa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007aaa:	81a3      	strhlt	r3, [r4, #12]
 8007aac:	bd10      	pop	{r4, pc}

08007aae <__swrite>:
 8007aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ab2:	461f      	mov	r7, r3
 8007ab4:	898b      	ldrh	r3, [r1, #12]
 8007ab6:	05db      	lsls	r3, r3, #23
 8007ab8:	4605      	mov	r5, r0
 8007aba:	460c      	mov	r4, r1
 8007abc:	4616      	mov	r6, r2
 8007abe:	d505      	bpl.n	8007acc <__swrite+0x1e>
 8007ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f000 f868 	bl	8007b9c <_lseek_r>
 8007acc:	89a3      	ldrh	r3, [r4, #12]
 8007ace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ad2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ad6:	81a3      	strh	r3, [r4, #12]
 8007ad8:	4632      	mov	r2, r6
 8007ada:	463b      	mov	r3, r7
 8007adc:	4628      	mov	r0, r5
 8007ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ae2:	f000 b817 	b.w	8007b14 <_write_r>

08007ae6 <__sseek>:
 8007ae6:	b510      	push	{r4, lr}
 8007ae8:	460c      	mov	r4, r1
 8007aea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aee:	f000 f855 	bl	8007b9c <_lseek_r>
 8007af2:	1c43      	adds	r3, r0, #1
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	bf15      	itete	ne
 8007af8:	6560      	strne	r0, [r4, #84]	; 0x54
 8007afa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007afe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b02:	81a3      	strheq	r3, [r4, #12]
 8007b04:	bf18      	it	ne
 8007b06:	81a3      	strhne	r3, [r4, #12]
 8007b08:	bd10      	pop	{r4, pc}

08007b0a <__sclose>:
 8007b0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b0e:	f000 b813 	b.w	8007b38 <_close_r>
	...

08007b14 <_write_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	4d07      	ldr	r5, [pc, #28]	; (8007b34 <_write_r+0x20>)
 8007b18:	4604      	mov	r4, r0
 8007b1a:	4608      	mov	r0, r1
 8007b1c:	4611      	mov	r1, r2
 8007b1e:	2200      	movs	r2, #0
 8007b20:	602a      	str	r2, [r5, #0]
 8007b22:	461a      	mov	r2, r3
 8007b24:	f7fd f8d5 	bl	8004cd2 <_write>
 8007b28:	1c43      	adds	r3, r0, #1
 8007b2a:	d102      	bne.n	8007b32 <_write_r+0x1e>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	b103      	cbz	r3, 8007b32 <_write_r+0x1e>
 8007b30:	6023      	str	r3, [r4, #0]
 8007b32:	bd38      	pop	{r3, r4, r5, pc}
 8007b34:	2000035c 	.word	0x2000035c

08007b38 <_close_r>:
 8007b38:	b538      	push	{r3, r4, r5, lr}
 8007b3a:	4d06      	ldr	r5, [pc, #24]	; (8007b54 <_close_r+0x1c>)
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	4604      	mov	r4, r0
 8007b40:	4608      	mov	r0, r1
 8007b42:	602b      	str	r3, [r5, #0]
 8007b44:	f7fd f8e1 	bl	8004d0a <_close>
 8007b48:	1c43      	adds	r3, r0, #1
 8007b4a:	d102      	bne.n	8007b52 <_close_r+0x1a>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	b103      	cbz	r3, 8007b52 <_close_r+0x1a>
 8007b50:	6023      	str	r3, [r4, #0]
 8007b52:	bd38      	pop	{r3, r4, r5, pc}
 8007b54:	2000035c 	.word	0x2000035c

08007b58 <_fstat_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4d07      	ldr	r5, [pc, #28]	; (8007b78 <_fstat_r+0x20>)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4604      	mov	r4, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	4611      	mov	r1, r2
 8007b64:	602b      	str	r3, [r5, #0]
 8007b66:	f7fd f8dc 	bl	8004d22 <_fstat>
 8007b6a:	1c43      	adds	r3, r0, #1
 8007b6c:	d102      	bne.n	8007b74 <_fstat_r+0x1c>
 8007b6e:	682b      	ldr	r3, [r5, #0]
 8007b70:	b103      	cbz	r3, 8007b74 <_fstat_r+0x1c>
 8007b72:	6023      	str	r3, [r4, #0]
 8007b74:	bd38      	pop	{r3, r4, r5, pc}
 8007b76:	bf00      	nop
 8007b78:	2000035c 	.word	0x2000035c

08007b7c <_isatty_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4d06      	ldr	r5, [pc, #24]	; (8007b98 <_isatty_r+0x1c>)
 8007b80:	2300      	movs	r3, #0
 8007b82:	4604      	mov	r4, r0
 8007b84:	4608      	mov	r0, r1
 8007b86:	602b      	str	r3, [r5, #0]
 8007b88:	f7fd f8db 	bl	8004d42 <_isatty>
 8007b8c:	1c43      	adds	r3, r0, #1
 8007b8e:	d102      	bne.n	8007b96 <_isatty_r+0x1a>
 8007b90:	682b      	ldr	r3, [r5, #0]
 8007b92:	b103      	cbz	r3, 8007b96 <_isatty_r+0x1a>
 8007b94:	6023      	str	r3, [r4, #0]
 8007b96:	bd38      	pop	{r3, r4, r5, pc}
 8007b98:	2000035c 	.word	0x2000035c

08007b9c <_lseek_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	4d07      	ldr	r5, [pc, #28]	; (8007bbc <_lseek_r+0x20>)
 8007ba0:	4604      	mov	r4, r0
 8007ba2:	4608      	mov	r0, r1
 8007ba4:	4611      	mov	r1, r2
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	602a      	str	r2, [r5, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f7fd f8d4 	bl	8004d58 <_lseek>
 8007bb0:	1c43      	adds	r3, r0, #1
 8007bb2:	d102      	bne.n	8007bba <_lseek_r+0x1e>
 8007bb4:	682b      	ldr	r3, [r5, #0]
 8007bb6:	b103      	cbz	r3, 8007bba <_lseek_r+0x1e>
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	bd38      	pop	{r3, r4, r5, pc}
 8007bbc:	2000035c 	.word	0x2000035c

08007bc0 <_read_r>:
 8007bc0:	b538      	push	{r3, r4, r5, lr}
 8007bc2:	4d07      	ldr	r5, [pc, #28]	; (8007be0 <_read_r+0x20>)
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	4608      	mov	r0, r1
 8007bc8:	4611      	mov	r1, r2
 8007bca:	2200      	movs	r2, #0
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	461a      	mov	r2, r3
 8007bd0:	f7fd f862 	bl	8004c98 <_read>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_read_r+0x1e>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_read_r+0x1e>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	2000035c 	.word	0x2000035c

08007be4 <_init>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr

08007bf0 <_fini>:
 8007bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf2:	bf00      	nop
 8007bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bf6:	bc08      	pop	{r3}
 8007bf8:	469e      	mov	lr, r3
 8007bfa:	4770      	bx	lr
