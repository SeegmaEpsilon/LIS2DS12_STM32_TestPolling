
LIS2DS12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000745c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08007600  08007600  00017600  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a54  08007a54  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007a54  08007a54  00017a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a5c  08007a5c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a5c  08007a5c  00017a5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007a64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001dc  08007c40  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000031c  08007c40  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a8e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a6  00000000  00000000  00032c9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00035140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00036060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000179f0  00000000  00000000  00036ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a6c  00000000  00000000  0004e898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dbd  00000000  00000000  0005f304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f00c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005178  00000000  00000000  000f0114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080075e4 	.word	0x080075e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	080075e4 	.word	0x080075e4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b96e 	b.w	8000eac <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f040 8083 	bne.w	8000cfe <__udivmoddi4+0x116>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4617      	mov	r7, r2
 8000bfc:	d947      	bls.n	8000c8e <__udivmoddi4+0xa6>
 8000bfe:	fab2 f282 	clz	r2, r2
 8000c02:	b142      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	f1c2 0020 	rsb	r0, r2, #32
 8000c08:	fa24 f000 	lsr.w	r0, r4, r0
 8000c0c:	4091      	lsls	r1, r2
 8000c0e:	4097      	lsls	r7, r2
 8000c10:	ea40 0c01 	orr.w	ip, r0, r1
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c20:	fa1f fe87 	uxth.w	lr, r7
 8000c24:	fb08 c116 	mls	r1, r8, r6, ip
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3a:	f080 8119 	bcs.w	8000e70 <__udivmoddi4+0x288>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8116 	bls.w	8000e70 <__udivmoddi4+0x288>
 8000c44:	3e02      	subs	r6, #2
 8000c46:	443b      	add	r3, r7
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c50:	fb08 3310 	mls	r3, r8, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c5c:	45a6      	cmp	lr, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	193c      	adds	r4, r7, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c66:	f080 8105 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	f240 8102 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c70:	3802      	subs	r0, #2
 8000c72:	443c      	add	r4, r7
 8000c74:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c78:	eba4 040e 	sub.w	r4, r4, lr
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	b11d      	cbz	r5, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c5 4300 	strd	r4, r3, [r5]
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	b902      	cbnz	r2, 8000c92 <__udivmoddi4+0xaa>
 8000c90:	deff      	udf	#255	; 0xff
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	2a00      	cmp	r2, #0
 8000c98:	d150      	bne.n	8000d3c <__udivmoddi4+0x154>
 8000c9a:	1bcb      	subs	r3, r1, r7
 8000c9c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ca0:	fa1f f887 	uxth.w	r8, r7
 8000ca4:	2601      	movs	r6, #1
 8000ca6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000caa:	0c21      	lsrs	r1, r4, #16
 8000cac:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb08 f30c 	mul.w	r3, r8, ip
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000cbc:	1879      	adds	r1, r7, r1
 8000cbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0xe2>
 8000cc4:	428b      	cmp	r3, r1
 8000cc6:	f200 80e9 	bhi.w	8000e9c <__udivmoddi4+0x2b4>
 8000cca:	4684      	mov	ip, r0
 8000ccc:	1ac9      	subs	r1, r1, r3
 8000cce:	b2a3      	uxth	r3, r4
 8000cd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cd4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cd8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cdc:	fb08 f800 	mul.w	r8, r8, r0
 8000ce0:	45a0      	cmp	r8, r4
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x10c>
 8000ce4:	193c      	adds	r4, r7, r4
 8000ce6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x10a>
 8000cec:	45a0      	cmp	r8, r4
 8000cee:	f200 80d9 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	eba4 0408 	sub.w	r4, r4, r8
 8000cf8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cfc:	e7bf      	b.n	8000c7e <__udivmoddi4+0x96>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x12e>
 8000d02:	2d00      	cmp	r5, #0
 8000d04:	f000 80b1 	beq.w	8000e6a <__udivmoddi4+0x282>
 8000d08:	2600      	movs	r6, #0
 8000d0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d0e:	4630      	mov	r0, r6
 8000d10:	4631      	mov	r1, r6
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	fab3 f683 	clz	r6, r3
 8000d1a:	2e00      	cmp	r6, #0
 8000d1c:	d14a      	bne.n	8000db4 <__udivmoddi4+0x1cc>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d302      	bcc.n	8000d28 <__udivmoddi4+0x140>
 8000d22:	4282      	cmp	r2, r0
 8000d24:	f200 80b8 	bhi.w	8000e98 <__udivmoddi4+0x2b0>
 8000d28:	1a84      	subs	r4, r0, r2
 8000d2a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d2e:	2001      	movs	r0, #1
 8000d30:	468c      	mov	ip, r1
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d0a8      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000d36:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d3a:	e7a5      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f603 	lsr.w	r6, r0, r3
 8000d44:	4097      	lsls	r7, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d4e:	40d9      	lsrs	r1, r3
 8000d50:	4330      	orrs	r0, r6
 8000d52:	0c03      	lsrs	r3, r0, #16
 8000d54:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d58:	fa1f f887 	uxth.w	r8, r7
 8000d5c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d64:	fb06 f108 	mul.w	r1, r6, r8
 8000d68:	4299      	cmp	r1, r3
 8000d6a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x19c>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d76:	f080 808d 	bcs.w	8000e94 <__udivmoddi4+0x2ac>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 808a 	bls.w	8000e94 <__udivmoddi4+0x2ac>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b281      	uxth	r1, r0
 8000d88:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d94:	fb00 f308 	mul.w	r3, r0, r8
 8000d98:	428b      	cmp	r3, r1
 8000d9a:	d907      	bls.n	8000dac <__udivmoddi4+0x1c4>
 8000d9c:	1879      	adds	r1, r7, r1
 8000d9e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000da2:	d273      	bcs.n	8000e8c <__udivmoddi4+0x2a4>
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d971      	bls.n	8000e8c <__udivmoddi4+0x2a4>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4439      	add	r1, r7
 8000dac:	1acb      	subs	r3, r1, r3
 8000dae:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000db2:	e778      	b.n	8000ca6 <__udivmoddi4+0xbe>
 8000db4:	f1c6 0c20 	rsb	ip, r6, #32
 8000db8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dbc:	fa22 f30c 	lsr.w	r3, r2, ip
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dc6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dca:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dce:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	0c3b      	lsrs	r3, r7, #16
 8000dd6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dda:	fa1f f884 	uxth.w	r8, r4
 8000dde:	fb0e 1119 	mls	r1, lr, r9, r1
 8000de2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000de6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dea:	458a      	cmp	sl, r1
 8000dec:	fa02 f206 	lsl.w	r2, r2, r6
 8000df0:	fa00 f306 	lsl.w	r3, r0, r6
 8000df4:	d908      	bls.n	8000e08 <__udivmoddi4+0x220>
 8000df6:	1861      	adds	r1, r4, r1
 8000df8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dfc:	d248      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000dfe:	458a      	cmp	sl, r1
 8000e00:	d946      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e02:	f1a9 0902 	sub.w	r9, r9, #2
 8000e06:	4421      	add	r1, r4
 8000e08:	eba1 010a 	sub.w	r1, r1, sl
 8000e0c:	b2bf      	uxth	r7, r7
 8000e0e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e12:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e16:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e1a:	fb00 f808 	mul.w	r8, r0, r8
 8000e1e:	45b8      	cmp	r8, r7
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x24a>
 8000e22:	19e7      	adds	r7, r4, r7
 8000e24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e28:	d22e      	bcs.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2a:	45b8      	cmp	r8, r7
 8000e2c:	d92c      	bls.n	8000e88 <__udivmoddi4+0x2a0>
 8000e2e:	3802      	subs	r0, #2
 8000e30:	4427      	add	r7, r4
 8000e32:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e36:	eba7 0708 	sub.w	r7, r7, r8
 8000e3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e3e:	454f      	cmp	r7, r9
 8000e40:	46c6      	mov	lr, r8
 8000e42:	4649      	mov	r1, r9
 8000e44:	d31a      	bcc.n	8000e7c <__udivmoddi4+0x294>
 8000e46:	d017      	beq.n	8000e78 <__udivmoddi4+0x290>
 8000e48:	b15d      	cbz	r5, 8000e62 <__udivmoddi4+0x27a>
 8000e4a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e4e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e52:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e56:	40f2      	lsrs	r2, r6
 8000e58:	ea4c 0202 	orr.w	r2, ip, r2
 8000e5c:	40f7      	lsrs	r7, r6
 8000e5e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e62:	2600      	movs	r6, #0
 8000e64:	4631      	mov	r1, r6
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e70b      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e9      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fd      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e78:	4543      	cmp	r3, r8
 8000e7a:	d2e5      	bcs.n	8000e48 <__udivmoddi4+0x260>
 8000e7c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e80:	eb69 0104 	sbc.w	r1, r9, r4
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7df      	b.n	8000e48 <__udivmoddi4+0x260>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e7d2      	b.n	8000e32 <__udivmoddi4+0x24a>
 8000e8c:	4660      	mov	r0, ip
 8000e8e:	e78d      	b.n	8000dac <__udivmoddi4+0x1c4>
 8000e90:	4681      	mov	r9, r0
 8000e92:	e7b9      	b.n	8000e08 <__udivmoddi4+0x220>
 8000e94:	4666      	mov	r6, ip
 8000e96:	e775      	b.n	8000d84 <__udivmoddi4+0x19c>
 8000e98:	4630      	mov	r0, r6
 8000e9a:	e74a      	b.n	8000d32 <__udivmoddi4+0x14a>
 8000e9c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea0:	4439      	add	r1, r7
 8000ea2:	e713      	b.n	8000ccc <__udivmoddi4+0xe4>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	443c      	add	r4, r7
 8000ea8:	e724      	b.n	8000cf4 <__udivmoddi4+0x10c>
 8000eaa:	bf00      	nop

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb4:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <HAL_Init+0x40>)
 8000eba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <HAL_Init+0x40>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <HAL_Init+0x40>)
 8000ec6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ecc:	4b08      	ldr	r3, [pc, #32]	; (8000ef0 <HAL_Init+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <HAL_Init+0x40>)
 8000ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed8:	2003      	movs	r0, #3
 8000eda:	f000 f94f 	bl	800117c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ede:	200f      	movs	r0, #15
 8000ee0:	f000 f808 	bl	8000ef4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee4:	f003 fa68 	bl	80043b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40023c00 	.word	0x40023c00

08000ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000efc:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <HAL_InitTick+0x54>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_InitTick+0x58>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f967 	bl	80011e6 <HAL_SYSTICK_Config>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00e      	b.n	8000f40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2b0f      	cmp	r3, #15
 8000f26:	d80a      	bhi.n	8000f3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	6879      	ldr	r1, [r7, #4]
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f000 f92f 	bl	8001192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f34:	4a06      	ldr	r2, [pc, #24]	; (8000f50 <HAL_InitTick+0x5c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	e000      	b.n	8000f40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x20>)
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	461a      	mov	r2, r3
 8000f5e:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <HAL_IncTick+0x24>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4413      	add	r3, r2
 8000f64:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <HAL_IncTick+0x24>)
 8000f66:	6013      	str	r3, [r2, #0]
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop
 8000f74:	20000004 	.word	0x20000004
 8000f78:	20000224 	.word	0x20000224

08000f7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_GetTick+0x14>)
 8000f82:	681b      	ldr	r3, [r3, #0]
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	20000224 	.word	0x20000224

08000f94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff ffee 	bl	8000f7c <HAL_GetTick>
 8000fa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fac:	d005      	beq.n	8000fba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fae:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <HAL_Delay+0x44>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fba:	bf00      	nop
 8000fbc:	f7ff ffde 	bl	8000f7c <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d8f7      	bhi.n	8000fbc <HAL_Delay+0x28>
  {
  }
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000004 	.word	0x20000004

08000fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff2:	68ba      	ldr	r2, [r7, #8]
 8000ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800100e:	4a04      	ldr	r2, [pc, #16]	; (8001020 <__NVIC_SetPriorityGrouping+0x44>)
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	60d3      	str	r3, [r2, #12]
}
 8001014:	bf00      	nop
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001028:	4b04      	ldr	r3, [pc, #16]	; (800103c <__NVIC_GetPriorityGrouping+0x18>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	0a1b      	lsrs	r3, r3, #8
 800102e:	f003 0307 	and.w	r3, r3, #7
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	2b00      	cmp	r3, #0
 8001050:	db0b      	blt.n	800106a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 021f 	and.w	r2, r3, #31
 8001058:	4907      	ldr	r1, [pc, #28]	; (8001078 <__NVIC_EnableIRQ+0x38>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	2001      	movs	r0, #1
 8001062:	fa00 f202 	lsl.w	r2, r0, r2
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800106a:	bf00      	nop
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	db0a      	blt.n	80010a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	b2da      	uxtb	r2, r3
 8001094:	490c      	ldr	r1, [pc, #48]	; (80010c8 <__NVIC_SetPriority+0x4c>)
 8001096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109a:	0112      	lsls	r2, r2, #4
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	440b      	add	r3, r1
 80010a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a4:	e00a      	b.n	80010bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4908      	ldr	r1, [pc, #32]	; (80010cc <__NVIC_SetPriority+0x50>)
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	3b04      	subs	r3, #4
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	440b      	add	r3, r1
 80010ba:	761a      	strb	r2, [r3, #24]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000e100 	.word	0xe000e100
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	f1c3 0307 	rsb	r3, r3, #7
 80010ea:	2b04      	cmp	r3, #4
 80010ec:	bf28      	it	cs
 80010ee:	2304      	movcs	r3, #4
 80010f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3304      	adds	r3, #4
 80010f6:	2b06      	cmp	r3, #6
 80010f8:	d902      	bls.n	8001100 <NVIC_EncodePriority+0x30>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	3b03      	subs	r3, #3
 80010fe:	e000      	b.n	8001102 <NVIC_EncodePriority+0x32>
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	f04f 32ff 	mov.w	r2, #4294967295
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43da      	mvns	r2, r3
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	401a      	ands	r2, r3
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001118:	f04f 31ff 	mov.w	r1, #4294967295
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	fa01 f303 	lsl.w	r3, r1, r3
 8001122:	43d9      	mvns	r1, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	4313      	orrs	r3, r2
         );
}
 800112a:	4618      	mov	r0, r3
 800112c:	3724      	adds	r7, #36	; 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001148:	d301      	bcc.n	800114e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114a:	2301      	movs	r3, #1
 800114c:	e00f      	b.n	800116e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <SysTick_Config+0x40>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001156:	210f      	movs	r1, #15
 8001158:	f04f 30ff 	mov.w	r0, #4294967295
 800115c:	f7ff ff8e 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001160:	4b05      	ldr	r3, [pc, #20]	; (8001178 <SysTick_Config+0x40>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001166:	4b04      	ldr	r3, [pc, #16]	; (8001178 <SysTick_Config+0x40>)
 8001168:	2207      	movs	r2, #7
 800116a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010

0800117c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff29 	bl	8000fdc <__NVIC_SetPriorityGrouping>
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001192:	b580      	push	{r7, lr}
 8001194:	b086      	sub	sp, #24
 8001196:	af00      	add	r7, sp, #0
 8001198:	4603      	mov	r3, r0
 800119a:	60b9      	str	r1, [r7, #8]
 800119c:	607a      	str	r2, [r7, #4]
 800119e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a4:	f7ff ff3e 	bl	8001024 <__NVIC_GetPriorityGrouping>
 80011a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	68b9      	ldr	r1, [r7, #8]
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f7ff ff8e 	bl	80010d0 <NVIC_EncodePriority>
 80011b4:	4602      	mov	r2, r0
 80011b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ba:	4611      	mov	r1, r2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	bf00      	nop
 80011c4:	3718      	adds	r7, #24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff ff31 	bl	8001040 <__NVIC_EnableIRQ>
}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff ffa2 	bl	8001138 <SysTick_Config>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b084      	sub	sp, #16
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff feb6 	bl	8000f7c <HAL_GetTick>
 8001210:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b02      	cmp	r3, #2
 800121c:	d008      	beq.n	8001230 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2280      	movs	r2, #128	; 0x80
 8001222:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	e052      	b.n	80012d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f022 0216 	bic.w	r2, r2, #22
 800123e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800124e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <HAL_DMA_Abort+0x62>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0208 	bic.w	r2, r2, #8
 800126e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f022 0201 	bic.w	r2, r2, #1
 800127e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001280:	e013      	b.n	80012aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001282:	f7ff fe7b 	bl	8000f7c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b05      	cmp	r3, #5
 800128e:	d90c      	bls.n	80012aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2220      	movs	r2, #32
 8001294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2203      	movs	r2, #3
 800129a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e015      	b.n	80012d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d1e4      	bne.n	8001282 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012bc:	223f      	movs	r2, #63	; 0x3f
 80012be:	409a      	lsls	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2201      	movs	r2, #1
 80012c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d004      	beq.n	80012fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2280      	movs	r2, #128	; 0x80
 80012f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e00c      	b.n	8001316 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2205      	movs	r2, #5
 8001300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0201 	bic.w	r2, r2, #1
 8001312:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	370c      	adds	r7, #12
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
 800133e:	e159      	b.n	80015f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001340:	2201      	movs	r2, #1
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	429a      	cmp	r2, r3
 800135a:	f040 8148 	bne.w	80015ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f003 0303 	and.w	r3, r3, #3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d005      	beq.n	8001376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001372:	2b02      	cmp	r3, #2
 8001374:	d130      	bne.n	80013d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800137c:	69fb      	ldr	r3, [r7, #28]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4013      	ands	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4313      	orrs	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 0201 	and.w	r2, r3, #1
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	fa02 f303 	lsl.w	r3, r2, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f003 0303 	and.w	r3, r3, #3
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d017      	beq.n	8001414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	2203      	movs	r2, #3
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	689a      	ldr	r2, [r3, #8]
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4313      	orrs	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d123      	bne.n	8001468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	08da      	lsrs	r2, r3, #3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3208      	adds	r2, #8
 8001428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	f003 0307 	and.w	r3, r3, #7
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	4013      	ands	r3, r2
 8001442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4313      	orrs	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	69b9      	ldr	r1, [r7, #24]
 8001464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	2203      	movs	r2, #3
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4013      	ands	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0203 	and.w	r2, r3, #3
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	fa02 f303 	lsl.w	r3, r2, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4313      	orrs	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 80a2 	beq.w	80015ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b57      	ldr	r3, [pc, #348]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	4a56      	ldr	r2, [pc, #344]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b8:	6453      	str	r3, [r2, #68]	; 0x44
 80014ba:	4b54      	ldr	r3, [pc, #336]	; (800160c <HAL_GPIO_Init+0x2e8>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014c6:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	089b      	lsrs	r3, r3, #2
 80014cc:	3302      	adds	r3, #2
 80014ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f003 0303 	and.w	r3, r3, #3
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	220f      	movs	r2, #15
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a49      	ldr	r2, [pc, #292]	; (8001614 <HAL_GPIO_Init+0x2f0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x202>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a48      	ldr	r2, [pc, #288]	; (8001618 <HAL_GPIO_Init+0x2f4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x1fe>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_GPIO_Init+0x2f8>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x1fa>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_GPIO_Init+0x2fc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x1f6>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a45      	ldr	r2, [pc, #276]	; (8001624 <HAL_GPIO_Init+0x300>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x1f2>
 8001512:	2304      	movs	r3, #4
 8001514:	e008      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001516:	2307      	movs	r3, #7
 8001518:	e006      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151a:	2303      	movs	r3, #3
 800151c:	e004      	b.n	8001528 <HAL_GPIO_Init+0x204>
 800151e:	2302      	movs	r3, #2
 8001520:	e002      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001522:	2301      	movs	r3, #1
 8001524:	e000      	b.n	8001528 <HAL_GPIO_Init+0x204>
 8001526:	2300      	movs	r3, #0
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	f002 0203 	and.w	r2, r2, #3
 800152e:	0092      	lsls	r2, r2, #2
 8001530:	4093      	lsls	r3, r2
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001538:	4935      	ldr	r1, [pc, #212]	; (8001610 <HAL_GPIO_Init+0x2ec>)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	089b      	lsrs	r3, r3, #2
 800153e:	3302      	adds	r3, #2
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001546:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800156a:	4a2f      	ldr	r2, [pc, #188]	; (8001628 <HAL_GPIO_Init+0x304>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001570:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001594:	4a24      	ldr	r2, [pc, #144]	; (8001628 <HAL_GPIO_Init+0x304>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800159a:	4b23      	ldr	r3, [pc, #140]	; (8001628 <HAL_GPIO_Init+0x304>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	43db      	mvns	r3, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4013      	ands	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d003      	beq.n	80015be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015be:	4a1a      	ldr	r2, [pc, #104]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4013      	ands	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015e8:	4a0f      	ldr	r2, [pc, #60]	; (8001628 <HAL_GPIO_Init+0x304>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	2b0f      	cmp	r3, #15
 80015f8:	f67f aea2 	bls.w	8001340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3724      	adds	r7, #36	; 0x24
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800
 8001610:	40013800 	.word	0x40013800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00
 8001624:	40021000 	.word	0x40021000
 8001628:	40013c00 	.word	0x40013c00

0800162c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	460b      	mov	r3, r1
 8001636:	807b      	strh	r3, [r7, #2]
 8001638:	4613      	mov	r3, r2
 800163a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800163c:	787b      	ldrb	r3, [r7, #1]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001642:	887a      	ldrh	r2, [r7, #2]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001648:	e003      	b.n	8001652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	041a      	lsls	r2, r3, #16
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	619a      	str	r2, [r3, #24]
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e264      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b00      	cmp	r3, #0
 800167c:	d075      	beq.n	800176a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800167e:	4ba3      	ldr	r3, [pc, #652]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f003 030c 	and.w	r3, r3, #12
 8001686:	2b04      	cmp	r3, #4
 8001688:	d00c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800168a:	4ba0      	ldr	r3, [pc, #640]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001692:	2b08      	cmp	r3, #8
 8001694:	d112      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001696:	4b9d      	ldr	r3, [pc, #628]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016a2:	d10b      	bne.n	80016bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	4b99      	ldr	r3, [pc, #612]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d05b      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d157      	bne.n	8001768 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e23f      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d106      	bne.n	80016d4 <HAL_RCC_OscConfig+0x74>
 80016c6:	4b91      	ldr	r3, [pc, #580]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a90      	ldr	r2, [pc, #576]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e01d      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x98>
 80016de:	4b8b      	ldr	r3, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a8a      	ldr	r2, [pc, #552]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	4b88      	ldr	r3, [pc, #544]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a87      	ldr	r2, [pc, #540]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0xb0>
 80016f8:	4b84      	ldr	r3, [pc, #528]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a83      	ldr	r2, [pc, #524]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001702:	6013      	str	r3, [r2, #0]
 8001704:	4b81      	ldr	r3, [pc, #516]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a80      	ldr	r2, [pc, #512]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d013      	beq.n	8001740 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001718:	f7ff fc30 	bl	8000f7c <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001720:	f7ff fc2c 	bl	8000f7c <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b64      	cmp	r3, #100	; 0x64
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e204      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001732:	4b76      	ldr	r3, [pc, #472]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0xc0>
 800173e:	e014      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fc1c 	bl	8000f7c <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001748:	f7ff fc18 	bl	8000f7c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b64      	cmp	r3, #100	; 0x64
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f0      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800175a:	4b6c      	ldr	r3, [pc, #432]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0xe8>
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d063      	beq.n	800183e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001776:	4b65      	ldr	r3, [pc, #404]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 030c 	and.w	r3, r3, #12
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00b      	beq.n	800179a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001782:	4b62      	ldr	r3, [pc, #392]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178a:	2b08      	cmp	r3, #8
 800178c:	d11c      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d116      	bne.n	80017c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800179a:	4b5c      	ldr	r3, [pc, #368]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d005      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d001      	beq.n	80017b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e1c4      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017b2:	4b56      	ldr	r3, [pc, #344]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	4952      	ldr	r1, [pc, #328]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c6:	e03a      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d020      	beq.n	8001812 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	4b4f      	ldr	r3, [pc, #316]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 80017d2:	2201      	movs	r2, #1
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fbd1 	bl	8000f7c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fbcd 	bl	8000f7c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e1a5      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f0:	4b46      	ldr	r3, [pc, #280]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0f0      	beq.n	80017de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fc:	4b43      	ldr	r3, [pc, #268]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	4940      	ldr	r1, [pc, #256]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
 8001810:	e015      	b.n	800183e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001812:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fbb0 	bl	8000f7c <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001820:	f7ff fbac 	bl	8000f7c <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e184      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001832:	4b36      	ldr	r3, [pc, #216]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d030      	beq.n	80018ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d016      	beq.n	8001880 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001854:	2201      	movs	r2, #1
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fb90 	bl	8000f7c <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fb8c 	bl	8000f7c <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e164      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001872:	4b26      	ldr	r3, [pc, #152]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 8001874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x200>
 800187e:	e015      	b.n	80018ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001880:	4b24      	ldr	r3, [pc, #144]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001886:	f7ff fb79 	bl	8000f7c <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800188e:	f7ff fb75 	bl	8000f7c <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e14d      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1f0      	bne.n	800188e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a0 	beq.w	80019fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b0f      	ldr	r3, [pc, #60]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a0e      	ldr	r2, [pc, #56]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e6:	2301      	movs	r3, #1
 80018e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ea:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d121      	bne.n	800193a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <HAL_RCC_OscConfig+0x2b8>)
 80018fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001900:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001902:	f7ff fb3b 	bl	8000f7c <HAL_GetTick>
 8001906:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001908:	e011      	b.n	800192e <HAL_RCC_OscConfig+0x2ce>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	42470000 	.word	0x42470000
 8001914:	42470e80 	.word	0x42470e80
 8001918:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800191c:	f7ff fb2e 	bl	8000f7c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e106      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800192e:	4b85      	ldr	r3, [pc, #532]	; (8001b44 <HAL_RCC_OscConfig+0x4e4>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d106      	bne.n	8001950 <HAL_RCC_OscConfig+0x2f0>
 8001942:	4b81      	ldr	r3, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001946:	4a80      	ldr	r2, [pc, #512]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	6713      	str	r3, [r2, #112]	; 0x70
 800194e:	e01c      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b05      	cmp	r3, #5
 8001956:	d10c      	bne.n	8001972 <HAL_RCC_OscConfig+0x312>
 8001958:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800195a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800195c:	4a7a      	ldr	r2, [pc, #488]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800195e:	f043 0304 	orr.w	r3, r3, #4
 8001962:	6713      	str	r3, [r2, #112]	; 0x70
 8001964:	4b78      	ldr	r3, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001968:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 800196a:	f043 0301 	orr.w	r3, r3, #1
 800196e:	6713      	str	r3, [r2, #112]	; 0x70
 8001970:	e00b      	b.n	800198a <HAL_RCC_OscConfig+0x32a>
 8001972:	4b75      	ldr	r3, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a74      	ldr	r2, [pc, #464]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001978:	f023 0301 	bic.w	r3, r3, #1
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001984:	f023 0304 	bic.w	r3, r3, #4
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d015      	beq.n	80019be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001992:	f7ff faf3 	bl	8000f7c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001998:	e00a      	b.n	80019b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800199a:	f7ff faef 	bl	8000f7c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e0c5      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b0:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	f003 0302 	and.w	r3, r3, #2
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d0ee      	beq.n	800199a <HAL_RCC_OscConfig+0x33a>
 80019bc:	e014      	b.n	80019e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019be:	f7ff fadd 	bl	8000f7c <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00a      	b.n	80019dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff fad9 	bl	8000f7c <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0af      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019dc:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d1ee      	bne.n	80019c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019e8:	7dfb      	ldrb	r3, [r7, #23]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ee:	4b56      	ldr	r3, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a55      	ldr	r2, [pc, #340]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 80019f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 809b 	beq.w	8001b3a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a04:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 030c 	and.w	r3, r3, #12
 8001a0c:	2b08      	cmp	r3, #8
 8001a0e:	d05c      	beq.n	8001aca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d141      	bne.n	8001a9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1e:	f7ff faad 	bl	8000f7c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff faa9 	bl	8000f7c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e081      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	4b43      	ldr	r3, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	69da      	ldr	r2, [r3, #28]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	431a      	orrs	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	019b      	lsls	r3, r3, #6
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	085b      	lsrs	r3, r3, #1
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	041b      	lsls	r3, r3, #16
 8001a60:	431a      	orrs	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a66:	061b      	lsls	r3, r3, #24
 8001a68:	4937      	ldr	r1, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a70:	2201      	movs	r2, #1
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fa82 	bl	8000f7c <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fa7e 	bl	8000f7c <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e056      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0f0      	beq.n	8001a7c <HAL_RCC_OscConfig+0x41c>
 8001a9a:	e04e      	b.n	8001b3a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <HAL_RCC_OscConfig+0x4ec>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fa6b 	bl	8000f7c <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fa67 	bl	8000f7c <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e03f      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1f0      	bne.n	8001aaa <HAL_RCC_OscConfig+0x44a>
 8001ac8:	e037      	b.n	8001b3a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e032      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad6:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x4e8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	699b      	ldr	r3, [r3, #24]
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d028      	beq.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d121      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d11a      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b06:	4013      	ands	r3, r2
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b0c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d111      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1c:	085b      	lsrs	r3, r3, #1
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b30:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40007000 	.word	0x40007000
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470060 	.word	0x42470060

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e0cc      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b68      	ldr	r3, [pc, #416]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d90c      	bls.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	4b65      	ldr	r3, [pc, #404]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b74:	683a      	ldr	r2, [r7, #0]
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7a:	4b63      	ldr	r3, [pc, #396]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	683a      	ldr	r2, [r7, #0]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d001      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e0b8      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d020      	beq.n	8001bda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ba4:	4b59      	ldr	r3, [pc, #356]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	4a58      	ldr	r2, [pc, #352]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001baa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0308 	and.w	r3, r3, #8
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bbc:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	4a52      	ldr	r2, [pc, #328]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	494d      	ldr	r1, [pc, #308]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d044      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d107      	bne.n	8001bfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bee:	4b47      	ldr	r3, [pc, #284]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d119      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e07f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d003      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c0e:	4b3f      	ldr	r3, [pc, #252]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d109      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e06f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b3b      	ldr	r3, [pc, #236]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e067      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2e:	4b37      	ldr	r3, [pc, #220]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f023 0203 	bic.w	r2, r3, #3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	4934      	ldr	r1, [pc, #208]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c40:	f7ff f99c 	bl	8000f7c <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	e00a      	b.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c48:	f7ff f998 	bl	8000f7c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e04f      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 020c 	and.w	r2, r3, #12
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d1eb      	bne.n	8001c48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c70:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d20c      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7e:	4b22      	ldr	r3, [pc, #136]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c86:	4b20      	ldr	r3, [pc, #128]	; (8001d08 <HAL_RCC_ClockConfig+0x1b8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d001      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e032      	b.n	8001cfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d008      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca4:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4916      	ldr	r1, [pc, #88]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d009      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	490e      	ldr	r1, [pc, #56]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd6:	f000 f821 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_RCC_ClockConfig+0x1bc>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	490a      	ldr	r1, [pc, #40]	; (8001d10 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	5ccb      	ldrb	r3, [r1, r3]
 8001cea:	fa22 f303 	lsr.w	r3, r2, r3
 8001cee:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <HAL_RCC_ClockConfig+0x1c8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff f8fc 	bl	8000ef4 <HAL_InitTick>

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08007658 	.word	0x08007658
 8001d14:	20000008 	.word	0x20000008
 8001d18:	20000000 	.word	0x20000000

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d22:	2100      	movs	r1, #0
 8001d24:	6079      	str	r1, [r7, #4]
 8001d26:	2100      	movs	r1, #0
 8001d28:	60f9      	str	r1, [r7, #12]
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001d2e:	2100      	movs	r1, #0
 8001d30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d32:	4952      	ldr	r1, [pc, #328]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d34:	6889      	ldr	r1, [r1, #8]
 8001d36:	f001 010c 	and.w	r1, r1, #12
 8001d3a:	2908      	cmp	r1, #8
 8001d3c:	d00d      	beq.n	8001d5a <HAL_RCC_GetSysClockFreq+0x3e>
 8001d3e:	2908      	cmp	r1, #8
 8001d40:	f200 8094 	bhi.w	8001e6c <HAL_RCC_GetSysClockFreq+0x150>
 8001d44:	2900      	cmp	r1, #0
 8001d46:	d002      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x32>
 8001d48:	2904      	cmp	r1, #4
 8001d4a:	d003      	beq.n	8001d54 <HAL_RCC_GetSysClockFreq+0x38>
 8001d4c:	e08e      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d4e:	4b4c      	ldr	r3, [pc, #304]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d50:	60bb      	str	r3, [r7, #8]
       break;
 8001d52:	e08e      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d54:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d56:	60bb      	str	r3, [r7, #8]
      break;
 8001d58:	e08b      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d5a:	4948      	ldr	r1, [pc, #288]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d5c:	6849      	ldr	r1, [r1, #4]
 8001d5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001d62:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d64:	4945      	ldr	r1, [pc, #276]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d66:	6849      	ldr	r1, [r1, #4]
 8001d68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001d6c:	2900      	cmp	r1, #0
 8001d6e:	d024      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d70:	4942      	ldr	r1, [pc, #264]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001d72:	6849      	ldr	r1, [r1, #4]
 8001d74:	0989      	lsrs	r1, r1, #6
 8001d76:	4608      	mov	r0, r1
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001d80:	f04f 0500 	mov.w	r5, #0
 8001d84:	ea00 0204 	and.w	r2, r0, r4
 8001d88:	ea01 0305 	and.w	r3, r1, r5
 8001d8c:	493d      	ldr	r1, [pc, #244]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d8e:	fb01 f003 	mul.w	r0, r1, r3
 8001d92:	2100      	movs	r1, #0
 8001d94:	fb01 f102 	mul.w	r1, r1, r2
 8001d98:	1844      	adds	r4, r0, r1
 8001d9a:	493a      	ldr	r1, [pc, #232]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x168>)
 8001d9c:	fba2 0101 	umull	r0, r1, r2, r1
 8001da0:	1863      	adds	r3, r4, r1
 8001da2:	4619      	mov	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	461a      	mov	r2, r3
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	f7fe ff04 	bl	8000bb8 <__aeabi_uldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4613      	mov	r3, r2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	e04a      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dba:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	099b      	lsrs	r3, r3, #6
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f04f 0300 	mov.w	r3, #0
 8001dc6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dca:	f04f 0100 	mov.w	r1, #0
 8001dce:	ea02 0400 	and.w	r4, r2, r0
 8001dd2:	ea03 0501 	and.w	r5, r3, r1
 8001dd6:	4620      	mov	r0, r4
 8001dd8:	4629      	mov	r1, r5
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	f04f 0300 	mov.w	r3, #0
 8001de2:	014b      	lsls	r3, r1, #5
 8001de4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001de8:	0142      	lsls	r2, r0, #5
 8001dea:	4610      	mov	r0, r2
 8001dec:	4619      	mov	r1, r3
 8001dee:	1b00      	subs	r0, r0, r4
 8001df0:	eb61 0105 	sbc.w	r1, r1, r5
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	018b      	lsls	r3, r1, #6
 8001dfe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e02:	0182      	lsls	r2, r0, #6
 8001e04:	1a12      	subs	r2, r2, r0
 8001e06:	eb63 0301 	sbc.w	r3, r3, r1
 8001e0a:	f04f 0000 	mov.w	r0, #0
 8001e0e:	f04f 0100 	mov.w	r1, #0
 8001e12:	00d9      	lsls	r1, r3, #3
 8001e14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e18:	00d0      	lsls	r0, r2, #3
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	1912      	adds	r2, r2, r4
 8001e20:	eb45 0303 	adc.w	r3, r5, r3
 8001e24:	f04f 0000 	mov.w	r0, #0
 8001e28:	f04f 0100 	mov.w	r1, #0
 8001e2c:	0299      	lsls	r1, r3, #10
 8001e2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e32:	0290      	lsls	r0, r2, #10
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	f7fe feb8 	bl	8000bb8 <__aeabi_uldivmod>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e50:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x160>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	0c1b      	lsrs	r3, r3, #16
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e68:	60bb      	str	r3, [r7, #8]
      break;
 8001e6a:	e002      	b.n	8001e72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e6c:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x164>)
 8001e6e:	60bb      	str	r3, [r7, #8]
      break;
 8001e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e72:	68bb      	ldr	r3, [r7, #8]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3710      	adds	r7, #16
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bdb0      	pop	{r4, r5, r7, pc}
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	017d7840 	.word	0x017d7840

08001e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000008 	.word	0x20000008

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0a9b      	lsrs	r3, r3, #10
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4903      	ldr	r1, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	08007668 	.word	0x08007668

08001ec8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ecc:	f7ff ffdc 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	4b05      	ldr	r3, [pc, #20]	; (8001ee8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	0b5b      	lsrs	r3, r3, #13
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	4903      	ldr	r1, [pc, #12]	; (8001eec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ede:	5ccb      	ldrb	r3, [r1, r3]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	08007668 	.word	0x08007668

08001ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e07b      	b.n	8001ffa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d108      	bne.n	8001f1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f12:	d009      	beq.n	8001f28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
 8001f1a:	e005      	b.n	8001f28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f002 fa60 	bl	8004408 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f5e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001f70:	431a      	orrs	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fac:	ea42 0103 	orr.w	r1, r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	0c1b      	lsrs	r3, r3, #16
 8001fc6:	f003 0104 	and.w	r1, r3, #4
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fce:	f003 0210 	and.w	r2, r3, #16
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fe8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b08c      	sub	sp, #48	; 0x30
 8002006:	af00      	add	r7, sp, #0
 8002008:	60f8      	str	r0, [r7, #12]
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002010:	2301      	movs	r3, #1
 8002012:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002014:	2300      	movs	r3, #0
 8002016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002020:	2b01      	cmp	r3, #1
 8002022:	d101      	bne.n	8002028 <HAL_SPI_TransmitReceive+0x26>
 8002024:	2302      	movs	r3, #2
 8002026:	e18a      	b.n	800233e <HAL_SPI_TransmitReceive+0x33c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2201      	movs	r2, #1
 800202c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002030:	f7fe ffa4 	bl	8000f7c <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800203c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002046:	887b      	ldrh	r3, [r7, #2]
 8002048:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800204a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800204e:	2b01      	cmp	r3, #1
 8002050:	d00f      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x70>
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002058:	d107      	bne.n	800206a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <HAL_SPI_TransmitReceive+0x68>
 8002062:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002066:	2b04      	cmp	r3, #4
 8002068:	d003      	beq.n	8002072 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800206a:	2302      	movs	r3, #2
 800206c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002070:	e15b      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x82>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_SPI_TransmitReceive+0x82>
 800207e:	887b      	ldrh	r3, [r7, #2]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d103      	bne.n	800208c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800208a:	e14e      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b04      	cmp	r3, #4
 8002096:	d003      	beq.n	80020a0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2205      	movs	r2, #5
 800209c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	887a      	ldrh	r2, [r7, #2]
 80020b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	887a      	ldrh	r2, [r7, #2]
 80020b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	68ba      	ldr	r2, [r7, #8]
 80020bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	887a      	ldrh	r2, [r7, #2]
 80020c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	887a      	ldrh	r2, [r7, #2]
 80020c8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d007      	beq.n	80020f4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020fc:	d178      	bne.n	80021f0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d002      	beq.n	800210c <HAL_SPI_TransmitReceive+0x10a>
 8002106:	8b7b      	ldrh	r3, [r7, #26]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d166      	bne.n	80021da <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	881a      	ldrh	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	1c9a      	adds	r2, r3, #2
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002130:	e053      	b.n	80021da <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b02      	cmp	r3, #2
 800213e:	d11b      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x176>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002144:	b29b      	uxth	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d016      	beq.n	8002178 <HAL_SPI_TransmitReceive+0x176>
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214c:	2b01      	cmp	r3, #1
 800214e:	d113      	bne.n	8002178 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002154:	881a      	ldrh	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	1c9a      	adds	r2, r3, #2
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b01      	cmp	r3, #1
 8002184:	d119      	bne.n	80021ba <HAL_SPI_TransmitReceive+0x1b8>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800218a:	b29b      	uxth	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d014      	beq.n	80021ba <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	b292      	uxth	r2, r2
 800219c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	1c9a      	adds	r2, r3, #2
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ac:	b29b      	uxth	r3, r3
 80021ae:	3b01      	subs	r3, #1
 80021b0:	b29a      	uxth	r2, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b6:	2301      	movs	r3, #1
 80021b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80021ba:	f7fe fedf 	bl	8000f7c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d807      	bhi.n	80021da <HAL_SPI_TransmitReceive+0x1d8>
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d003      	beq.n	80021da <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80021d8:	e0a7      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1a6      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x130>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1a1      	bne.n	8002132 <HAL_SPI_TransmitReceive+0x130>
 80021ee:	e07c      	b.n	80022ea <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d002      	beq.n	80021fe <HAL_SPI_TransmitReceive+0x1fc>
 80021f8:	8b7b      	ldrh	r3, [r7, #26]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d16b      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	330c      	adds	r3, #12
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221a:	b29b      	uxth	r3, r3
 800221c:	3b01      	subs	r3, #1
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002224:	e057      	b.n	80022d6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b02      	cmp	r3, #2
 8002232:	d11c      	bne.n	800226e <HAL_SPI_TransmitReceive+0x26c>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002238:	b29b      	uxth	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d017      	beq.n	800226e <HAL_SPI_TransmitReceive+0x26c>
 800223e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002240:	2b01      	cmp	r3, #1
 8002242:	d114      	bne.n	800226e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	330c      	adds	r3, #12
 800224e:	7812      	ldrb	r2, [r2, #0]
 8002250:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 0301 	and.w	r3, r3, #1
 8002278:	2b01      	cmp	r3, #1
 800227a:	d119      	bne.n	80022b0 <HAL_SPI_TransmitReceive+0x2ae>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d014      	beq.n	80022b0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022ac:	2301      	movs	r3, #1
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80022b0:	f7fe fe64 	bl	8000f7c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022bc:	429a      	cmp	r2, r3
 80022be:	d803      	bhi.n	80022c8 <HAL_SPI_TransmitReceive+0x2c6>
 80022c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d102      	bne.n	80022ce <HAL_SPI_TransmitReceive+0x2cc>
 80022c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80022d4:	e029      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1a2      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x224>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d19d      	bne.n	8002226 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 f8b2 	bl	8002458 <SPI_EndRxTxTransaction>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d006      	beq.n	8002308 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002306:	e010      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10b      	bne.n	8002328 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	e000      	b.n	800232a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002328:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2201      	movs	r2, #1
 800232e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800233a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800233e:	4618      	mov	r0, r3
 8002340:	3730      	adds	r7, #48	; 0x30
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
	...

08002348 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002358:	f7fe fe10 	bl	8000f7c <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	1a9b      	subs	r3, r3, r2
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002368:	f7fe fe08 	bl	8000f7c <HAL_GetTick>
 800236c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800236e:	4b39      	ldr	r3, [pc, #228]	; (8002454 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	015b      	lsls	r3, r3, #5
 8002374:	0d1b      	lsrs	r3, r3, #20
 8002376:	69fa      	ldr	r2, [r7, #28]
 8002378:	fb02 f303 	mul.w	r3, r2, r3
 800237c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800237e:	e054      	b.n	800242a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002386:	d050      	beq.n	800242a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002388:	f7fe fdf8 	bl	8000f7c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	429a      	cmp	r2, r3
 8002396:	d902      	bls.n	800239e <SPI_WaitFlagStateUntilTimeout+0x56>
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d13d      	bne.n	800241a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b6:	d111      	bne.n	80023dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023c0:	d004      	beq.n	80023cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ca:	d107      	bne.n	80023dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023e4:	d10f      	bne.n	8002406 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002404:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e017      	b.n	800244a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	3b01      	subs	r3, #1
 8002428:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	4013      	ands	r3, r2
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	429a      	cmp	r2, r3
 8002438:	bf0c      	ite	eq
 800243a:	2301      	moveq	r3, #1
 800243c:	2300      	movne	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	461a      	mov	r2, r3
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	429a      	cmp	r2, r3
 8002446:	d19b      	bne.n	8002380 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3720      	adds	r7, #32
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008

08002458 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002464:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <SPI_EndRxTxTransaction+0x7c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a1b      	ldr	r2, [pc, #108]	; (80024d8 <SPI_EndRxTxTransaction+0x80>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	0d5b      	lsrs	r3, r3, #21
 8002470:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002474:	fb02 f303 	mul.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002482:	d112      	bne.n	80024aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	2180      	movs	r1, #128	; 0x80
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff ff5a 	bl	8002348 <SPI_WaitFlagStateUntilTimeout>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d016      	beq.n	80024c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249e:	f043 0220 	orr.w	r2, r3, #32
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e00f      	b.n	80024ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b80      	cmp	r3, #128	; 0x80
 80024c2:	d0f2      	beq.n	80024aa <SPI_EndRxTxTransaction+0x52>
 80024c4:	e000      	b.n	80024c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80024c6:	bf00      	nop
  }

  return HAL_OK;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000008 	.word	0x20000008
 80024d8:	165e9f81 	.word	0x165e9f81

080024dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e041      	b.n	8002572 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d106      	bne.n	8002508 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f001 ffc8 	bl	8004498 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2202      	movs	r2, #2
 800250c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3304      	adds	r3, #4
 8002518:	4619      	mov	r1, r3
 800251a:	4610      	mov	r0, r2
 800251c:	f000 f9a0 	bl	8002860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
	...

0800257c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_TIM_PWM_Start+0x24>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	bf14      	ite	ne
 8002598:	2301      	movne	r3, #1
 800259a:	2300      	moveq	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e022      	b.n	80025e6 <HAL_TIM_PWM_Start+0x6a>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d109      	bne.n	80025ba <HAL_TIM_PWM_Start+0x3e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	bf14      	ite	ne
 80025b2:	2301      	movne	r3, #1
 80025b4:	2300      	moveq	r3, #0
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	e015      	b.n	80025e6 <HAL_TIM_PWM_Start+0x6a>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d109      	bne.n	80025d4 <HAL_TIM_PWM_Start+0x58>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	bf14      	ite	ne
 80025cc:	2301      	movne	r3, #1
 80025ce:	2300      	moveq	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e008      	b.n	80025e6 <HAL_TIM_PWM_Start+0x6a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	2b01      	cmp	r3, #1
 80025de:	bf14      	ite	ne
 80025e0:	2301      	movne	r3, #1
 80025e2:	2300      	moveq	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e068      	b.n	80026c0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d104      	bne.n	80025fe <HAL_TIM_PWM_Start+0x82>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025fc:	e013      	b.n	8002626 <HAL_TIM_PWM_Start+0xaa>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b04      	cmp	r3, #4
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0x92>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800260c:	e00b      	b.n	8002626 <HAL_TIM_PWM_Start+0xaa>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b08      	cmp	r3, #8
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0xa2>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2202      	movs	r2, #2
 8002618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800261c:	e003      	b.n	8002626 <HAL_TIM_PWM_Start+0xaa>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2202      	movs	r2, #2
 8002622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	6839      	ldr	r1, [r7, #0]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fb22 	bl	8002c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <HAL_TIM_PWM_Start+0x14c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d107      	bne.n	800264e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800264c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a1d      	ldr	r2, [pc, #116]	; (80026c8 <HAL_TIM_PWM_Start+0x14c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_TIM_PWM_Start+0x10e>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002660:	d013      	beq.n	800268a <HAL_TIM_PWM_Start+0x10e>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a19      	ldr	r2, [pc, #100]	; (80026cc <HAL_TIM_PWM_Start+0x150>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_TIM_PWM_Start+0x10e>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_TIM_PWM_Start+0x154>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_TIM_PWM_Start+0x10e>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_TIM_PWM_Start+0x158>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_TIM_PWM_Start+0x10e>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a14      	ldr	r2, [pc, #80]	; (80026d8 <HAL_TIM_PWM_Start+0x15c>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d111      	bne.n	80026ae <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d010      	beq.n	80026be <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0201 	orr.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026ac:	e007      	b.n	80026be <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3710      	adds	r7, #16
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40010000 	.word	0x40010000
 80026cc:	40000400 	.word	0x40000400
 80026d0:	40000800 	.word	0x40000800
 80026d4:	40000c00 	.word	0x40000c00
 80026d8:	40014000 	.word	0x40014000

080026dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026e8:	2300      	movs	r3, #0
 80026ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e0ae      	b.n	8002858 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	f200 809f 	bhi.w	8002848 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002745 	.word	0x08002745
 8002714:	08002849 	.word	0x08002849
 8002718:	08002849 	.word	0x08002849
 800271c:	08002849 	.word	0x08002849
 8002720:	08002785 	.word	0x08002785
 8002724:	08002849 	.word	0x08002849
 8002728:	08002849 	.word	0x08002849
 800272c:	08002849 	.word	0x08002849
 8002730:	080027c7 	.word	0x080027c7
 8002734:	08002849 	.word	0x08002849
 8002738:	08002849 	.word	0x08002849
 800273c:	08002849 	.word	0x08002849
 8002740:	08002807 	.word	0x08002807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 f908 	bl	8002960 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	699a      	ldr	r2, [r3, #24]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	699a      	ldr	r2, [r3, #24]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f022 0204 	bic.w	r2, r2, #4
 800276e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	6999      	ldr	r1, [r3, #24]
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	691a      	ldr	r2, [r3, #16]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	619a      	str	r2, [r3, #24]
      break;
 8002782:	e064      	b.n	800284e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68b9      	ldr	r1, [r7, #8]
 800278a:	4618      	mov	r0, r3
 800278c:	f000 f94e 	bl	8002a2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800279e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699a      	ldr	r2, [r3, #24]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	6999      	ldr	r1, [r3, #24]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	021a      	lsls	r2, r3, #8
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	430a      	orrs	r2, r1
 80027c2:	619a      	str	r2, [r3, #24]
      break;
 80027c4:	e043      	b.n	800284e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68b9      	ldr	r1, [r7, #8]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f000 f999 	bl	8002b04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f042 0208 	orr.w	r2, r2, #8
 80027e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	69da      	ldr	r2, [r3, #28]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0204 	bic.w	r2, r2, #4
 80027f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	69d9      	ldr	r1, [r3, #28]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	691a      	ldr	r2, [r3, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	430a      	orrs	r2, r1
 8002802:	61da      	str	r2, [r3, #28]
      break;
 8002804:	e023      	b.n	800284e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	4618      	mov	r0, r3
 800280e:	f000 f9e3 	bl	8002bd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	69da      	ldr	r2, [r3, #28]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	69da      	ldr	r2, [r3, #28]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	69d9      	ldr	r1, [r3, #28]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	021a      	lsls	r2, r3, #8
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	61da      	str	r2, [r3, #28]
      break;
 8002846:	e002      	b.n	800284e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	75fb      	strb	r3, [r7, #23]
      break;
 800284c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002856:	7dfb      	ldrb	r3, [r7, #23]
}
 8002858:	4618      	mov	r0, r3
 800285a:	3718      	adds	r7, #24
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a34      	ldr	r2, [pc, #208]	; (8002944 <TIM_Base_SetConfig+0xe4>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00f      	beq.n	8002898 <TIM_Base_SetConfig+0x38>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0x38>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a31      	ldr	r2, [pc, #196]	; (8002948 <TIM_Base_SetConfig+0xe8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0x38>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a30      	ldr	r2, [pc, #192]	; (800294c <TIM_Base_SetConfig+0xec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0x38>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a2f      	ldr	r2, [pc, #188]	; (8002950 <TIM_Base_SetConfig+0xf0>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d108      	bne.n	80028aa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800289e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xe4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d01b      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b8:	d017      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xe8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d013      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a21      	ldr	r2, [pc, #132]	; (800294c <TIM_Base_SetConfig+0xec>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d00f      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a20      	ldr	r2, [pc, #128]	; (8002950 <TIM_Base_SetConfig+0xf0>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d00b      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a1f      	ldr	r2, [pc, #124]	; (8002954 <TIM_Base_SetConfig+0xf4>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d007      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <TIM_Base_SetConfig+0xf8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d003      	beq.n	80028ea <TIM_Base_SetConfig+0x8a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a1d      	ldr	r2, [pc, #116]	; (800295c <TIM_Base_SetConfig+0xfc>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d108      	bne.n	80028fc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a08      	ldr	r2, [pc, #32]	; (8002944 <TIM_Base_SetConfig+0xe4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d103      	bne.n	8002930 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	615a      	str	r2, [r3, #20]
}
 8002936:	bf00      	nop
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40010000 	.word	0x40010000
 8002948:	40000400 	.word	0x40000400
 800294c:	40000800 	.word	0x40000800
 8002950:	40000c00 	.word	0x40000c00
 8002954:	40014000 	.word	0x40014000
 8002958:	40014400 	.word	0x40014400
 800295c:	40014800 	.word	0x40014800

08002960 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002960:	b480      	push	{r7}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	f023 0201 	bic.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f023 0303 	bic.w	r3, r3, #3
 8002996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f023 0302 	bic.w	r3, r3, #2
 80029a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	4a1c      	ldr	r2, [pc, #112]	; (8002a28 <TIM_OC1_SetConfig+0xc8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d10c      	bne.n	80029d6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f023 0308 	bic.w	r3, r3, #8
 80029c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	697a      	ldr	r2, [r7, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f023 0304 	bic.w	r3, r3, #4
 80029d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <TIM_OC1_SetConfig+0xc8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d111      	bne.n	8002a02 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80029ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	621a      	str	r2, [r3, #32]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr
 8002a28:	40010000 	.word	0x40010000

08002a2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f023 0210 	bic.w	r2, r3, #16
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	021b      	lsls	r3, r3, #8
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f023 0320 	bic.w	r3, r3, #32
 8002a76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a1e      	ldr	r2, [pc, #120]	; (8002b00 <TIM_OC2_SetConfig+0xd4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10d      	bne.n	8002aa8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002aa6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <TIM_OC2_SetConfig+0xd4>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d113      	bne.n	8002ad8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002abe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	621a      	str	r2, [r3, #32]
}
 8002af2:	bf00      	nop
 8002af4:	371c      	adds	r7, #28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40010000 	.word	0x40010000

08002b04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0303 	bic.w	r3, r3, #3
 8002b3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	697a      	ldr	r2, [r7, #20]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a1d      	ldr	r2, [pc, #116]	; (8002bd4 <TIM_OC3_SetConfig+0xd0>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d10d      	bne.n	8002b7e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	021b      	lsls	r3, r3, #8
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <TIM_OC3_SetConfig+0xd0>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d113      	bne.n	8002bae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	693a      	ldr	r2, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	621a      	str	r2, [r3, #32]
}
 8002bc8:	bf00      	nop
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	40010000 	.word	0x40010000

08002bd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b087      	sub	sp, #28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	021b      	lsls	r3, r3, #8
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	031b      	lsls	r3, r3, #12
 8002c2a:	693a      	ldr	r2, [r7, #16]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a10      	ldr	r2, [pc, #64]	; (8002c74 <TIM_OC4_SetConfig+0x9c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c3e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	695b      	ldr	r3, [r3, #20]
 8002c44:	019b      	lsls	r3, r3, #6
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	621a      	str	r2, [r3, #32]
}
 8002c66:	bf00      	nop
 8002c68:	371c      	adds	r7, #28
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010000 	.word	0x40010000

08002c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b087      	sub	sp, #28
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f003 031f 	and.w	r3, r3, #31
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a1a      	ldr	r2, [r3, #32]
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	401a      	ands	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	f003 031f 	and.w	r3, r3, #31
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	621a      	str	r2, [r3, #32]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
	...

08002cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d101      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	e050      	b.n	8002d7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2202      	movs	r2, #2
 8002ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d018      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d28:	d013      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a18      	ldr	r2, [pc, #96]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d00e      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a16      	ldr	r2, [pc, #88]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d009      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a15      	ldr	r2, [pc, #84]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d004      	beq.n	8002d52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a13      	ldr	r2, [pc, #76]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10c      	bne.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68ba      	ldr	r2, [r7, #8]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68ba      	ldr	r2, [r7, #8]
 8002d6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	40000c00 	.word	0x40000c00
 8002d9c:	40014000 	.word	0x40014000

08002da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e03f      	b.n	8002e32 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f001 fbbe 	bl	8004548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68da      	ldr	r2, [r3, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 fd7b 	bl	80038e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691a      	ldr	r2, [r3, #16]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695a      	ldr	r2, [r3, #20]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b08a      	sub	sp, #40	; 0x28
 8002e3e:	af02      	add	r7, sp, #8
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b20      	cmp	r3, #32
 8002e58:	d17c      	bne.n	8002f54 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Transmit+0x2c>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e075      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit+0x3e>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e06e      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe f875 	bl	8000f7c <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ecc:	e02a      	b.n	8002f24 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	9300      	str	r3, [sp, #0]
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	2180      	movs	r1, #128	; 0x80
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 faf9 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e036      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10b      	bne.n	8002f06 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3302      	adds	r3, #2
 8002f02:	61bb      	str	r3, [r7, #24]
 8002f04:	e007      	b.n	8002f16 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f10:	69fb      	ldr	r3, [r7, #28]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1cf      	bne.n	8002ece <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	9300      	str	r3, [sp, #0]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2140      	movs	r1, #64	; 0x40
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 fac9 	bl	80034d0 <UART_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e006      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f50:	2300      	movs	r3, #0
 8002f52:	e000      	b.n	8002f56 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002f54:	2302      	movs	r3, #2
  }
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3720      	adds	r7, #32
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b0ba      	sub	sp, #232	; 0xe8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002f9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d10f      	bne.n	8002fc6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d009      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
 8002fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fbd3 	bl	800376a <UART_Receive_IT>
      return;
 8002fc4:	e256      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002fc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80de 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d106      	bne.n	8002fea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fe0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 80d1 	beq.w	800318c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0201 	orr.w	r2, r3, #1
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800300e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
 800301a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b00      	cmp	r3, #0
 8003024:	d005      	beq.n	8003032 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302a:	f043 0202 	orr.w	r2, r3, #2
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00b      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
 800303e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304e:	f043 0204 	orr.w	r2, r3, #4
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d011      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
 8003062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003066:	f003 0320 	and.w	r3, r3, #32
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800306e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d005      	beq.n	8003086 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	f043 0208 	orr.w	r2, r3, #8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2b00      	cmp	r3, #0
 800308c:	f000 81ed 	beq.w	800346a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003090:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d008      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
 800309c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d002      	beq.n	80030ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fb5e 	bl	800376a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b8:	2b40      	cmp	r3, #64	; 0x40
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d103      	bne.n	80030da <HAL_UART_IRQHandler+0x17a>
 80030d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04f      	beq.n	800317a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa66 	bl	80035ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d141      	bne.n	8003172 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	3314      	adds	r3, #20
 80030f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030fc:	e853 3f00 	ldrex	r3, [r3]
 8003100:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003104:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003108:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800310c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	3314      	adds	r3, #20
 8003116:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800311a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003126:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800312a:	e841 2300 	strex	r3, r2, [r1]
 800312e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003132:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1d9      	bne.n	80030ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800313e:	2b00      	cmp	r3, #0
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	4a7d      	ldr	r2, [pc, #500]	; (800333c <HAL_UART_IRQHandler+0x3dc>)
 8003148:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	4618      	mov	r0, r3
 8003150:	f7fe f8c5 	bl	80012de <HAL_DMA_Abort_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003164:	4610      	mov	r0, r2
 8003166:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003168:	e00e      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f99a 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003170:	e00a      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f996 	bl	80034a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003178:	e006      	b.n	8003188 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f992 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003186:	e170      	b.n	800346a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003188:	bf00      	nop
    return;
 800318a:	e16e      	b.n	800346a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 814a 	bne.w	800342a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8143 	beq.w	800342a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 813c 	beq.w	800342a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031b2:	2300      	movs	r3, #0
 80031b4:	60bb      	str	r3, [r7, #8]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	60bb      	str	r3, [r7, #8]
 80031c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d2:	2b40      	cmp	r3, #64	; 0x40
 80031d4:	f040 80b4 	bne.w	8003340 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8140 	beq.w	800346e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f6:	429a      	cmp	r2, r3
 80031f8:	f080 8139 	bcs.w	800346e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003202:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	69db      	ldr	r3, [r3, #28]
 800320a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800320e:	f000 8088 	beq.w	8003322 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003220:	e853 3f00 	ldrex	r3, [r3]
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003228:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800322c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	330c      	adds	r3, #12
 800323a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003246:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800324a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800324e:	e841 2300 	strex	r3, r2, [r1]
 8003252:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1d9      	bne.n	8003212 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3314      	adds	r3, #20
 8003264:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003268:	e853 3f00 	ldrex	r3, [r3]
 800326c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800326e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003270:	f023 0301 	bic.w	r3, r3, #1
 8003274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003282:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003286:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003288:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800328a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800328e:	e841 2300 	strex	r3, r2, [r1]
 8003292:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003294:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1e1      	bne.n	800325e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	3314      	adds	r3, #20
 80032a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032a4:	e853 3f00 	ldrex	r3, [r3]
 80032a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032c6:	e841 2300 	strex	r3, r2, [r1]
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e3      	bne.n	800329a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	330c      	adds	r3, #12
 80032e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	e853 3f00 	ldrex	r3, [r3]
 80032ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	f023 0310 	bic.w	r3, r3, #16
 80032f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	330c      	adds	r3, #12
 8003300:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003304:	65ba      	str	r2, [r7, #88]	; 0x58
 8003306:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003308:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800330a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800330c:	e841 2300 	strex	r3, r2, [r1]
 8003310:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003314:	2b00      	cmp	r3, #0
 8003316:	d1e3      	bne.n	80032e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331c:	4618      	mov	r0, r3
 800331e:	f7fd ff6e 	bl	80011fe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800332a:	b29b      	uxth	r3, r3
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	b29b      	uxth	r3, r3
 8003330:	4619      	mov	r1, r3
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f8c0 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003338:	e099      	b.n	800346e <HAL_UART_IRQHandler+0x50e>
 800333a:	bf00      	nop
 800333c:	08003673 	.word	0x08003673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003348:	b29b      	uxth	r3, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003354:	b29b      	uxth	r3, r3
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 808b 	beq.w	8003472 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800335c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8086 	beq.w	8003472 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	330c      	adds	r3, #12
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800336e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003370:	e853 3f00 	ldrex	r3, [r3]
 8003374:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003378:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800337c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800338a:	647a      	str	r2, [r7, #68]	; 0x44
 800338c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003392:	e841 2300 	strex	r3, r2, [r1]
 8003396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1e3      	bne.n	8003366 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	3314      	adds	r3, #20
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	e853 3f00 	ldrex	r3, [r3]
 80033ac:	623b      	str	r3, [r7, #32]
   return(result);
 80033ae:	6a3b      	ldr	r3, [r7, #32]
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3314      	adds	r3, #20
 80033be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033c2:	633a      	str	r2, [r7, #48]	; 0x30
 80033c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ca:	e841 2300 	strex	r3, r2, [r1]
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1e3      	bne.n	800339e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2220      	movs	r2, #32
 80033da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	330c      	adds	r3, #12
 80033ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	e853 3f00 	ldrex	r3, [r3]
 80033f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0310 	bic.w	r3, r3, #16
 80033fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	330c      	adds	r3, #12
 8003404:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003408:	61fa      	str	r2, [r7, #28]
 800340a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	69b9      	ldr	r1, [r7, #24]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	617b      	str	r3, [r7, #20]
   return(result);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e3      	bne.n	80033e4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800341c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003420:	4619      	mov	r1, r3
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f848 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003428:	e023      	b.n	8003472 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800342a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003432:	2b00      	cmp	r3, #0
 8003434:	d009      	beq.n	800344a <HAL_UART_IRQHandler+0x4ea>
 8003436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f929 	bl	800369a <UART_Transmit_IT>
    return;
 8003448:	e014      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800344a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800344e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <HAL_UART_IRQHandler+0x514>
 8003456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b00      	cmp	r3, #0
 8003460:	d008      	beq.n	8003474 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f969 	bl	800373a <UART_EndTransmit_IT>
    return;
 8003468:	e004      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
    return;
 800346a:	bf00      	nop
 800346c:	e002      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
      return;
 800346e:	bf00      	nop
 8003470:	e000      	b.n	8003474 <HAL_UART_IRQHandler+0x514>
      return;
 8003472:	bf00      	nop
  }
}
 8003474:	37e8      	adds	r7, #232	; 0xe8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b090      	sub	sp, #64	; 0x40
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e0:	e050      	b.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d04c      	beq.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80034ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d007      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
 80034f0:	f7fd fd44 	bl	8000f7c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d241      	bcs.n	8003584 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	330c      	adds	r3, #12
 8003506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350a:	e853 3f00 	ldrex	r3, [r3]
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	330c      	adds	r3, #12
 800351e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003520:	637a      	str	r2, [r7, #52]	; 0x34
 8003522:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003524:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003526:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003528:	e841 2300 	strex	r3, r2, [r1]
 800352c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800352e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1e5      	bne.n	8003500 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	e853 3f00 	ldrex	r3, [r3]
 8003542:	613b      	str	r3, [r7, #16]
   return(result);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	63bb      	str	r3, [r7, #56]	; 0x38
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3314      	adds	r3, #20
 8003552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003554:	623a      	str	r2, [r7, #32]
 8003556:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69f9      	ldr	r1, [r7, #28]
 800355a:	6a3a      	ldr	r2, [r7, #32]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	61bb      	str	r3, [r7, #24]
   return(result);
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e5      	bne.n	8003534 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e00f      	b.n	80035a4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	4013      	ands	r3, r2
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	429a      	cmp	r2, r3
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	79fb      	ldrb	r3, [r7, #7]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d09f      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3740      	adds	r7, #64	; 0x40
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b095      	sub	sp, #84	; 0x54
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	330c      	adds	r3, #12
 80035ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035be:	e853 3f00 	ldrex	r3, [r3]
 80035c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80035c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	330c      	adds	r3, #12
 80035d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035d4:	643a      	str	r2, [r7, #64]	; 0x40
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80035da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035dc:	e841 2300 	strex	r3, r2, [r1]
 80035e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1e5      	bne.n	80035b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3314      	adds	r3, #20
 80035ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f023 0301 	bic.w	r3, r3, #1
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3314      	adds	r3, #20
 8003606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800360e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e5      	bne.n	80035e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003620:	2b01      	cmp	r3, #1
 8003622:	d119      	bne.n	8003658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	330c      	adds	r3, #12
 800362a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	60bb      	str	r3, [r7, #8]
   return(result);
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	f023 0310 	bic.w	r3, r3, #16
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	330c      	adds	r3, #12
 8003642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003644:	61ba      	str	r2, [r7, #24]
 8003646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6979      	ldr	r1, [r7, #20]
 800364a:	69ba      	ldr	r2, [r7, #24]
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	613b      	str	r3, [r7, #16]
   return(result);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e5      	bne.n	8003624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003666:	bf00      	nop
 8003668:	3754      	adds	r7, #84	; 0x54
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b084      	sub	sp, #16
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800367e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f7ff ff09 	bl	80034a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003692:	bf00      	nop
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b21      	cmp	r3, #33	; 0x21
 80036ac:	d13e      	bne.n	800372c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b6:	d114      	bne.n	80036e2 <UART_Transmit_IT+0x48>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d110      	bne.n	80036e2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a1b      	ldr	r3, [r3, #32]
 80036da:	1c9a      	adds	r2, r3, #2
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	621a      	str	r2, [r3, #32]
 80036e0:	e008      	b.n	80036f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	1c59      	adds	r1, r3, #1
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6211      	str	r1, [r2, #32]
 80036ec:	781a      	ldrb	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4619      	mov	r1, r3
 8003702:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10f      	bne.n	8003728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003728:	2300      	movs	r3, #0
 800372a:	e000      	b.n	800372e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800372c:	2302      	movs	r3, #2
  }
}
 800372e:	4618      	mov	r0, r3
 8003730:	3714      	adds	r7, #20
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr

0800373a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff fe8e 	bl	800347c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08c      	sub	sp, #48	; 0x30
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b22      	cmp	r3, #34	; 0x22
 800377c:	f040 80ab 	bne.w	80038d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d117      	bne.n	80037ba <UART_Receive_IT+0x50>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d113      	bne.n	80037ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	629a      	str	r2, [r3, #40]	; 0x28
 80037b8:	e026      	b.n	8003808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037be:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037cc:	d007      	beq.n	80037de <UART_Receive_IT+0x74>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d10a      	bne.n	80037ec <UART_Receive_IT+0x82>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d106      	bne.n	80037ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e008      	b.n	80037fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29b      	uxth	r3, r3
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4619      	mov	r1, r3
 8003816:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15a      	bne.n	80038d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68da      	ldr	r2, [r3, #12]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0220 	bic.w	r2, r2, #32
 800382a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800383a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	695a      	ldr	r2, [r3, #20]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003858:	2b01      	cmp	r3, #1
 800385a:	d135      	bne.n	80038c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	330c      	adds	r3, #12
 8003868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	613b      	str	r3, [r7, #16]
   return(result);
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f023 0310 	bic.w	r3, r3, #16
 8003878:	627b      	str	r3, [r7, #36]	; 0x24
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	330c      	adds	r3, #12
 8003880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003882:	623a      	str	r2, [r7, #32]
 8003884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	69f9      	ldr	r1, [r7, #28]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e5      	bne.n	8003862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d10a      	bne.n	80038ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038a4:	2300      	movs	r3, #0
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff fdf9 	bl	80034b8 <HAL_UARTEx_RxEventCallback>
 80038c6:	e002      	b.n	80038ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff fde1 	bl	8003490 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e002      	b.n	80038d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3730      	adds	r7, #48	; 0x30
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038e4:	b09f      	sub	sp, #124	; 0x7c
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691b      	ldr	r3, [r3, #16]
 80038f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80038f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038f6:	68d9      	ldr	r1, [r3, #12]
 80038f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	ea40 0301 	orr.w	r3, r0, r1
 8003900:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003902:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003904:	689a      	ldr	r2, [r3, #8]
 8003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	431a      	orrs	r2, r3
 800390c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	431a      	orrs	r2, r3
 8003912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	4313      	orrs	r3, r2
 8003918:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003924:	f021 010c 	bic.w	r1, r1, #12
 8003928:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800392e:	430b      	orrs	r3, r1
 8003930:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800393c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800393e:	6999      	ldr	r1, [r3, #24]
 8003940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	ea40 0301 	orr.w	r3, r0, r1
 8003948:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800394a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	4bc5      	ldr	r3, [pc, #788]	; (8003c64 <UART_SetConfig+0x384>)
 8003950:	429a      	cmp	r2, r3
 8003952:	d004      	beq.n	800395e <UART_SetConfig+0x7e>
 8003954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4bc3      	ldr	r3, [pc, #780]	; (8003c68 <UART_SetConfig+0x388>)
 800395a:	429a      	cmp	r2, r3
 800395c:	d103      	bne.n	8003966 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800395e:	f7fe fab3 	bl	8001ec8 <HAL_RCC_GetPCLK2Freq>
 8003962:	6778      	str	r0, [r7, #116]	; 0x74
 8003964:	e002      	b.n	800396c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003966:	f7fe fa9b 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 800396a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800396c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800396e:	69db      	ldr	r3, [r3, #28]
 8003970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003974:	f040 80b6 	bne.w	8003ae4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003978:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800397a:	461c      	mov	r4, r3
 800397c:	f04f 0500 	mov.w	r5, #0
 8003980:	4622      	mov	r2, r4
 8003982:	462b      	mov	r3, r5
 8003984:	1891      	adds	r1, r2, r2
 8003986:	6439      	str	r1, [r7, #64]	; 0x40
 8003988:	415b      	adcs	r3, r3
 800398a:	647b      	str	r3, [r7, #68]	; 0x44
 800398c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003990:	1912      	adds	r2, r2, r4
 8003992:	eb45 0303 	adc.w	r3, r5, r3
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	f04f 0100 	mov.w	r1, #0
 800399e:	00d9      	lsls	r1, r3, #3
 80039a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a4:	00d0      	lsls	r0, r2, #3
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	1911      	adds	r1, r2, r4
 80039ac:	6639      	str	r1, [r7, #96]	; 0x60
 80039ae:	416b      	adcs	r3, r5
 80039b0:	667b      	str	r3, [r7, #100]	; 0x64
 80039b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	1891      	adds	r1, r2, r2
 80039be:	63b9      	str	r1, [r7, #56]	; 0x38
 80039c0:	415b      	adcs	r3, r3
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039c8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80039cc:	f7fd f8f4 	bl	8000bb8 <__aeabi_uldivmod>
 80039d0:	4602      	mov	r2, r0
 80039d2:	460b      	mov	r3, r1
 80039d4:	4ba5      	ldr	r3, [pc, #660]	; (8003c6c <UART_SetConfig+0x38c>)
 80039d6:	fba3 2302 	umull	r2, r3, r3, r2
 80039da:	095b      	lsrs	r3, r3, #5
 80039dc:	011e      	lsls	r6, r3, #4
 80039de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039e0:	461c      	mov	r4, r3
 80039e2:	f04f 0500 	mov.w	r5, #0
 80039e6:	4622      	mov	r2, r4
 80039e8:	462b      	mov	r3, r5
 80039ea:	1891      	adds	r1, r2, r2
 80039ec:	6339      	str	r1, [r7, #48]	; 0x30
 80039ee:	415b      	adcs	r3, r3
 80039f0:	637b      	str	r3, [r7, #52]	; 0x34
 80039f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80039f6:	1912      	adds	r2, r2, r4
 80039f8:	eb45 0303 	adc.w	r3, r5, r3
 80039fc:	f04f 0000 	mov.w	r0, #0
 8003a00:	f04f 0100 	mov.w	r1, #0
 8003a04:	00d9      	lsls	r1, r3, #3
 8003a06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a0a:	00d0      	lsls	r0, r2, #3
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	1911      	adds	r1, r2, r4
 8003a12:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a14:	416b      	adcs	r3, r5
 8003a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	f04f 0300 	mov.w	r3, #0
 8003a22:	1891      	adds	r1, r2, r2
 8003a24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a26:	415b      	adcs	r3, r3
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003a32:	f7fd f8c1 	bl	8000bb8 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4b8c      	ldr	r3, [pc, #560]	; (8003c6c <UART_SetConfig+0x38c>)
 8003a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	2164      	movs	r1, #100	; 0x64
 8003a44:	fb01 f303 	mul.w	r3, r1, r3
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	00db      	lsls	r3, r3, #3
 8003a4c:	3332      	adds	r3, #50	; 0x32
 8003a4e:	4a87      	ldr	r2, [pc, #540]	; (8003c6c <UART_SetConfig+0x38c>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	005b      	lsls	r3, r3, #1
 8003a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a5c:	441e      	add	r6, r3
 8003a5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a60:	4618      	mov	r0, r3
 8003a62:	f04f 0100 	mov.w	r1, #0
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	1894      	adds	r4, r2, r2
 8003a6c:	623c      	str	r4, [r7, #32]
 8003a6e:	415b      	adcs	r3, r3
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
 8003a72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a76:	1812      	adds	r2, r2, r0
 8003a78:	eb41 0303 	adc.w	r3, r1, r3
 8003a7c:	f04f 0400 	mov.w	r4, #0
 8003a80:	f04f 0500 	mov.w	r5, #0
 8003a84:	00dd      	lsls	r5, r3, #3
 8003a86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a8a:	00d4      	lsls	r4, r2, #3
 8003a8c:	4622      	mov	r2, r4
 8003a8e:	462b      	mov	r3, r5
 8003a90:	1814      	adds	r4, r2, r0
 8003a92:	653c      	str	r4, [r7, #80]	; 0x50
 8003a94:	414b      	adcs	r3, r1
 8003a96:	657b      	str	r3, [r7, #84]	; 0x54
 8003a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	1891      	adds	r1, r2, r2
 8003aa4:	61b9      	str	r1, [r7, #24]
 8003aa6:	415b      	adcs	r3, r3
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003ab2:	f7fd f881 	bl	8000bb8 <__aeabi_uldivmod>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	460b      	mov	r3, r1
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <UART_SetConfig+0x38c>)
 8003abc:	fba3 1302 	umull	r1, r3, r3, r2
 8003ac0:	095b      	lsrs	r3, r3, #5
 8003ac2:	2164      	movs	r1, #100	; 0x64
 8003ac4:	fb01 f303 	mul.w	r3, r1, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	3332      	adds	r3, #50	; 0x32
 8003ace:	4a67      	ldr	r2, [pc, #412]	; (8003c6c <UART_SetConfig+0x38c>)
 8003ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad4:	095b      	lsrs	r3, r3, #5
 8003ad6:	f003 0207 	and.w	r2, r3, #7
 8003ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4432      	add	r2, r6
 8003ae0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ae2:	e0b9      	b.n	8003c58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae6:	461c      	mov	r4, r3
 8003ae8:	f04f 0500 	mov.w	r5, #0
 8003aec:	4622      	mov	r2, r4
 8003aee:	462b      	mov	r3, r5
 8003af0:	1891      	adds	r1, r2, r2
 8003af2:	6139      	str	r1, [r7, #16]
 8003af4:	415b      	adcs	r3, r3
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003afc:	1912      	adds	r2, r2, r4
 8003afe:	eb45 0303 	adc.w	r3, r5, r3
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	00d9      	lsls	r1, r3, #3
 8003b0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b10:	00d0      	lsls	r0, r2, #3
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	eb12 0804 	adds.w	r8, r2, r4
 8003b1a:	eb43 0905 	adc.w	r9, r3, r5
 8003b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	008b      	lsls	r3, r1, #2
 8003b32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003b36:	0082      	lsls	r2, r0, #2
 8003b38:	4640      	mov	r0, r8
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	f7fd f83c 	bl	8000bb8 <__aeabi_uldivmod>
 8003b40:	4602      	mov	r2, r0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4b49      	ldr	r3, [pc, #292]	; (8003c6c <UART_SetConfig+0x38c>)
 8003b46:	fba3 2302 	umull	r2, r3, r3, r2
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	011e      	lsls	r6, r3, #4
 8003b4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b50:	4618      	mov	r0, r3
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	4602      	mov	r2, r0
 8003b58:	460b      	mov	r3, r1
 8003b5a:	1894      	adds	r4, r2, r2
 8003b5c:	60bc      	str	r4, [r7, #8]
 8003b5e:	415b      	adcs	r3, r3
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b66:	1812      	adds	r2, r2, r0
 8003b68:	eb41 0303 	adc.w	r3, r1, r3
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	f04f 0500 	mov.w	r5, #0
 8003b74:	00dd      	lsls	r5, r3, #3
 8003b76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b7a:	00d4      	lsls	r4, r2, #3
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	462b      	mov	r3, r5
 8003b80:	1814      	adds	r4, r2, r0
 8003b82:	64bc      	str	r4, [r7, #72]	; 0x48
 8003b84:	414b      	adcs	r3, r1
 8003b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f04f 0100 	mov.w	r1, #0
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	008b      	lsls	r3, r1, #2
 8003b9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ba0:	0082      	lsls	r2, r0, #2
 8003ba2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ba6:	f7fd f807 	bl	8000bb8 <__aeabi_uldivmod>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <UART_SetConfig+0x38c>)
 8003bb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bb4:	095b      	lsrs	r3, r3, #5
 8003bb6:	2164      	movs	r1, #100	; 0x64
 8003bb8:	fb01 f303 	mul.w	r3, r1, r3
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	3332      	adds	r3, #50	; 0x32
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <UART_SetConfig+0x38c>)
 8003bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc8:	095b      	lsrs	r3, r3, #5
 8003bca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bce:	441e      	add	r6, r3
 8003bd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f04f 0100 	mov.w	r1, #0
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	1894      	adds	r4, r2, r2
 8003bde:	603c      	str	r4, [r7, #0]
 8003be0:	415b      	adcs	r3, r3
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003be8:	1812      	adds	r2, r2, r0
 8003bea:	eb41 0303 	adc.w	r3, r1, r3
 8003bee:	f04f 0400 	mov.w	r4, #0
 8003bf2:	f04f 0500 	mov.w	r5, #0
 8003bf6:	00dd      	lsls	r5, r3, #3
 8003bf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bfc:	00d4      	lsls	r4, r2, #3
 8003bfe:	4622      	mov	r2, r4
 8003c00:	462b      	mov	r3, r5
 8003c02:	eb12 0a00 	adds.w	sl, r2, r0
 8003c06:	eb43 0b01 	adc.w	fp, r3, r1
 8003c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f04f 0100 	mov.w	r1, #0
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	008b      	lsls	r3, r1, #2
 8003c1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c22:	0082      	lsls	r2, r0, #2
 8003c24:	4650      	mov	r0, sl
 8003c26:	4659      	mov	r1, fp
 8003c28:	f7fc ffc6 	bl	8000bb8 <__aeabi_uldivmod>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <UART_SetConfig+0x38c>)
 8003c32:	fba3 1302 	umull	r1, r3, r3, r2
 8003c36:	095b      	lsrs	r3, r3, #5
 8003c38:	2164      	movs	r1, #100	; 0x64
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	3332      	adds	r3, #50	; 0x32
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <UART_SetConfig+0x38c>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	f003 020f 	and.w	r2, r3, #15
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4432      	add	r2, r6
 8003c56:	609a      	str	r2, [r3, #8]
}
 8003c58:	bf00      	nop
 8003c5a:	377c      	adds	r7, #124	; 0x7c
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c62:	bf00      	nop
 8003c64:	40011000 	.word	0x40011000
 8003c68:	40011400 	.word	0x40011400
 8003c6c:	51eb851f 	.word	0x51eb851f

08003c70 <Error_Device>:
extern UART_HandleTypeDef huart1;
uint8_t buf2[8]={0};
char str1[30]={0};

static void Error_Device (void)			 // Обработчик ошибок: устройство не является LIS2DS12
{
 8003c70:	b590      	push	{r4, r7, lr}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
	uint8_t strEr[]="DEVICE ERROR\r\n";
 8003c76:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <Error_Device+0x54>)
 8003c78:	463c      	mov	r4, r7
 8003c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c7c:	c407      	stmia	r4!, {r0, r1, r2}
 8003c7e:	8023      	strh	r3, [r4, #0]
 8003c80:	3402      	adds	r4, #2
 8003c82:	0c1b      	lsrs	r3, r3, #16
 8003c84:	7023      	strb	r3, [r4, #0]
	RS_485_ON;
 8003c86:	2201      	movs	r2, #1
 8003c88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003c8c:	480e      	ldr	r0, [pc, #56]	; (8003cc8 <Error_Device+0x58>)
 8003c8e:	f7fd fccd 	bl	800162c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)strEr, strlen(strEr), 0x1000);
 8003c92:	463b      	mov	r3, r7
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7fc faa3 	bl	80001e0 <strlen>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	b29a      	uxth	r2, r3
 8003c9e:	4639      	mov	r1, r7
 8003ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ca4:	4809      	ldr	r0, [pc, #36]	; (8003ccc <Error_Device+0x5c>)
 8003ca6:	f7ff f8c8 	bl	8002e3a <HAL_UART_Transmit>
	HAL_Delay(100);
 8003caa:	2064      	movs	r0, #100	; 0x64
 8003cac:	f7fd f972 	bl	8000f94 <HAL_Delay>
	RS_485_OFF;
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cb6:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <Error_Device+0x58>)
 8003cb8:	f7fd fcb8 	bl	800162c <HAL_GPIO_WritePin>
}
 8003cbc:	bf00      	nop
 8003cbe:	3714      	adds	r7, #20
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd90      	pop	{r4, r7, pc}
 8003cc4:	08007600 	.word	0x08007600
 8003cc8:	40020000 	.word	0x40020000
 8003ccc:	20000228 	.word	0x20000228

08003cd0 <Error_SPI>:

static void Error_SPI (void)			 // Обработчик ошибок: SPI не подключен
{
 8003cd0:	b5b0      	push	{r4, r5, r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
	uint8_t strEr[]="SPI NOT LINKED\r\n";
 8003cd6:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <Error_SPI+0x54>)
 8003cd8:	1d3c      	adds	r4, r7, #4
 8003cda:	461d      	mov	r5, r3
 8003cdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003cde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ce0:	682b      	ldr	r3, [r5, #0]
 8003ce2:	7023      	strb	r3, [r4, #0]
	RS_485_ON;
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003cea:	480f      	ldr	r0, [pc, #60]	; (8003d28 <Error_SPI+0x58>)
 8003cec:	f7fd fc9e 	bl	800162c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)strEr, strlen(strEr), 0x1000);
 8003cf0:	1d3b      	adds	r3, r7, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fa74 	bl	80001e0 <strlen>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d02:	480a      	ldr	r0, [pc, #40]	; (8003d2c <Error_SPI+0x5c>)
 8003d04:	f7ff f899 	bl	8002e3a <HAL_UART_Transmit>
	HAL_Delay(100);
 8003d08:	2064      	movs	r0, #100	; 0x64
 8003d0a:	f7fd f943 	bl	8000f94 <HAL_Delay>
	RS_485_OFF;
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003d14:	4804      	ldr	r0, [pc, #16]	; (8003d28 <Error_SPI+0x58>)
 8003d16:	f7fd fc89 	bl	800162c <HAL_GPIO_WritePin>
}
 8003d1a:	bf00      	nop
 8003d1c:	3718      	adds	r7, #24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bdb0      	pop	{r4, r5, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	08007610 	.word	0x08007610
 8003d28:	40020000 	.word	0x40020000
 8003d2c:	20000228 	.word	0x20000228

08003d30 <SPIx_WriteRead>:

uint8_t SPIx_WriteRead(uint8_t Byte) 	 // Функция работы с SPI
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
	uint8_t receivedbyte = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
	if(HAL_SPI_TransmitReceive(&hspi1,(uint8_t*) &Byte,(uint8_t*) &receivedbyte,1,0x1000)!=HAL_OK)
 8003d3e:	f107 020f 	add.w	r2, r7, #15
 8003d42:	1df9      	adds	r1, r7, #7
 8003d44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	4806      	ldr	r0, [pc, #24]	; (8003d68 <SPIx_WriteRead+0x38>)
 8003d4e:	f7fe f958 	bl	8002002 <HAL_SPI_TransmitReceive>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <SPIx_WriteRead+0x2c>
	{
		Error_SPI();
 8003d58:	f7ff ffba 	bl	8003cd0 <Error_SPI>
	}
	return receivedbyte;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000026c 	.word	0x2000026c

08003d6c <Accel_IO_Read>:

void Accel_IO_Read(uint8_t *pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead) // Функция чтения с акселлерометра
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	70fb      	strb	r3, [r7, #3]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	803b      	strh	r3, [r7, #0]
	if(NumByteToRead>0x01)
 8003d7c:	883b      	ldrh	r3, [r7, #0]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d904      	bls.n	8003d8c <Accel_IO_Read+0x20>
	{
		ReadAddr |= (uint8_t) (READWRITE_CMD | MULTIPLEBYTE_CMD);
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8003d88:	70fb      	strb	r3, [r7, #3]
 8003d8a:	e003      	b.n	8003d94 <Accel_IO_Read+0x28>
	}
	else
	{
		ReadAddr |= (uint8_t) READWRITE_CMD;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003d92:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8003d94:	2200      	movs	r2, #0
 8003d96:	2110      	movs	r1, #16
 8003d98:	4810      	ldr	r0, [pc, #64]	; (8003ddc <Accel_IO_Read+0x70>)
 8003d9a:	f7fd fc47 	bl	800162c <HAL_GPIO_WritePin>
	SPIx_WriteRead(ReadAddr);
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f7ff ffc5 	bl	8003d30 <SPIx_WriteRead>
	while(NumByteToRead>0x00)
 8003da6:	e00c      	b.n	8003dc2 <Accel_IO_Read+0x56>
	{
		 *pBuffer=SPIx_WriteRead(DUMMY_BYTE);
 8003da8:	2000      	movs	r0, #0
 8003daa:	f7ff ffc1 	bl	8003d30 <SPIx_WriteRead>
 8003dae:	4603      	mov	r3, r0
 8003db0:	461a      	mov	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	701a      	strb	r2, [r3, #0]
		 NumByteToRead--;
 8003db6:	883b      	ldrh	r3, [r7, #0]
 8003db8:	3b01      	subs	r3, #1
 8003dba:	803b      	strh	r3, [r7, #0]
		 pBuffer++;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	607b      	str	r3, [r7, #4]
	while(NumByteToRead>0x00)
 8003dc2:	883b      	ldrh	r3, [r7, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d1ef      	bne.n	8003da8 <Accel_IO_Read+0x3c>
	}
	CS_OFF;
 8003dc8:	2201      	movs	r2, #1
 8003dca:	2110      	movs	r1, #16
 8003dcc:	4803      	ldr	r0, [pc, #12]	; (8003ddc <Accel_IO_Read+0x70>)
 8003dce:	f7fd fc2d 	bl	800162c <HAL_GPIO_WritePin>
}
 8003dd2:	bf00      	nop
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40020000 	.word	0x40020000

08003de0 <Accel_IO_Write>:

void Accel_IO_Write(uint8_t *pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite) // Функция записи в акселлерометр
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	70fb      	strb	r3, [r7, #3]
 8003dec:	4613      	mov	r3, r2
 8003dee:	803b      	strh	r3, [r7, #0]
	CS_OFF;
 8003df0:	2201      	movs	r2, #1
 8003df2:	2110      	movs	r1, #16
 8003df4:	4815      	ldr	r0, [pc, #84]	; (8003e4c <Accel_IO_Write+0x6c>)
 8003df6:	f7fd fc19 	bl	800162c <HAL_GPIO_WritePin>
	if(NumByteToWrite>0x01)
 8003dfa:	883b      	ldrh	r3, [r7, #0]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d903      	bls.n	8003e08 <Accel_IO_Write+0x28>
	{
		WriteAddr |= (uint8_t) MULTIPLEBYTE_CMD;
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e06:	70fb      	strb	r3, [r7, #3]
	}
	CS_ON;
 8003e08:	2200      	movs	r2, #0
 8003e0a:	2110      	movs	r1, #16
 8003e0c:	480f      	ldr	r0, [pc, #60]	; (8003e4c <Accel_IO_Write+0x6c>)
 8003e0e:	f7fd fc0d 	bl	800162c <HAL_GPIO_WritePin>
	SPIx_WriteRead(WriteAddr);
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f7ff ff8b 	bl	8003d30 <SPIx_WriteRead>
	while(NumByteToWrite>=0x01)
 8003e1a:	e00a      	b.n	8003e32 <Accel_IO_Write+0x52>
	{
		SPIx_WriteRead(*pBuffer);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff85 	bl	8003d30 <SPIx_WriteRead>
		NumByteToWrite--;
 8003e26:	883b      	ldrh	r3, [r7, #0]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	803b      	strh	r3, [r7, #0]
		pBuffer++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	607b      	str	r3, [r7, #4]
	while(NumByteToWrite>=0x01)
 8003e32:	883b      	ldrh	r3, [r7, #0]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1f1      	bne.n	8003e1c <Accel_IO_Write+0x3c>
	}
	CS_OFF;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	2110      	movs	r1, #16
 8003e3c:	4803      	ldr	r0, [pc, #12]	; (8003e4c <Accel_IO_Write+0x6c>)
 8003e3e:	f7fd fbf5 	bl	800162c <HAL_GPIO_WritePin>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40020000 	.word	0x40020000

08003e50 <Accel_ReadID>:

uint8_t Accel_ReadID(void)			 // Функция чтения идентификатора акселлерометра
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0;
 8003e56:	2300      	movs	r3, #0
 8003e58:	71fb      	strb	r3, [r7, #7]
  Accel_IO_Read(&ctrl, LIS2DS12_WHO_AM_I_ADDR, 1);
 8003e5a:	1dfb      	adds	r3, r7, #7
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	210f      	movs	r1, #15
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff ff83 	bl	8003d6c <Accel_IO_Read>
  return ctrl;
 8003e66:	79fb      	ldrb	r3, [r7, #7]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <Accel_GetXYZ>:

void Accel_GetXYZ(int16_t* pData)	 // Функция получения данных с акселлерометра
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
	int8_t buffer[6];
	uint8_t ctrl, i = 0x00;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	77fb      	strb	r3, [r7, #31]
	float sensitivity = LIS2DS12_SENSITIVITY_0_06G;
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <Accel_GetXYZ+0xe8>)
 8003e7e:	61bb      	str	r3, [r7, #24]
	float valueinfloat;
	Accel_IO_Read(&ctrl, LIS2DS12_CTRL1, 1);
 8003e80:	f107 030b 	add.w	r3, r7, #11
 8003e84:	2201      	movs	r2, #1
 8003e86:	2120      	movs	r1, #32
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7ff ff6f 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[0], LIS2DS12_OUT_X_L, 1);
 8003e8e:	f107 030c 	add.w	r3, r7, #12
 8003e92:	2201      	movs	r2, #1
 8003e94:	2128      	movs	r1, #40	; 0x28
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff ff68 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[1], LIS2DS12_OUT_X_H, 1);
 8003e9c:	f107 030c 	add.w	r3, r7, #12
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	2129      	movs	r1, #41	; 0x29
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff ff60 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[2], LIS2DS12_OUT_Y_L, 1);
 8003eac:	f107 030c 	add.w	r3, r7, #12
 8003eb0:	3302      	adds	r3, #2
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	212a      	movs	r1, #42	; 0x2a
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff ff58 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[3], LIS2DS12_OUT_Y_H, 1);
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	3303      	adds	r3, #3
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	212b      	movs	r1, #43	; 0x2b
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff ff50 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[4], LIS2DS12_OUT_Z_L, 1);
 8003ecc:	f107 030c 	add.w	r3, r7, #12
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff48 	bl	8003d6c <Accel_IO_Read>
	Accel_IO_Read((uint8_t*)&buffer[5], LIS2DS12_OUT_Z_H, 1);
 8003edc:	f107 030c 	add.w	r3, r7, #12
 8003ee0:	3305      	adds	r3, #5
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	212d      	movs	r1, #45	; 0x2d
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff40 	bl	8003d6c <Accel_IO_Read>
	for(i=0;i<3;i++)
 8003eec:	2300      	movs	r3, #0
 8003eee:	77fb      	strb	r3, [r7, #31]
 8003ef0:	e029      	b.n	8003f46 <Accel_GetXYZ+0xd6>
	{
		valueinfloat = ((buffer[2*i+1]  << 8) + buffer[2*i])*sensitivity;
 8003ef2:	7ffb      	ldrb	r3, [r7, #31]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	f107 0220 	add.w	r2, r7, #32
 8003efc:	4413      	add	r3, r2
 8003efe:	f913 3c14 	ldrsb.w	r3, [r3, #-20]
 8003f02:	021b      	lsls	r3, r3, #8
 8003f04:	7ffa      	ldrb	r2, [r7, #31]
 8003f06:	0052      	lsls	r2, r2, #1
 8003f08:	f107 0120 	add.w	r1, r7, #32
 8003f0c:	440a      	add	r2, r1
 8003f0e:	f912 2c14 	ldrsb.w	r2, [r2, #-20]
 8003f12:	4413      	add	r3, r2
 8003f14:	ee07 3a90 	vmov	s15, r3
 8003f18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f1c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f24:	edc7 7a05 	vstr	s15, [r7, #20]
		pData[i]=(int16_t)valueinfloat;
 8003f28:	7ffb      	ldrb	r3, [r7, #31]
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	4413      	add	r3, r2
 8003f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f38:	ee17 2a90 	vmov	r2, s15
 8003f3c:	b212      	sxth	r2, r2
 8003f3e:	801a      	strh	r2, [r3, #0]
	for(i=0;i<3;i++)
 8003f40:	7ffb      	ldrb	r3, [r7, #31]
 8003f42:	3301      	adds	r3, #1
 8003f44:	77fb      	strb	r3, [r7, #31]
 8003f46:	7ffb      	ldrb	r3, [r7, #31]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d9d2      	bls.n	8003ef2 <Accel_GetXYZ+0x82>
	}
}
 8003f4c:	bf00      	nop
 8003f4e:	bf00      	nop
 8003f50:	3720      	adds	r7, #32
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	3d75c28f 	.word	0x3d75c28f

08003f5c <Accel_ReadAcc>:

void Accel_ReadAcc(void) 			// Функция обработки данных с акселлерометра и отправка по RS485
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
	int16_t buffer[3]={0};
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	809a      	strh	r2, [r3, #4]
	int16_t xval, yval, zval = 0x0000;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	81fb      	strh	r3, [r7, #14]
	Accel_GetXYZ(buffer);
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff ff7d 	bl	8003e70 <Accel_GetXYZ>
	xval = buffer[0];
 8003f76:	88bb      	ldrh	r3, [r7, #4]
 8003f78:	81bb      	strh	r3, [r7, #12]
	yval = buffer[1];
 8003f7a:	88fb      	ldrh	r3, [r7, #6]
 8003f7c:	817b      	strh	r3, [r7, #10]
	zval = buffer[2];
 8003f7e:	893b      	ldrh	r3, [r7, #8]
 8003f80:	81fb      	strh	r3, [r7, #14]
	sprintf(str1, "X:%06d Y:%06d Z:%06d\r\n", xval, yval, zval);
 8003f82:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003f86:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003f8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	460b      	mov	r3, r1
 8003f92:	4911      	ldr	r1, [pc, #68]	; (8003fd8 <Accel_ReadAcc+0x7c>)
 8003f94:	4811      	ldr	r0, [pc, #68]	; (8003fdc <Accel_ReadAcc+0x80>)
 8003f96:	f001 f8f9 	bl	800518c <siprintf>
	RS_485_ON;
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fa0:	480f      	ldr	r0, [pc, #60]	; (8003fe0 <Accel_ReadAcc+0x84>)
 8003fa2:	f7fd fb43 	bl	800162c <HAL_GPIO_WritePin>
	HAL_UART_Transmit(&huart1, (uint8_t*)str1, strlen(str1), 0x1000);
 8003fa6:	480d      	ldr	r0, [pc, #52]	; (8003fdc <Accel_ReadAcc+0x80>)
 8003fa8:	f7fc f91a 	bl	80001e0 <strlen>
 8003fac:	4603      	mov	r3, r0
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb4:	4909      	ldr	r1, [pc, #36]	; (8003fdc <Accel_ReadAcc+0x80>)
 8003fb6:	480b      	ldr	r0, [pc, #44]	; (8003fe4 <Accel_ReadAcc+0x88>)
 8003fb8:	f7fe ff3f 	bl	8002e3a <HAL_UART_Transmit>
	RS_485_OFF;
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fc2:	4807      	ldr	r0, [pc, #28]	; (8003fe0 <Accel_ReadAcc+0x84>)
 8003fc4:	f7fd fb32 	bl	800162c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003fc8:	2064      	movs	r0, #100	; 0x64
 8003fca:	f7fc ffe3 	bl	8000f94 <HAL_Delay>
}
 8003fce:	bf00      	nop
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	08007624 	.word	0x08007624
 8003fdc:	200001f8 	.word	0x200001f8
 8003fe0:	40020000 	.word	0x40020000
 8003fe4:	20000228 	.word	0x20000228

08003fe8 <Accel_Ini>:

void Accel_Ini(void)				 // Функция инициализации акселлерометра
{
 8003fe8:	b5b0      	push	{r4, r5, r7, lr}
 8003fea:	b088      	sub	sp, #32
 8003fec:	af00      	add	r7, sp, #0
	uint8_t ctrl1 = 0x00;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	77fb      	strb	r3, [r7, #31]
	uint8_t ctrl2 = 0x00;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	77bb      	strb	r3, [r7, #30]
	uint8_t strCheck[]="DEVICE HAS BEEN FOUNDED\r\n";
 8003ff6:	4b23      	ldr	r3, [pc, #140]	; (8004084 <Accel_Ini+0x9c>)
 8003ff8:	1d3c      	adds	r4, r7, #4
 8003ffa:	461d      	mov	r5, r3
 8003ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004000:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004004:	c403      	stmia	r4!, {r0, r1}
 8004006:	8022      	strh	r2, [r4, #0]
	HAL_Delay(500);
 8004008:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800400c:	f7fc ffc2 	bl	8000f94 <HAL_Delay>
	if(Accel_ReadID()==0x43)
 8004010:	f7ff ff1e 	bl	8003e50 <Accel_ReadID>
 8004014:	4603      	mov	r3, r0
 8004016:	2b43      	cmp	r3, #67	; 0x43
 8004018:	d11b      	bne.n	8004052 <Accel_Ini+0x6a>
		{
		RS_485_ON;
 800401a:	2201      	movs	r2, #1
 800401c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004020:	4819      	ldr	r0, [pc, #100]	; (8004088 <Accel_Ini+0xa0>)
 8004022:	f7fd fb03 	bl	800162c <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart1, (uint8_t*)strCheck, strlen(strCheck), 0x1000);
 8004026:	1d3b      	adds	r3, r7, #4
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc f8d9 	bl	80001e0 <strlen>
 800402e:	4603      	mov	r3, r0
 8004030:	b29a      	uxth	r2, r3
 8004032:	1d39      	adds	r1, r7, #4
 8004034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004038:	4814      	ldr	r0, [pc, #80]	; (800408c <Accel_Ini+0xa4>)
 800403a:	f7fe fefe 	bl	8002e3a <HAL_UART_Transmit>
		HAL_Delay(100);
 800403e:	2064      	movs	r0, #100	; 0x64
 8004040:	f7fc ffa8 	bl	8000f94 <HAL_Delay>
		RS_485_OFF;;
 8004044:	2200      	movs	r2, #0
 8004046:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800404a:	480f      	ldr	r0, [pc, #60]	; (8004088 <Accel_Ini+0xa0>)
 800404c:	f7fd faee 	bl	800162c <HAL_GPIO_WritePin>
 8004050:	e001      	b.n	8004056 <Accel_Ini+0x6e>
		}
	else Error_Device();
 8004052:	f7ff fe0d 	bl	8003c70 <Error_Device>
	ctrl1 = (uint8_t) (0x60);
 8004056:	2360      	movs	r3, #96	; 0x60
 8004058:	77fb      	strb	r3, [r7, #31]
	ctrl2 = (uint8_t) (0x20);
 800405a:	2320      	movs	r3, #32
 800405c:	77bb      	strb	r3, [r7, #30]
	Accel_IO_Write(&ctrl2, LIS2DS12_CTRL2, 1);
 800405e:	f107 031e 	add.w	r3, r7, #30
 8004062:	2201      	movs	r2, #1
 8004064:	2121      	movs	r1, #33	; 0x21
 8004066:	4618      	mov	r0, r3
 8004068:	f7ff feba 	bl	8003de0 <Accel_IO_Write>
	Accel_IO_Write(&ctrl1, LIS2DS12_CTRL1, 1);
 800406c:	f107 031f 	add.w	r3, r7, #31
 8004070:	2201      	movs	r2, #1
 8004072:	2120      	movs	r1, #32
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff feb3 	bl	8003de0 <Accel_IO_Write>
}
 800407a:	bf00      	nop
 800407c:	3720      	adds	r7, #32
 800407e:	46bd      	mov	sp, r7
 8004080:	bdb0      	pop	{r4, r5, r7, pc}
 8004082:	bf00      	nop
 8004084:	0800763c 	.word	0x0800763c
 8004088:	40020000 	.word	0x40020000
 800408c:	20000228 	.word	0x20000228

08004090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004094:	f7fc ff0c 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004098:	f000 f814 	bl	80040c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800409c:	f000 f934 	bl	8004308 <MX_GPIO_Init>
  MX_SPI1_Init();
 80040a0:	f000 f87a 	bl	8004198 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80040a4:	f000 f906 	bl	80042b4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80040a8:	f000 f8ac 	bl	8004204 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Accel_Ini(); 				// Вызов функции инициализации акселлерометра
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80040ac:	2104      	movs	r1, #4
 80040ae:	4804      	ldr	r0, [pc, #16]	; (80040c0 <main+0x30>)
 80040b0:	f7fe fa64 	bl	800257c <HAL_TIM_PWM_Start>
  Accel_Ini();
 80040b4:	f7ff ff98 	bl	8003fe8 <Accel_Ini>
	//uint8_t state = 0;
	//LEDS_TEST(); 			// Вызов функции проверки светодиодов
	//PWM_TEST(); 			// Вызов функции проверки PWM
	//RS485_TEST();			// Вызов функции проверки RS485
	//Accel_Ini();			// Вызов функция инициализации акселлерометра
	Accel_ReadAcc();
 80040b8:	f7ff ff50 	bl	8003f5c <Accel_ReadAcc>
 80040bc:	e7fc      	b.n	80040b8 <main+0x28>
 80040be:	bf00      	nop
 80040c0:	200002c4 	.word	0x200002c4

080040c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b094      	sub	sp, #80	; 0x50
 80040c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ca:	f107 0320 	add.w	r3, r7, #32
 80040ce:	2230      	movs	r2, #48	; 0x30
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fbe8 	bl	80048a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040d8:	f107 030c 	add.w	r3, r7, #12
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	605a      	str	r2, [r3, #4]
 80040e2:	609a      	str	r2, [r3, #8]
 80040e4:	60da      	str	r2, [r3, #12]
 80040e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80040e8:	2300      	movs	r3, #0
 80040ea:	60bb      	str	r3, [r7, #8]
 80040ec:	4b28      	ldr	r3, [pc, #160]	; (8004190 <SystemClock_Config+0xcc>)
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	4a27      	ldr	r2, [pc, #156]	; (8004190 <SystemClock_Config+0xcc>)
 80040f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040f6:	6413      	str	r3, [r2, #64]	; 0x40
 80040f8:	4b25      	ldr	r3, [pc, #148]	; (8004190 <SystemClock_Config+0xcc>)
 80040fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	60bb      	str	r3, [r7, #8]
 8004102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004104:	2300      	movs	r3, #0
 8004106:	607b      	str	r3, [r7, #4]
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <SystemClock_Config+0xd0>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004110:	4a20      	ldr	r2, [pc, #128]	; (8004194 <SystemClock_Config+0xd0>)
 8004112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	4b1e      	ldr	r3, [pc, #120]	; (8004194 <SystemClock_Config+0xd0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004120:	607b      	str	r3, [r7, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004124:	2301      	movs	r3, #1
 8004126:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800412e:	2302      	movs	r3, #2
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8004138:	2319      	movs	r3, #25
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800413c:	23a8      	movs	r3, #168	; 0xa8
 800413e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004140:	2302      	movs	r3, #2
 8004142:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004144:	2304      	movs	r3, #4
 8004146:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004148:	f107 0320 	add.w	r3, r7, #32
 800414c:	4618      	mov	r0, r3
 800414e:	f7fd fa87 	bl	8001660 <HAL_RCC_OscConfig>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004158:	f000 f928 	bl	80043ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800415c:	230f      	movs	r3, #15
 800415e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004160:	2302      	movs	r3, #2
 8004162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800416c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800416e:	2300      	movs	r3, #0
 8004170:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004172:	f107 030c 	add.w	r3, r7, #12
 8004176:	2102      	movs	r1, #2
 8004178:	4618      	mov	r0, r3
 800417a:	f7fd fce9 	bl	8001b50 <HAL_RCC_ClockConfig>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004184:	f000 f912 	bl	80043ac <Error_Handler>
  }
}
 8004188:	bf00      	nop
 800418a:	3750      	adds	r7, #80	; 0x50
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	40023800 	.word	0x40023800
 8004194:	40007000 	.word	0x40007000

08004198 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800419c:	4b17      	ldr	r3, [pc, #92]	; (80041fc <MX_SPI1_Init+0x64>)
 800419e:	4a18      	ldr	r2, [pc, #96]	; (8004200 <MX_SPI1_Init+0x68>)
 80041a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80041a2:	4b16      	ldr	r3, [pc, #88]	; (80041fc <MX_SPI1_Init+0x64>)
 80041a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80041a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80041aa:	4b14      	ldr	r3, [pc, #80]	; (80041fc <MX_SPI1_Init+0x64>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80041b0:	4b12      	ldr	r3, [pc, #72]	; (80041fc <MX_SPI1_Init+0x64>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80041b6:	4b11      	ldr	r3, [pc, #68]	; (80041fc <MX_SPI1_Init+0x64>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80041bc:	4b0f      	ldr	r3, [pc, #60]	; (80041fc <MX_SPI1_Init+0x64>)
 80041be:	2201      	movs	r2, #1
 80041c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80041c2:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <MX_SPI1_Init+0x64>)
 80041c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80041ca:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <MX_SPI1_Init+0x64>)
 80041cc:	2208      	movs	r2, #8
 80041ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <MX_SPI1_Init+0x64>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80041d6:	4b09      	ldr	r3, [pc, #36]	; (80041fc <MX_SPI1_Init+0x64>)
 80041d8:	2200      	movs	r2, #0
 80041da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <MX_SPI1_Init+0x64>)
 80041de:	2200      	movs	r2, #0
 80041e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <MX_SPI1_Init+0x64>)
 80041e4:	220a      	movs	r2, #10
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80041e8:	4804      	ldr	r0, [pc, #16]	; (80041fc <MX_SPI1_Init+0x64>)
 80041ea:	f7fd fe81 	bl	8001ef0 <HAL_SPI_Init>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d001      	beq.n	80041f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80041f4:	f000 f8da 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80041f8:	bf00      	nop
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	2000026c 	.word	0x2000026c
 8004200:	40013000 	.word	0x40013000

08004204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800420a:	f107 0320 	add.w	r3, r7, #32
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
 8004212:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004214:	1d3b      	adds	r3, r7, #4
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	611a      	str	r2, [r3, #16]
 8004222:	615a      	str	r2, [r3, #20]
 8004224:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004226:	4b22      	ldr	r3, [pc, #136]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004228:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800422c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800422e:	4b20      	ldr	r3, [pc, #128]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004230:	2240      	movs	r2, #64	; 0x40
 8004232:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004234:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004236:	2200      	movs	r2, #0
 8004238:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2047;
 800423a:	4b1d      	ldr	r3, [pc, #116]	; (80042b0 <MX_TIM2_Init+0xac>)
 800423c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004240:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004242:	4b1b      	ldr	r3, [pc, #108]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004244:	2200      	movs	r2, #0
 8004246:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004248:	4b19      	ldr	r3, [pc, #100]	; (80042b0 <MX_TIM2_Init+0xac>)
 800424a:	2200      	movs	r2, #0
 800424c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800424e:	4818      	ldr	r0, [pc, #96]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004250:	f7fe f944 	bl	80024dc <HAL_TIM_PWM_Init>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800425a:	f000 f8a7 	bl	80043ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004262:	2300      	movs	r3, #0
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004266:	f107 0320 	add.w	r3, r7, #32
 800426a:	4619      	mov	r1, r3
 800426c:	4810      	ldr	r0, [pc, #64]	; (80042b0 <MX_TIM2_Init+0xac>)
 800426e:	f7fe fd29 	bl	8002cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004278:	f000 f898 	bl	80043ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800427c:	2360      	movs	r3, #96	; 0x60
 800427e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004280:	2300      	movs	r3, #0
 8004282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004284:	2300      	movs	r3, #0
 8004286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800428c:	1d3b      	adds	r3, r7, #4
 800428e:	2204      	movs	r2, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4807      	ldr	r0, [pc, #28]	; (80042b0 <MX_TIM2_Init+0xac>)
 8004294:	f7fe fa22 	bl	80026dc <HAL_TIM_PWM_ConfigChannel>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800429e:	f000 f885 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80042a2:	4803      	ldr	r0, [pc, #12]	; (80042b0 <MX_TIM2_Init+0xac>)
 80042a4:	f000 f918 	bl	80044d8 <HAL_TIM_MspPostInit>

}
 80042a8:	bf00      	nop
 80042aa:	3728      	adds	r7, #40	; 0x28
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	200002c4 	.word	0x200002c4

080042b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ba:	4a12      	ldr	r2, [pc, #72]	; (8004304 <MX_USART1_UART_Init+0x50>)
 80042bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042be:	4b10      	ldr	r3, [pc, #64]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80042c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80042cc:	4b0c      	ldr	r3, [pc, #48]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ce:	2200      	movs	r2, #0
 80042d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80042d2:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80042d8:	4b09      	ldr	r3, [pc, #36]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042da:	220c      	movs	r2, #12
 80042dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80042de:	4b08      	ldr	r3, [pc, #32]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042e6:	2200      	movs	r2, #0
 80042e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80042ea:	4805      	ldr	r0, [pc, #20]	; (8004300 <MX_USART1_UART_Init+0x4c>)
 80042ec:	f7fe fd58 	bl	8002da0 <HAL_UART_Init>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80042f6:	f000 f859 	bl	80043ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	20000228 	.word	0x20000228
 8004304:	40011000 	.word	0x40011000

08004308 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800430e:	f107 030c 	add.w	r3, r7, #12
 8004312:	2200      	movs	r2, #0
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	605a      	str	r2, [r3, #4]
 8004318:	609a      	str	r2, [r3, #8]
 800431a:	60da      	str	r2, [r3, #12]
 800431c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800431e:	2300      	movs	r3, #0
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	4b20      	ldr	r3, [pc, #128]	; (80043a4 <MX_GPIO_Init+0x9c>)
 8004324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004326:	4a1f      	ldr	r2, [pc, #124]	; (80043a4 <MX_GPIO_Init+0x9c>)
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	6313      	str	r3, [r2, #48]	; 0x30
 800432e:	4b1d      	ldr	r3, [pc, #116]	; (80043a4 <MX_GPIO_Init+0x9c>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004336:	60bb      	str	r3, [r7, #8]
 8004338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	607b      	str	r3, [r7, #4]
 800433e:	4b19      	ldr	r3, [pc, #100]	; (80043a4 <MX_GPIO_Init+0x9c>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <MX_GPIO_Init+0x9c>)
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	6313      	str	r3, [r2, #48]	; 0x30
 800434a:	4b16      	ldr	r3, [pc, #88]	; (80043a4 <MX_GPIO_Init+0x9c>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f003 0301 	and.w	r3, r3, #1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8004356:	2200      	movs	r2, #0
 8004358:	f641 0114 	movw	r1, #6164	; 0x1814
 800435c:	4812      	ldr	r0, [pc, #72]	; (80043a8 <MX_GPIO_Init+0xa0>)
 800435e:	f7fd f965 	bl	800162c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_11|GPIO_PIN_12;
 8004362:	f641 0304 	movw	r3, #6148	; 0x1804
 8004366:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004368:	2301      	movs	r3, #1
 800436a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800436c:	2300      	movs	r3, #0
 800436e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004370:	2300      	movs	r3, #0
 8004372:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004374:	f107 030c 	add.w	r3, r7, #12
 8004378:	4619      	mov	r1, r3
 800437a:	480b      	ldr	r0, [pc, #44]	; (80043a8 <MX_GPIO_Init+0xa0>)
 800437c:	f7fc ffd2 	bl	8001324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004380:	2310      	movs	r3, #16
 8004382:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800438c:	2301      	movs	r3, #1
 800438e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	4619      	mov	r1, r3
 8004396:	4804      	ldr	r0, [pc, #16]	; (80043a8 <MX_GPIO_Init+0xa0>)
 8004398:	f7fc ffc4 	bl	8001324 <HAL_GPIO_Init>

}
 800439c:	bf00      	nop
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40020000 	.word	0x40020000

080043ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80043b0:	b672      	cpsid	i
}
 80043b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80043b4:	e7fe      	b.n	80043b4 <Error_Handler+0x8>
	...

080043b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043be:	2300      	movs	r3, #0
 80043c0:	607b      	str	r3, [r7, #4]
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <HAL_MspInit+0x4c>)
 80043c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043c6:	4a0f      	ldr	r2, [pc, #60]	; (8004404 <HAL_MspInit+0x4c>)
 80043c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043cc:	6453      	str	r3, [r2, #68]	; 0x44
 80043ce:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_MspInit+0x4c>)
 80043d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d6:	607b      	str	r3, [r7, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043da:	2300      	movs	r3, #0
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_MspInit+0x4c>)
 80043e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_MspInit+0x4c>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	6413      	str	r3, [r2, #64]	; 0x40
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_MspInit+0x4c>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a19      	ldr	r2, [pc, #100]	; (800448c <HAL_SPI_MspInit+0x84>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d12b      	bne.n	8004482 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	613b      	str	r3, [r7, #16]
 800442e:	4b18      	ldr	r3, [pc, #96]	; (8004490 <HAL_SPI_MspInit+0x88>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a17      	ldr	r2, [pc, #92]	; (8004490 <HAL_SPI_MspInit+0x88>)
 8004434:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b15      	ldr	r3, [pc, #84]	; (8004490 <HAL_SPI_MspInit+0x88>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004442:	613b      	str	r3, [r7, #16]
 8004444:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	4b11      	ldr	r3, [pc, #68]	; (8004490 <HAL_SPI_MspInit+0x88>)
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a10      	ldr	r2, [pc, #64]	; (8004490 <HAL_SPI_MspInit+0x88>)
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	6313      	str	r3, [r2, #48]	; 0x30
 8004456:	4b0e      	ldr	r3, [pc, #56]	; (8004490 <HAL_SPI_MspInit+0x88>)
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004462:	23e0      	movs	r3, #224	; 0xe0
 8004464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	2303      	movs	r3, #3
 8004470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004472:	2305      	movs	r3, #5
 8004474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004476:	f107 0314 	add.w	r3, r7, #20
 800447a:	4619      	mov	r1, r3
 800447c:	4805      	ldr	r0, [pc, #20]	; (8004494 <HAL_SPI_MspInit+0x8c>)
 800447e:	f7fc ff51 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004482:	bf00      	nop
 8004484:	3728      	adds	r7, #40	; 0x28
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40013000 	.word	0x40013000
 8004490:	40023800 	.word	0x40023800
 8004494:	40020000 	.word	0x40020000

08004498 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d10d      	bne.n	80044c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b09      	ldr	r3, [pc, #36]	; (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	4a08      	ldr	r2, [pc, #32]	; (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	6413      	str	r3, [r2, #64]	; 0x40
 80044ba:	4b06      	ldr	r3, [pc, #24]	; (80044d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	40023800 	.word	0x40023800

080044d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	2200      	movs	r2, #0
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	609a      	str	r2, [r3, #8]
 80044ec:	60da      	str	r2, [r3, #12]
 80044ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044f8:	d11d      	bne.n	8004536 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	4b10      	ldr	r3, [pc, #64]	; (8004540 <HAL_TIM_MspPostInit+0x68>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <HAL_TIM_MspPostInit+0x68>)
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	6313      	str	r3, [r2, #48]	; 0x30
 800450a:	4b0d      	ldr	r3, [pc, #52]	; (8004540 <HAL_TIM_MspPostInit+0x68>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	f003 0301 	and.w	r3, r3, #1
 8004512:	60bb      	str	r3, [r7, #8]
 8004514:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004516:	2302      	movs	r3, #2
 8004518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004522:	2300      	movs	r3, #0
 8004524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004526:	2301      	movs	r3, #1
 8004528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452a:	f107 030c 	add.w	r3, r7, #12
 800452e:	4619      	mov	r1, r3
 8004530:	4804      	ldr	r0, [pc, #16]	; (8004544 <HAL_TIM_MspPostInit+0x6c>)
 8004532:	f7fc fef7 	bl	8001324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004536:	bf00      	nop
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800
 8004544:	40020000 	.word	0x40020000

08004548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004550:	f107 0314 	add.w	r3, r7, #20
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	609a      	str	r2, [r3, #8]
 800455c:	60da      	str	r2, [r3, #12]
 800455e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1d      	ldr	r2, [pc, #116]	; (80045dc <HAL_UART_MspInit+0x94>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d134      	bne.n	80045d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800456a:	2300      	movs	r3, #0
 800456c:	613b      	str	r3, [r7, #16]
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <HAL_UART_MspInit+0x98>)
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <HAL_UART_MspInit+0x98>)
 8004574:	f043 0310 	orr.w	r3, r3, #16
 8004578:	6453      	str	r3, [r2, #68]	; 0x44
 800457a:	4b19      	ldr	r3, [pc, #100]	; (80045e0 <HAL_UART_MspInit+0x98>)
 800457c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
 800458a:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <HAL_UART_MspInit+0x98>)
 800458c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458e:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <HAL_UART_MspInit+0x98>)
 8004590:	f043 0301 	orr.w	r3, r3, #1
 8004594:	6313      	str	r3, [r2, #48]	; 0x30
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <HAL_UART_MspInit+0x98>)
 8004598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80045a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80045a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a8:	2302      	movs	r3, #2
 80045aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045b0:	2303      	movs	r3, #3
 80045b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045b4:	2307      	movs	r3, #7
 80045b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045b8:	f107 0314 	add.w	r3, r7, #20
 80045bc:	4619      	mov	r1, r3
 80045be:	4809      	ldr	r0, [pc, #36]	; (80045e4 <HAL_UART_MspInit+0x9c>)
 80045c0:	f7fc feb0 	bl	8001324 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	2025      	movs	r0, #37	; 0x25
 80045ca:	f7fc fde2 	bl	8001192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045ce:	2025      	movs	r0, #37	; 0x25
 80045d0:	f7fc fdfb 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80045d4:	bf00      	nop
 80045d6:	3728      	adds	r7, #40	; 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40011000 	.word	0x40011000
 80045e0:	40023800 	.word	0x40023800
 80045e4:	40020000 	.word	0x40020000

080045e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045ec:	e7fe      	b.n	80045ec <NMI_Handler+0x4>

080045ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045ee:	b480      	push	{r7}
 80045f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045f2:	e7fe      	b.n	80045f2 <HardFault_Handler+0x4>

080045f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045f4:	b480      	push	{r7}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045f8:	e7fe      	b.n	80045f8 <MemManage_Handler+0x4>

080045fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045fa:	b480      	push	{r7}
 80045fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045fe:	e7fe      	b.n	80045fe <BusFault_Handler+0x4>

08004600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004604:	e7fe      	b.n	8004604 <UsageFault_Handler+0x4>

08004606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004606:	b480      	push	{r7}
 8004608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004614:	b480      	push	{r7}
 8004616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004618:	bf00      	nop
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr

08004622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004622:	b480      	push	{r7}
 8004624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004634:	f7fc fc8e 	bl	8000f54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004638:	bf00      	nop
 800463a:	bd80      	pop	{r7, pc}

0800463c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004640:	4802      	ldr	r0, [pc, #8]	; (800464c <USART1_IRQHandler+0x10>)
 8004642:	f7fe fc8d 	bl	8002f60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004646:	bf00      	nop
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000228 	.word	0x20000228

08004650 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	return 1;
 8004654:	2301      	movs	r3, #1
}
 8004656:	4618      	mov	r0, r3
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_kill>:

int _kill(int pid, int sig)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800466a:	f000 f8f3 	bl	8004854 <__errno>
 800466e:	4603      	mov	r3, r0
 8004670:	2216      	movs	r2, #22
 8004672:	601a      	str	r2, [r3, #0]
	return -1;
 8004674:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004678:	4618      	mov	r0, r3
 800467a:	3708      	adds	r7, #8
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <_exit>:

void _exit (int status)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004688:	f04f 31ff 	mov.w	r1, #4294967295
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f7ff ffe7 	bl	8004660 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004692:	e7fe      	b.n	8004692 <_exit+0x12>

08004694 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e00a      	b.n	80046bc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80046a6:	f3af 8000 	nop.w
 80046aa:	4601      	mov	r1, r0
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	60ba      	str	r2, [r7, #8]
 80046b2:	b2ca      	uxtb	r2, r1
 80046b4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	3301      	adds	r3, #1
 80046ba:	617b      	str	r3, [r7, #20]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	dbf0      	blt.n	80046a6 <_read+0x12>
	}

return len;
 80046c4:	687b      	ldr	r3, [r7, #4]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	60f8      	str	r0, [r7, #12]
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046da:	2300      	movs	r3, #0
 80046dc:	617b      	str	r3, [r7, #20]
 80046de:	e009      	b.n	80046f4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	1c5a      	adds	r2, r3, #1
 80046e4:	60ba      	str	r2, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	3301      	adds	r3, #1
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	dbf1      	blt.n	80046e0 <_write+0x12>
	}
	return len;
 80046fc:	687b      	ldr	r3, [r7, #4]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <_close>:

int _close(int file)
{
 8004706:	b480      	push	{r7}
 8004708:	b083      	sub	sp, #12
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
	return -1;
 800470e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
 8004726:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800472e:	605a      	str	r2, [r3, #4]
	return 0;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	370c      	adds	r7, #12
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <_isatty>:

int _isatty(int file)
{
 800473e:	b480      	push	{r7}
 8004740:	b083      	sub	sp, #12
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
	return 1;
 8004746:	2301      	movs	r3, #1
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
	return 0;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
	...

08004770 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004778:	4a14      	ldr	r2, [pc, #80]	; (80047cc <_sbrk+0x5c>)
 800477a:	4b15      	ldr	r3, [pc, #84]	; (80047d0 <_sbrk+0x60>)
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <_sbrk+0x64>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800478c:	4b11      	ldr	r3, [pc, #68]	; (80047d4 <_sbrk+0x64>)
 800478e:	4a12      	ldr	r2, [pc, #72]	; (80047d8 <_sbrk+0x68>)
 8004790:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004792:	4b10      	ldr	r3, [pc, #64]	; (80047d4 <_sbrk+0x64>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4413      	add	r3, r2
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	429a      	cmp	r2, r3
 800479e:	d207      	bcs.n	80047b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047a0:	f000 f858 	bl	8004854 <__errno>
 80047a4:	4603      	mov	r3, r0
 80047a6:	220c      	movs	r2, #12
 80047a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047aa:	f04f 33ff 	mov.w	r3, #4294967295
 80047ae:	e009      	b.n	80047c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047b0:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <_sbrk+0x64>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047b6:	4b07      	ldr	r3, [pc, #28]	; (80047d4 <_sbrk+0x64>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4413      	add	r3, r2
 80047be:	4a05      	ldr	r2, [pc, #20]	; (80047d4 <_sbrk+0x64>)
 80047c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047c2:	68fb      	ldr	r3, [r7, #12]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	20010000 	.word	0x20010000
 80047d0:	00004000 	.word	0x00004000
 80047d4:	20000218 	.word	0x20000218
 80047d8:	20000320 	.word	0x20000320

080047dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047e0:	4b06      	ldr	r3, [pc, #24]	; (80047fc <SystemInit+0x20>)
 80047e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e6:	4a05      	ldr	r2, [pc, #20]	; (80047fc <SystemInit+0x20>)
 80047e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	e000ed00 	.word	0xe000ed00

08004800 <Reset_Handler>:
 8004800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004838 <LoopFillZerobss+0x12>
 8004804:	480d      	ldr	r0, [pc, #52]	; (800483c <LoopFillZerobss+0x16>)
 8004806:	490e      	ldr	r1, [pc, #56]	; (8004840 <LoopFillZerobss+0x1a>)
 8004808:	4a0e      	ldr	r2, [pc, #56]	; (8004844 <LoopFillZerobss+0x1e>)
 800480a:	2300      	movs	r3, #0
 800480c:	e002      	b.n	8004814 <LoopCopyDataInit>

0800480e <CopyDataInit>:
 800480e:	58d4      	ldr	r4, [r2, r3]
 8004810:	50c4      	str	r4, [r0, r3]
 8004812:	3304      	adds	r3, #4

08004814 <LoopCopyDataInit>:
 8004814:	18c4      	adds	r4, r0, r3
 8004816:	428c      	cmp	r4, r1
 8004818:	d3f9      	bcc.n	800480e <CopyDataInit>
 800481a:	4a0b      	ldr	r2, [pc, #44]	; (8004848 <LoopFillZerobss+0x22>)
 800481c:	4c0b      	ldr	r4, [pc, #44]	; (800484c <LoopFillZerobss+0x26>)
 800481e:	2300      	movs	r3, #0
 8004820:	e001      	b.n	8004826 <LoopFillZerobss>

08004822 <FillZerobss>:
 8004822:	6013      	str	r3, [r2, #0]
 8004824:	3204      	adds	r2, #4

08004826 <LoopFillZerobss>:
 8004826:	42a2      	cmp	r2, r4
 8004828:	d3fb      	bcc.n	8004822 <FillZerobss>
 800482a:	f7ff ffd7 	bl	80047dc <SystemInit>
 800482e:	f000 f817 	bl	8004860 <__libc_init_array>
 8004832:	f7ff fc2d 	bl	8004090 <main>
 8004836:	4770      	bx	lr
 8004838:	20010000 	.word	0x20010000
 800483c:	20000000 	.word	0x20000000
 8004840:	200001dc 	.word	0x200001dc
 8004844:	08007a64 	.word	0x08007a64
 8004848:	200001dc 	.word	0x200001dc
 800484c:	2000031c 	.word	0x2000031c

08004850 <ADC_IRQHandler>:
 8004850:	e7fe      	b.n	8004850 <ADC_IRQHandler>
	...

08004854 <__errno>:
 8004854:	4b01      	ldr	r3, [pc, #4]	; (800485c <__errno+0x8>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	2000000c 	.word	0x2000000c

08004860 <__libc_init_array>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4d0d      	ldr	r5, [pc, #52]	; (8004898 <__libc_init_array+0x38>)
 8004864:	4c0d      	ldr	r4, [pc, #52]	; (800489c <__libc_init_array+0x3c>)
 8004866:	1b64      	subs	r4, r4, r5
 8004868:	10a4      	asrs	r4, r4, #2
 800486a:	2600      	movs	r6, #0
 800486c:	42a6      	cmp	r6, r4
 800486e:	d109      	bne.n	8004884 <__libc_init_array+0x24>
 8004870:	4d0b      	ldr	r5, [pc, #44]	; (80048a0 <__libc_init_array+0x40>)
 8004872:	4c0c      	ldr	r4, [pc, #48]	; (80048a4 <__libc_init_array+0x44>)
 8004874:	f002 feb6 	bl	80075e4 <_init>
 8004878:	1b64      	subs	r4, r4, r5
 800487a:	10a4      	asrs	r4, r4, #2
 800487c:	2600      	movs	r6, #0
 800487e:	42a6      	cmp	r6, r4
 8004880:	d105      	bne.n	800488e <__libc_init_array+0x2e>
 8004882:	bd70      	pop	{r4, r5, r6, pc}
 8004884:	f855 3b04 	ldr.w	r3, [r5], #4
 8004888:	4798      	blx	r3
 800488a:	3601      	adds	r6, #1
 800488c:	e7ee      	b.n	800486c <__libc_init_array+0xc>
 800488e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004892:	4798      	blx	r3
 8004894:	3601      	adds	r6, #1
 8004896:	e7f2      	b.n	800487e <__libc_init_array+0x1e>
 8004898:	08007a5c 	.word	0x08007a5c
 800489c:	08007a5c 	.word	0x08007a5c
 80048a0:	08007a5c 	.word	0x08007a5c
 80048a4:	08007a60 	.word	0x08007a60

080048a8 <memset>:
 80048a8:	4402      	add	r2, r0
 80048aa:	4603      	mov	r3, r0
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d100      	bne.n	80048b2 <memset+0xa>
 80048b0:	4770      	bx	lr
 80048b2:	f803 1b01 	strb.w	r1, [r3], #1
 80048b6:	e7f9      	b.n	80048ac <memset+0x4>

080048b8 <__cvt>:
 80048b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048bc:	ec55 4b10 	vmov	r4, r5, d0
 80048c0:	2d00      	cmp	r5, #0
 80048c2:	460e      	mov	r6, r1
 80048c4:	4619      	mov	r1, r3
 80048c6:	462b      	mov	r3, r5
 80048c8:	bfbb      	ittet	lt
 80048ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80048ce:	461d      	movlt	r5, r3
 80048d0:	2300      	movge	r3, #0
 80048d2:	232d      	movlt	r3, #45	; 0x2d
 80048d4:	700b      	strb	r3, [r1, #0]
 80048d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80048dc:	4691      	mov	r9, r2
 80048de:	f023 0820 	bic.w	r8, r3, #32
 80048e2:	bfbc      	itt	lt
 80048e4:	4622      	movlt	r2, r4
 80048e6:	4614      	movlt	r4, r2
 80048e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048ec:	d005      	beq.n	80048fa <__cvt+0x42>
 80048ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048f2:	d100      	bne.n	80048f6 <__cvt+0x3e>
 80048f4:	3601      	adds	r6, #1
 80048f6:	2102      	movs	r1, #2
 80048f8:	e000      	b.n	80048fc <__cvt+0x44>
 80048fa:	2103      	movs	r1, #3
 80048fc:	ab03      	add	r3, sp, #12
 80048fe:	9301      	str	r3, [sp, #4]
 8004900:	ab02      	add	r3, sp, #8
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	ec45 4b10 	vmov	d0, r4, r5
 8004908:	4653      	mov	r3, sl
 800490a:	4632      	mov	r2, r6
 800490c:	f000 fcec 	bl	80052e8 <_dtoa_r>
 8004910:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004914:	4607      	mov	r7, r0
 8004916:	d102      	bne.n	800491e <__cvt+0x66>
 8004918:	f019 0f01 	tst.w	r9, #1
 800491c:	d022      	beq.n	8004964 <__cvt+0xac>
 800491e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004922:	eb07 0906 	add.w	r9, r7, r6
 8004926:	d110      	bne.n	800494a <__cvt+0x92>
 8004928:	783b      	ldrb	r3, [r7, #0]
 800492a:	2b30      	cmp	r3, #48	; 0x30
 800492c:	d10a      	bne.n	8004944 <__cvt+0x8c>
 800492e:	2200      	movs	r2, #0
 8004930:	2300      	movs	r3, #0
 8004932:	4620      	mov	r0, r4
 8004934:	4629      	mov	r1, r5
 8004936:	f7fc f8cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800493a:	b918      	cbnz	r0, 8004944 <__cvt+0x8c>
 800493c:	f1c6 0601 	rsb	r6, r6, #1
 8004940:	f8ca 6000 	str.w	r6, [sl]
 8004944:	f8da 3000 	ldr.w	r3, [sl]
 8004948:	4499      	add	r9, r3
 800494a:	2200      	movs	r2, #0
 800494c:	2300      	movs	r3, #0
 800494e:	4620      	mov	r0, r4
 8004950:	4629      	mov	r1, r5
 8004952:	f7fc f8c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8004956:	b108      	cbz	r0, 800495c <__cvt+0xa4>
 8004958:	f8cd 900c 	str.w	r9, [sp, #12]
 800495c:	2230      	movs	r2, #48	; 0x30
 800495e:	9b03      	ldr	r3, [sp, #12]
 8004960:	454b      	cmp	r3, r9
 8004962:	d307      	bcc.n	8004974 <__cvt+0xbc>
 8004964:	9b03      	ldr	r3, [sp, #12]
 8004966:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004968:	1bdb      	subs	r3, r3, r7
 800496a:	4638      	mov	r0, r7
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	b004      	add	sp, #16
 8004970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004974:	1c59      	adds	r1, r3, #1
 8004976:	9103      	str	r1, [sp, #12]
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e7f0      	b.n	800495e <__cvt+0xa6>

0800497c <__exponent>:
 800497c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800497e:	4603      	mov	r3, r0
 8004980:	2900      	cmp	r1, #0
 8004982:	bfb8      	it	lt
 8004984:	4249      	neglt	r1, r1
 8004986:	f803 2b02 	strb.w	r2, [r3], #2
 800498a:	bfb4      	ite	lt
 800498c:	222d      	movlt	r2, #45	; 0x2d
 800498e:	222b      	movge	r2, #43	; 0x2b
 8004990:	2909      	cmp	r1, #9
 8004992:	7042      	strb	r2, [r0, #1]
 8004994:	dd2a      	ble.n	80049ec <__exponent+0x70>
 8004996:	f10d 0407 	add.w	r4, sp, #7
 800499a:	46a4      	mov	ip, r4
 800499c:	270a      	movs	r7, #10
 800499e:	46a6      	mov	lr, r4
 80049a0:	460a      	mov	r2, r1
 80049a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80049a6:	fb07 1516 	mls	r5, r7, r6, r1
 80049aa:	3530      	adds	r5, #48	; 0x30
 80049ac:	2a63      	cmp	r2, #99	; 0x63
 80049ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80049b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80049b6:	4631      	mov	r1, r6
 80049b8:	dcf1      	bgt.n	800499e <__exponent+0x22>
 80049ba:	3130      	adds	r1, #48	; 0x30
 80049bc:	f1ae 0502 	sub.w	r5, lr, #2
 80049c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80049c4:	1c44      	adds	r4, r0, #1
 80049c6:	4629      	mov	r1, r5
 80049c8:	4561      	cmp	r1, ip
 80049ca:	d30a      	bcc.n	80049e2 <__exponent+0x66>
 80049cc:	f10d 0209 	add.w	r2, sp, #9
 80049d0:	eba2 020e 	sub.w	r2, r2, lr
 80049d4:	4565      	cmp	r5, ip
 80049d6:	bf88      	it	hi
 80049d8:	2200      	movhi	r2, #0
 80049da:	4413      	add	r3, r2
 80049dc:	1a18      	subs	r0, r3, r0
 80049de:	b003      	add	sp, #12
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80049e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80049ea:	e7ed      	b.n	80049c8 <__exponent+0x4c>
 80049ec:	2330      	movs	r3, #48	; 0x30
 80049ee:	3130      	adds	r1, #48	; 0x30
 80049f0:	7083      	strb	r3, [r0, #2]
 80049f2:	70c1      	strb	r1, [r0, #3]
 80049f4:	1d03      	adds	r3, r0, #4
 80049f6:	e7f1      	b.n	80049dc <__exponent+0x60>

080049f8 <_printf_float>:
 80049f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049fc:	ed2d 8b02 	vpush	{d8}
 8004a00:	b08d      	sub	sp, #52	; 0x34
 8004a02:	460c      	mov	r4, r1
 8004a04:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a08:	4616      	mov	r6, r2
 8004a0a:	461f      	mov	r7, r3
 8004a0c:	4605      	mov	r5, r0
 8004a0e:	f001 fa57 	bl	8005ec0 <_localeconv_r>
 8004a12:	f8d0 a000 	ldr.w	sl, [r0]
 8004a16:	4650      	mov	r0, sl
 8004a18:	f7fb fbe2 	bl	80001e0 <strlen>
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	9305      	str	r3, [sp, #20]
 8004a24:	f8d8 3000 	ldr.w	r3, [r8]
 8004a28:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a2c:	3307      	adds	r3, #7
 8004a2e:	f023 0307 	bic.w	r3, r3, #7
 8004a32:	f103 0208 	add.w	r2, r3, #8
 8004a36:	f8c8 2000 	str.w	r2, [r8]
 8004a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004a42:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004a46:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a4a:	9307      	str	r3, [sp, #28]
 8004a4c:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a50:	ee08 0a10 	vmov	s16, r0
 8004a54:	4b9f      	ldr	r3, [pc, #636]	; (8004cd4 <_printf_float+0x2dc>)
 8004a56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a5e:	f7fc f86d 	bl	8000b3c <__aeabi_dcmpun>
 8004a62:	bb88      	cbnz	r0, 8004ac8 <_printf_float+0xd0>
 8004a64:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a68:	4b9a      	ldr	r3, [pc, #616]	; (8004cd4 <_printf_float+0x2dc>)
 8004a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a6e:	f7fc f847 	bl	8000b00 <__aeabi_dcmple>
 8004a72:	bb48      	cbnz	r0, 8004ac8 <_printf_float+0xd0>
 8004a74:	2200      	movs	r2, #0
 8004a76:	2300      	movs	r3, #0
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fc f836 	bl	8000aec <__aeabi_dcmplt>
 8004a80:	b110      	cbz	r0, 8004a88 <_printf_float+0x90>
 8004a82:	232d      	movs	r3, #45	; 0x2d
 8004a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a88:	4b93      	ldr	r3, [pc, #588]	; (8004cd8 <_printf_float+0x2e0>)
 8004a8a:	4894      	ldr	r0, [pc, #592]	; (8004cdc <_printf_float+0x2e4>)
 8004a8c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a90:	bf94      	ite	ls
 8004a92:	4698      	movls	r8, r3
 8004a94:	4680      	movhi	r8, r0
 8004a96:	2303      	movs	r3, #3
 8004a98:	6123      	str	r3, [r4, #16]
 8004a9a:	9b05      	ldr	r3, [sp, #20]
 8004a9c:	f023 0204 	bic.w	r2, r3, #4
 8004aa0:	6022      	str	r2, [r4, #0]
 8004aa2:	f04f 0900 	mov.w	r9, #0
 8004aa6:	9700      	str	r7, [sp, #0]
 8004aa8:	4633      	mov	r3, r6
 8004aaa:	aa0b      	add	r2, sp, #44	; 0x2c
 8004aac:	4621      	mov	r1, r4
 8004aae:	4628      	mov	r0, r5
 8004ab0:	f000 f9d8 	bl	8004e64 <_printf_common>
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f040 8090 	bne.w	8004bda <_printf_float+0x1e2>
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
 8004abe:	b00d      	add	sp, #52	; 0x34
 8004ac0:	ecbd 8b02 	vpop	{d8}
 8004ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	4640      	mov	r0, r8
 8004ace:	4649      	mov	r1, r9
 8004ad0:	f7fc f834 	bl	8000b3c <__aeabi_dcmpun>
 8004ad4:	b140      	cbz	r0, 8004ae8 <_printf_float+0xf0>
 8004ad6:	464b      	mov	r3, r9
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	bfbc      	itt	lt
 8004adc:	232d      	movlt	r3, #45	; 0x2d
 8004ade:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004ae2:	487f      	ldr	r0, [pc, #508]	; (8004ce0 <_printf_float+0x2e8>)
 8004ae4:	4b7f      	ldr	r3, [pc, #508]	; (8004ce4 <_printf_float+0x2ec>)
 8004ae6:	e7d1      	b.n	8004a8c <_printf_float+0x94>
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004aee:	9206      	str	r2, [sp, #24]
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	d13f      	bne.n	8004b74 <_printf_float+0x17c>
 8004af4:	2306      	movs	r3, #6
 8004af6:	6063      	str	r3, [r4, #4]
 8004af8:	9b05      	ldr	r3, [sp, #20]
 8004afa:	6861      	ldr	r1, [r4, #4]
 8004afc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b00:	2300      	movs	r3, #0
 8004b02:	9303      	str	r3, [sp, #12]
 8004b04:	ab0a      	add	r3, sp, #40	; 0x28
 8004b06:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b0a:	ab09      	add	r3, sp, #36	; 0x24
 8004b0c:	ec49 8b10 	vmov	d0, r8, r9
 8004b10:	9300      	str	r3, [sp, #0]
 8004b12:	6022      	str	r2, [r4, #0]
 8004b14:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f7ff fecd 	bl	80048b8 <__cvt>
 8004b1e:	9b06      	ldr	r3, [sp, #24]
 8004b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b22:	2b47      	cmp	r3, #71	; 0x47
 8004b24:	4680      	mov	r8, r0
 8004b26:	d108      	bne.n	8004b3a <_printf_float+0x142>
 8004b28:	1cc8      	adds	r0, r1, #3
 8004b2a:	db02      	blt.n	8004b32 <_printf_float+0x13a>
 8004b2c:	6863      	ldr	r3, [r4, #4]
 8004b2e:	4299      	cmp	r1, r3
 8004b30:	dd41      	ble.n	8004bb6 <_printf_float+0x1be>
 8004b32:	f1ab 0b02 	sub.w	fp, fp, #2
 8004b36:	fa5f fb8b 	uxtb.w	fp, fp
 8004b3a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b3e:	d820      	bhi.n	8004b82 <_printf_float+0x18a>
 8004b40:	3901      	subs	r1, #1
 8004b42:	465a      	mov	r2, fp
 8004b44:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b48:	9109      	str	r1, [sp, #36]	; 0x24
 8004b4a:	f7ff ff17 	bl	800497c <__exponent>
 8004b4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b50:	1813      	adds	r3, r2, r0
 8004b52:	2a01      	cmp	r2, #1
 8004b54:	4681      	mov	r9, r0
 8004b56:	6123      	str	r3, [r4, #16]
 8004b58:	dc02      	bgt.n	8004b60 <_printf_float+0x168>
 8004b5a:	6822      	ldr	r2, [r4, #0]
 8004b5c:	07d2      	lsls	r2, r2, #31
 8004b5e:	d501      	bpl.n	8004b64 <_printf_float+0x16c>
 8004b60:	3301      	adds	r3, #1
 8004b62:	6123      	str	r3, [r4, #16]
 8004b64:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d09c      	beq.n	8004aa6 <_printf_float+0xae>
 8004b6c:	232d      	movs	r3, #45	; 0x2d
 8004b6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b72:	e798      	b.n	8004aa6 <_printf_float+0xae>
 8004b74:	9a06      	ldr	r2, [sp, #24]
 8004b76:	2a47      	cmp	r2, #71	; 0x47
 8004b78:	d1be      	bne.n	8004af8 <_printf_float+0x100>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1bc      	bne.n	8004af8 <_printf_float+0x100>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e7b9      	b.n	8004af6 <_printf_float+0xfe>
 8004b82:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b86:	d118      	bne.n	8004bba <_printf_float+0x1c2>
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	6863      	ldr	r3, [r4, #4]
 8004b8c:	dd0b      	ble.n	8004ba6 <_printf_float+0x1ae>
 8004b8e:	6121      	str	r1, [r4, #16]
 8004b90:	b913      	cbnz	r3, 8004b98 <_printf_float+0x1a0>
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	07d0      	lsls	r0, r2, #31
 8004b96:	d502      	bpl.n	8004b9e <_printf_float+0x1a6>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	440b      	add	r3, r1
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ba0:	f04f 0900 	mov.w	r9, #0
 8004ba4:	e7de      	b.n	8004b64 <_printf_float+0x16c>
 8004ba6:	b913      	cbnz	r3, 8004bae <_printf_float+0x1b6>
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	07d2      	lsls	r2, r2, #31
 8004bac:	d501      	bpl.n	8004bb2 <_printf_float+0x1ba>
 8004bae:	3302      	adds	r3, #2
 8004bb0:	e7f4      	b.n	8004b9c <_printf_float+0x1a4>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e7f2      	b.n	8004b9c <_printf_float+0x1a4>
 8004bb6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bbc:	4299      	cmp	r1, r3
 8004bbe:	db05      	blt.n	8004bcc <_printf_float+0x1d4>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	6121      	str	r1, [r4, #16]
 8004bc4:	07d8      	lsls	r0, r3, #31
 8004bc6:	d5ea      	bpl.n	8004b9e <_printf_float+0x1a6>
 8004bc8:	1c4b      	adds	r3, r1, #1
 8004bca:	e7e7      	b.n	8004b9c <_printf_float+0x1a4>
 8004bcc:	2900      	cmp	r1, #0
 8004bce:	bfd4      	ite	le
 8004bd0:	f1c1 0202 	rsble	r2, r1, #2
 8004bd4:	2201      	movgt	r2, #1
 8004bd6:	4413      	add	r3, r2
 8004bd8:	e7e0      	b.n	8004b9c <_printf_float+0x1a4>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	055a      	lsls	r2, r3, #21
 8004bde:	d407      	bmi.n	8004bf0 <_printf_float+0x1f8>
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	4642      	mov	r2, r8
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	d12c      	bne.n	8004c48 <_printf_float+0x250>
 8004bee:	e764      	b.n	8004aba <_printf_float+0xc2>
 8004bf0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bf4:	f240 80e0 	bls.w	8004db8 <_printf_float+0x3c0>
 8004bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f7fb ff6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d034      	beq.n	8004c72 <_printf_float+0x27a>
 8004c08:	4a37      	ldr	r2, [pc, #220]	; (8004ce8 <_printf_float+0x2f0>)
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4631      	mov	r1, r6
 8004c0e:	4628      	mov	r0, r5
 8004c10:	47b8      	blx	r7
 8004c12:	3001      	adds	r0, #1
 8004c14:	f43f af51 	beq.w	8004aba <_printf_float+0xc2>
 8004c18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	db02      	blt.n	8004c26 <_printf_float+0x22e>
 8004c20:	6823      	ldr	r3, [r4, #0]
 8004c22:	07d8      	lsls	r0, r3, #31
 8004c24:	d510      	bpl.n	8004c48 <_printf_float+0x250>
 8004c26:	ee18 3a10 	vmov	r3, s16
 8004c2a:	4652      	mov	r2, sl
 8004c2c:	4631      	mov	r1, r6
 8004c2e:	4628      	mov	r0, r5
 8004c30:	47b8      	blx	r7
 8004c32:	3001      	adds	r0, #1
 8004c34:	f43f af41 	beq.w	8004aba <_printf_float+0xc2>
 8004c38:	f04f 0800 	mov.w	r8, #0
 8004c3c:	f104 091a 	add.w	r9, r4, #26
 8004c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4543      	cmp	r3, r8
 8004c46:	dc09      	bgt.n	8004c5c <_printf_float+0x264>
 8004c48:	6823      	ldr	r3, [r4, #0]
 8004c4a:	079b      	lsls	r3, r3, #30
 8004c4c:	f100 8105 	bmi.w	8004e5a <_printf_float+0x462>
 8004c50:	68e0      	ldr	r0, [r4, #12]
 8004c52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c54:	4298      	cmp	r0, r3
 8004c56:	bfb8      	it	lt
 8004c58:	4618      	movlt	r0, r3
 8004c5a:	e730      	b.n	8004abe <_printf_float+0xc6>
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	464a      	mov	r2, r9
 8004c60:	4631      	mov	r1, r6
 8004c62:	4628      	mov	r0, r5
 8004c64:	47b8      	blx	r7
 8004c66:	3001      	adds	r0, #1
 8004c68:	f43f af27 	beq.w	8004aba <_printf_float+0xc2>
 8004c6c:	f108 0801 	add.w	r8, r8, #1
 8004c70:	e7e6      	b.n	8004c40 <_printf_float+0x248>
 8004c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	dc39      	bgt.n	8004cec <_printf_float+0x2f4>
 8004c78:	4a1b      	ldr	r2, [pc, #108]	; (8004ce8 <_printf_float+0x2f0>)
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f af19 	beq.w	8004aba <_printf_float+0xc2>
 8004c88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	d102      	bne.n	8004c96 <_printf_float+0x29e>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	07d9      	lsls	r1, r3, #31
 8004c94:	d5d8      	bpl.n	8004c48 <_printf_float+0x250>
 8004c96:	ee18 3a10 	vmov	r3, s16
 8004c9a:	4652      	mov	r2, sl
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	47b8      	blx	r7
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	f43f af09 	beq.w	8004aba <_printf_float+0xc2>
 8004ca8:	f04f 0900 	mov.w	r9, #0
 8004cac:	f104 0a1a 	add.w	sl, r4, #26
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	425b      	negs	r3, r3
 8004cb4:	454b      	cmp	r3, r9
 8004cb6:	dc01      	bgt.n	8004cbc <_printf_float+0x2c4>
 8004cb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cba:	e792      	b.n	8004be2 <_printf_float+0x1ea>
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4652      	mov	r2, sl
 8004cc0:	4631      	mov	r1, r6
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	47b8      	blx	r7
 8004cc6:	3001      	adds	r0, #1
 8004cc8:	f43f aef7 	beq.w	8004aba <_printf_float+0xc2>
 8004ccc:	f109 0901 	add.w	r9, r9, #1
 8004cd0:	e7ee      	b.n	8004cb0 <_printf_float+0x2b8>
 8004cd2:	bf00      	nop
 8004cd4:	7fefffff 	.word	0x7fefffff
 8004cd8:	08007674 	.word	0x08007674
 8004cdc:	08007678 	.word	0x08007678
 8004ce0:	08007680 	.word	0x08007680
 8004ce4:	0800767c 	.word	0x0800767c
 8004ce8:	08007684 	.word	0x08007684
 8004cec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	bfa8      	it	ge
 8004cf4:	461a      	movge	r2, r3
 8004cf6:	2a00      	cmp	r2, #0
 8004cf8:	4691      	mov	r9, r2
 8004cfa:	dc37      	bgt.n	8004d6c <_printf_float+0x374>
 8004cfc:	f04f 0b00 	mov.w	fp, #0
 8004d00:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d04:	f104 021a 	add.w	r2, r4, #26
 8004d08:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d0a:	9305      	str	r3, [sp, #20]
 8004d0c:	eba3 0309 	sub.w	r3, r3, r9
 8004d10:	455b      	cmp	r3, fp
 8004d12:	dc33      	bgt.n	8004d7c <_printf_float+0x384>
 8004d14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	db3b      	blt.n	8004d94 <_printf_float+0x39c>
 8004d1c:	6823      	ldr	r3, [r4, #0]
 8004d1e:	07da      	lsls	r2, r3, #31
 8004d20:	d438      	bmi.n	8004d94 <_printf_float+0x39c>
 8004d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d24:	9b05      	ldr	r3, [sp, #20]
 8004d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	eba2 0901 	sub.w	r9, r2, r1
 8004d2e:	4599      	cmp	r9, r3
 8004d30:	bfa8      	it	ge
 8004d32:	4699      	movge	r9, r3
 8004d34:	f1b9 0f00 	cmp.w	r9, #0
 8004d38:	dc35      	bgt.n	8004da6 <_printf_float+0x3ae>
 8004d3a:	f04f 0800 	mov.w	r8, #0
 8004d3e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d42:	f104 0a1a 	add.w	sl, r4, #26
 8004d46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d4a:	1a9b      	subs	r3, r3, r2
 8004d4c:	eba3 0309 	sub.w	r3, r3, r9
 8004d50:	4543      	cmp	r3, r8
 8004d52:	f77f af79 	ble.w	8004c48 <_printf_float+0x250>
 8004d56:	2301      	movs	r3, #1
 8004d58:	4652      	mov	r2, sl
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f aeaa 	beq.w	8004aba <_printf_float+0xc2>
 8004d66:	f108 0801 	add.w	r8, r8, #1
 8004d6a:	e7ec      	b.n	8004d46 <_printf_float+0x34e>
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	4631      	mov	r1, r6
 8004d70:	4642      	mov	r2, r8
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	d1c0      	bne.n	8004cfc <_printf_float+0x304>
 8004d7a:	e69e      	b.n	8004aba <_printf_float+0xc2>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	4631      	mov	r1, r6
 8004d80:	4628      	mov	r0, r5
 8004d82:	9205      	str	r2, [sp, #20]
 8004d84:	47b8      	blx	r7
 8004d86:	3001      	adds	r0, #1
 8004d88:	f43f ae97 	beq.w	8004aba <_printf_float+0xc2>
 8004d8c:	9a05      	ldr	r2, [sp, #20]
 8004d8e:	f10b 0b01 	add.w	fp, fp, #1
 8004d92:	e7b9      	b.n	8004d08 <_printf_float+0x310>
 8004d94:	ee18 3a10 	vmov	r3, s16
 8004d98:	4652      	mov	r2, sl
 8004d9a:	4631      	mov	r1, r6
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	47b8      	blx	r7
 8004da0:	3001      	adds	r0, #1
 8004da2:	d1be      	bne.n	8004d22 <_printf_float+0x32a>
 8004da4:	e689      	b.n	8004aba <_printf_float+0xc2>
 8004da6:	9a05      	ldr	r2, [sp, #20]
 8004da8:	464b      	mov	r3, r9
 8004daa:	4442      	add	r2, r8
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1c1      	bne.n	8004d3a <_printf_float+0x342>
 8004db6:	e680      	b.n	8004aba <_printf_float+0xc2>
 8004db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004dba:	2a01      	cmp	r2, #1
 8004dbc:	dc01      	bgt.n	8004dc2 <_printf_float+0x3ca>
 8004dbe:	07db      	lsls	r3, r3, #31
 8004dc0:	d538      	bpl.n	8004e34 <_printf_float+0x43c>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	4642      	mov	r2, r8
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	4628      	mov	r0, r5
 8004dca:	47b8      	blx	r7
 8004dcc:	3001      	adds	r0, #1
 8004dce:	f43f ae74 	beq.w	8004aba <_printf_float+0xc2>
 8004dd2:	ee18 3a10 	vmov	r3, s16
 8004dd6:	4652      	mov	r2, sl
 8004dd8:	4631      	mov	r1, r6
 8004dda:	4628      	mov	r0, r5
 8004ddc:	47b8      	blx	r7
 8004dde:	3001      	adds	r0, #1
 8004de0:	f43f ae6b 	beq.w	8004aba <_printf_float+0xc2>
 8004de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	f7fb fe74 	bl	8000ad8 <__aeabi_dcmpeq>
 8004df0:	b9d8      	cbnz	r0, 8004e2a <_printf_float+0x432>
 8004df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df4:	f108 0201 	add.w	r2, r8, #1
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	4631      	mov	r1, r6
 8004dfc:	4628      	mov	r0, r5
 8004dfe:	47b8      	blx	r7
 8004e00:	3001      	adds	r0, #1
 8004e02:	d10e      	bne.n	8004e22 <_printf_float+0x42a>
 8004e04:	e659      	b.n	8004aba <_printf_float+0xc2>
 8004e06:	2301      	movs	r3, #1
 8004e08:	4652      	mov	r2, sl
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	f43f ae52 	beq.w	8004aba <_printf_float+0xc2>
 8004e16:	f108 0801 	add.w	r8, r8, #1
 8004e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4543      	cmp	r3, r8
 8004e20:	dcf1      	bgt.n	8004e06 <_printf_float+0x40e>
 8004e22:	464b      	mov	r3, r9
 8004e24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e28:	e6dc      	b.n	8004be4 <_printf_float+0x1ec>
 8004e2a:	f04f 0800 	mov.w	r8, #0
 8004e2e:	f104 0a1a 	add.w	sl, r4, #26
 8004e32:	e7f2      	b.n	8004e1a <_printf_float+0x422>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4642      	mov	r2, r8
 8004e38:	e7df      	b.n	8004dfa <_printf_float+0x402>
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	4631      	mov	r1, r6
 8004e40:	4628      	mov	r0, r5
 8004e42:	47b8      	blx	r7
 8004e44:	3001      	adds	r0, #1
 8004e46:	f43f ae38 	beq.w	8004aba <_printf_float+0xc2>
 8004e4a:	f108 0801 	add.w	r8, r8, #1
 8004e4e:	68e3      	ldr	r3, [r4, #12]
 8004e50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e52:	1a5b      	subs	r3, r3, r1
 8004e54:	4543      	cmp	r3, r8
 8004e56:	dcf0      	bgt.n	8004e3a <_printf_float+0x442>
 8004e58:	e6fa      	b.n	8004c50 <_printf_float+0x258>
 8004e5a:	f04f 0800 	mov.w	r8, #0
 8004e5e:	f104 0919 	add.w	r9, r4, #25
 8004e62:	e7f4      	b.n	8004e4e <_printf_float+0x456>

08004e64 <_printf_common>:
 8004e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e68:	4616      	mov	r6, r2
 8004e6a:	4699      	mov	r9, r3
 8004e6c:	688a      	ldr	r2, [r1, #8]
 8004e6e:	690b      	ldr	r3, [r1, #16]
 8004e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e74:	4293      	cmp	r3, r2
 8004e76:	bfb8      	it	lt
 8004e78:	4613      	movlt	r3, r2
 8004e7a:	6033      	str	r3, [r6, #0]
 8004e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e80:	4607      	mov	r7, r0
 8004e82:	460c      	mov	r4, r1
 8004e84:	b10a      	cbz	r2, 8004e8a <_printf_common+0x26>
 8004e86:	3301      	adds	r3, #1
 8004e88:	6033      	str	r3, [r6, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	0699      	lsls	r1, r3, #26
 8004e8e:	bf42      	ittt	mi
 8004e90:	6833      	ldrmi	r3, [r6, #0]
 8004e92:	3302      	addmi	r3, #2
 8004e94:	6033      	strmi	r3, [r6, #0]
 8004e96:	6825      	ldr	r5, [r4, #0]
 8004e98:	f015 0506 	ands.w	r5, r5, #6
 8004e9c:	d106      	bne.n	8004eac <_printf_common+0x48>
 8004e9e:	f104 0a19 	add.w	sl, r4, #25
 8004ea2:	68e3      	ldr	r3, [r4, #12]
 8004ea4:	6832      	ldr	r2, [r6, #0]
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	42ab      	cmp	r3, r5
 8004eaa:	dc26      	bgt.n	8004efa <_printf_common+0x96>
 8004eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb0:	1e13      	subs	r3, r2, #0
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	bf18      	it	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	0692      	lsls	r2, r2, #26
 8004eba:	d42b      	bmi.n	8004f14 <_printf_common+0xb0>
 8004ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	47c0      	blx	r8
 8004ec6:	3001      	adds	r0, #1
 8004ec8:	d01e      	beq.n	8004f08 <_printf_common+0xa4>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	68e5      	ldr	r5, [r4, #12]
 8004ece:	6832      	ldr	r2, [r6, #0]
 8004ed0:	f003 0306 	and.w	r3, r3, #6
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	bf08      	it	eq
 8004ed8:	1aad      	subeq	r5, r5, r2
 8004eda:	68a3      	ldr	r3, [r4, #8]
 8004edc:	6922      	ldr	r2, [r4, #16]
 8004ede:	bf0c      	ite	eq
 8004ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ee4:	2500      	movne	r5, #0
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	bfc4      	itt	gt
 8004eea:	1a9b      	subgt	r3, r3, r2
 8004eec:	18ed      	addgt	r5, r5, r3
 8004eee:	2600      	movs	r6, #0
 8004ef0:	341a      	adds	r4, #26
 8004ef2:	42b5      	cmp	r5, r6
 8004ef4:	d11a      	bne.n	8004f2c <_printf_common+0xc8>
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	e008      	b.n	8004f0c <_printf_common+0xa8>
 8004efa:	2301      	movs	r3, #1
 8004efc:	4652      	mov	r2, sl
 8004efe:	4649      	mov	r1, r9
 8004f00:	4638      	mov	r0, r7
 8004f02:	47c0      	blx	r8
 8004f04:	3001      	adds	r0, #1
 8004f06:	d103      	bne.n	8004f10 <_printf_common+0xac>
 8004f08:	f04f 30ff 	mov.w	r0, #4294967295
 8004f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f10:	3501      	adds	r5, #1
 8004f12:	e7c6      	b.n	8004ea2 <_printf_common+0x3e>
 8004f14:	18e1      	adds	r1, r4, r3
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	2030      	movs	r0, #48	; 0x30
 8004f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f1e:	4422      	add	r2, r4
 8004f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f28:	3302      	adds	r3, #2
 8004f2a:	e7c7      	b.n	8004ebc <_printf_common+0x58>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4622      	mov	r2, r4
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d0e6      	beq.n	8004f08 <_printf_common+0xa4>
 8004f3a:	3601      	adds	r6, #1
 8004f3c:	e7d9      	b.n	8004ef2 <_printf_common+0x8e>
	...

08004f40 <_printf_i>:
 8004f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f44:	460c      	mov	r4, r1
 8004f46:	4691      	mov	r9, r2
 8004f48:	7e27      	ldrb	r7, [r4, #24]
 8004f4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f4c:	2f78      	cmp	r7, #120	; 0x78
 8004f4e:	4680      	mov	r8, r0
 8004f50:	469a      	mov	sl, r3
 8004f52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f56:	d807      	bhi.n	8004f68 <_printf_i+0x28>
 8004f58:	2f62      	cmp	r7, #98	; 0x62
 8004f5a:	d80a      	bhi.n	8004f72 <_printf_i+0x32>
 8004f5c:	2f00      	cmp	r7, #0
 8004f5e:	f000 80d8 	beq.w	8005112 <_printf_i+0x1d2>
 8004f62:	2f58      	cmp	r7, #88	; 0x58
 8004f64:	f000 80a3 	beq.w	80050ae <_printf_i+0x16e>
 8004f68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f70:	e03a      	b.n	8004fe8 <_printf_i+0xa8>
 8004f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f76:	2b15      	cmp	r3, #21
 8004f78:	d8f6      	bhi.n	8004f68 <_printf_i+0x28>
 8004f7a:	a001      	add	r0, pc, #4	; (adr r0, 8004f80 <_printf_i+0x40>)
 8004f7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f80:	08004fd9 	.word	0x08004fd9
 8004f84:	08004fed 	.word	0x08004fed
 8004f88:	08004f69 	.word	0x08004f69
 8004f8c:	08004f69 	.word	0x08004f69
 8004f90:	08004f69 	.word	0x08004f69
 8004f94:	08004f69 	.word	0x08004f69
 8004f98:	08004fed 	.word	0x08004fed
 8004f9c:	08004f69 	.word	0x08004f69
 8004fa0:	08004f69 	.word	0x08004f69
 8004fa4:	08004f69 	.word	0x08004f69
 8004fa8:	08004f69 	.word	0x08004f69
 8004fac:	080050f9 	.word	0x080050f9
 8004fb0:	0800501d 	.word	0x0800501d
 8004fb4:	080050db 	.word	0x080050db
 8004fb8:	08004f69 	.word	0x08004f69
 8004fbc:	08004f69 	.word	0x08004f69
 8004fc0:	0800511b 	.word	0x0800511b
 8004fc4:	08004f69 	.word	0x08004f69
 8004fc8:	0800501d 	.word	0x0800501d
 8004fcc:	08004f69 	.word	0x08004f69
 8004fd0:	08004f69 	.word	0x08004f69
 8004fd4:	080050e3 	.word	0x080050e3
 8004fd8:	680b      	ldr	r3, [r1, #0]
 8004fda:	1d1a      	adds	r2, r3, #4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	600a      	str	r2, [r1, #0]
 8004fe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0a3      	b.n	8005134 <_printf_i+0x1f4>
 8004fec:	6825      	ldr	r5, [r4, #0]
 8004fee:	6808      	ldr	r0, [r1, #0]
 8004ff0:	062e      	lsls	r6, r5, #24
 8004ff2:	f100 0304 	add.w	r3, r0, #4
 8004ff6:	d50a      	bpl.n	800500e <_printf_i+0xce>
 8004ff8:	6805      	ldr	r5, [r0, #0]
 8004ffa:	600b      	str	r3, [r1, #0]
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	da03      	bge.n	8005008 <_printf_i+0xc8>
 8005000:	232d      	movs	r3, #45	; 0x2d
 8005002:	426d      	negs	r5, r5
 8005004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005008:	485e      	ldr	r0, [pc, #376]	; (8005184 <_printf_i+0x244>)
 800500a:	230a      	movs	r3, #10
 800500c:	e019      	b.n	8005042 <_printf_i+0x102>
 800500e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005012:	6805      	ldr	r5, [r0, #0]
 8005014:	600b      	str	r3, [r1, #0]
 8005016:	bf18      	it	ne
 8005018:	b22d      	sxthne	r5, r5
 800501a:	e7ef      	b.n	8004ffc <_printf_i+0xbc>
 800501c:	680b      	ldr	r3, [r1, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	1d18      	adds	r0, r3, #4
 8005022:	6008      	str	r0, [r1, #0]
 8005024:	0628      	lsls	r0, r5, #24
 8005026:	d501      	bpl.n	800502c <_printf_i+0xec>
 8005028:	681d      	ldr	r5, [r3, #0]
 800502a:	e002      	b.n	8005032 <_printf_i+0xf2>
 800502c:	0669      	lsls	r1, r5, #25
 800502e:	d5fb      	bpl.n	8005028 <_printf_i+0xe8>
 8005030:	881d      	ldrh	r5, [r3, #0]
 8005032:	4854      	ldr	r0, [pc, #336]	; (8005184 <_printf_i+0x244>)
 8005034:	2f6f      	cmp	r7, #111	; 0x6f
 8005036:	bf0c      	ite	eq
 8005038:	2308      	moveq	r3, #8
 800503a:	230a      	movne	r3, #10
 800503c:	2100      	movs	r1, #0
 800503e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005042:	6866      	ldr	r6, [r4, #4]
 8005044:	60a6      	str	r6, [r4, #8]
 8005046:	2e00      	cmp	r6, #0
 8005048:	bfa2      	ittt	ge
 800504a:	6821      	ldrge	r1, [r4, #0]
 800504c:	f021 0104 	bicge.w	r1, r1, #4
 8005050:	6021      	strge	r1, [r4, #0]
 8005052:	b90d      	cbnz	r5, 8005058 <_printf_i+0x118>
 8005054:	2e00      	cmp	r6, #0
 8005056:	d04d      	beq.n	80050f4 <_printf_i+0x1b4>
 8005058:	4616      	mov	r6, r2
 800505a:	fbb5 f1f3 	udiv	r1, r5, r3
 800505e:	fb03 5711 	mls	r7, r3, r1, r5
 8005062:	5dc7      	ldrb	r7, [r0, r7]
 8005064:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005068:	462f      	mov	r7, r5
 800506a:	42bb      	cmp	r3, r7
 800506c:	460d      	mov	r5, r1
 800506e:	d9f4      	bls.n	800505a <_printf_i+0x11a>
 8005070:	2b08      	cmp	r3, #8
 8005072:	d10b      	bne.n	800508c <_printf_i+0x14c>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07df      	lsls	r7, r3, #31
 8005078:	d508      	bpl.n	800508c <_printf_i+0x14c>
 800507a:	6923      	ldr	r3, [r4, #16]
 800507c:	6861      	ldr	r1, [r4, #4]
 800507e:	4299      	cmp	r1, r3
 8005080:	bfde      	ittt	le
 8005082:	2330      	movle	r3, #48	; 0x30
 8005084:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005088:	f106 36ff 	addle.w	r6, r6, #4294967295
 800508c:	1b92      	subs	r2, r2, r6
 800508e:	6122      	str	r2, [r4, #16]
 8005090:	f8cd a000 	str.w	sl, [sp]
 8005094:	464b      	mov	r3, r9
 8005096:	aa03      	add	r2, sp, #12
 8005098:	4621      	mov	r1, r4
 800509a:	4640      	mov	r0, r8
 800509c:	f7ff fee2 	bl	8004e64 <_printf_common>
 80050a0:	3001      	adds	r0, #1
 80050a2:	d14c      	bne.n	800513e <_printf_i+0x1fe>
 80050a4:	f04f 30ff 	mov.w	r0, #4294967295
 80050a8:	b004      	add	sp, #16
 80050aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ae:	4835      	ldr	r0, [pc, #212]	; (8005184 <_printf_i+0x244>)
 80050b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	680e      	ldr	r6, [r1, #0]
 80050b8:	061f      	lsls	r7, r3, #24
 80050ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80050be:	600e      	str	r6, [r1, #0]
 80050c0:	d514      	bpl.n	80050ec <_printf_i+0x1ac>
 80050c2:	07d9      	lsls	r1, r3, #31
 80050c4:	bf44      	itt	mi
 80050c6:	f043 0320 	orrmi.w	r3, r3, #32
 80050ca:	6023      	strmi	r3, [r4, #0]
 80050cc:	b91d      	cbnz	r5, 80050d6 <_printf_i+0x196>
 80050ce:	6823      	ldr	r3, [r4, #0]
 80050d0:	f023 0320 	bic.w	r3, r3, #32
 80050d4:	6023      	str	r3, [r4, #0]
 80050d6:	2310      	movs	r3, #16
 80050d8:	e7b0      	b.n	800503c <_printf_i+0xfc>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f043 0320 	orr.w	r3, r3, #32
 80050e0:	6023      	str	r3, [r4, #0]
 80050e2:	2378      	movs	r3, #120	; 0x78
 80050e4:	4828      	ldr	r0, [pc, #160]	; (8005188 <_printf_i+0x248>)
 80050e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050ea:	e7e3      	b.n	80050b4 <_printf_i+0x174>
 80050ec:	065e      	lsls	r6, r3, #25
 80050ee:	bf48      	it	mi
 80050f0:	b2ad      	uxthmi	r5, r5
 80050f2:	e7e6      	b.n	80050c2 <_printf_i+0x182>
 80050f4:	4616      	mov	r6, r2
 80050f6:	e7bb      	b.n	8005070 <_printf_i+0x130>
 80050f8:	680b      	ldr	r3, [r1, #0]
 80050fa:	6826      	ldr	r6, [r4, #0]
 80050fc:	6960      	ldr	r0, [r4, #20]
 80050fe:	1d1d      	adds	r5, r3, #4
 8005100:	600d      	str	r5, [r1, #0]
 8005102:	0635      	lsls	r5, r6, #24
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	d501      	bpl.n	800510c <_printf_i+0x1cc>
 8005108:	6018      	str	r0, [r3, #0]
 800510a:	e002      	b.n	8005112 <_printf_i+0x1d2>
 800510c:	0671      	lsls	r1, r6, #25
 800510e:	d5fb      	bpl.n	8005108 <_printf_i+0x1c8>
 8005110:	8018      	strh	r0, [r3, #0]
 8005112:	2300      	movs	r3, #0
 8005114:	6123      	str	r3, [r4, #16]
 8005116:	4616      	mov	r6, r2
 8005118:	e7ba      	b.n	8005090 <_printf_i+0x150>
 800511a:	680b      	ldr	r3, [r1, #0]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	600a      	str	r2, [r1, #0]
 8005120:	681e      	ldr	r6, [r3, #0]
 8005122:	6862      	ldr	r2, [r4, #4]
 8005124:	2100      	movs	r1, #0
 8005126:	4630      	mov	r0, r6
 8005128:	f7fb f862 	bl	80001f0 <memchr>
 800512c:	b108      	cbz	r0, 8005132 <_printf_i+0x1f2>
 800512e:	1b80      	subs	r0, r0, r6
 8005130:	6060      	str	r0, [r4, #4]
 8005132:	6863      	ldr	r3, [r4, #4]
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	2300      	movs	r3, #0
 8005138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513c:	e7a8      	b.n	8005090 <_printf_i+0x150>
 800513e:	6923      	ldr	r3, [r4, #16]
 8005140:	4632      	mov	r2, r6
 8005142:	4649      	mov	r1, r9
 8005144:	4640      	mov	r0, r8
 8005146:	47d0      	blx	sl
 8005148:	3001      	adds	r0, #1
 800514a:	d0ab      	beq.n	80050a4 <_printf_i+0x164>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	079b      	lsls	r3, r3, #30
 8005150:	d413      	bmi.n	800517a <_printf_i+0x23a>
 8005152:	68e0      	ldr	r0, [r4, #12]
 8005154:	9b03      	ldr	r3, [sp, #12]
 8005156:	4298      	cmp	r0, r3
 8005158:	bfb8      	it	lt
 800515a:	4618      	movlt	r0, r3
 800515c:	e7a4      	b.n	80050a8 <_printf_i+0x168>
 800515e:	2301      	movs	r3, #1
 8005160:	4632      	mov	r2, r6
 8005162:	4649      	mov	r1, r9
 8005164:	4640      	mov	r0, r8
 8005166:	47d0      	blx	sl
 8005168:	3001      	adds	r0, #1
 800516a:	d09b      	beq.n	80050a4 <_printf_i+0x164>
 800516c:	3501      	adds	r5, #1
 800516e:	68e3      	ldr	r3, [r4, #12]
 8005170:	9903      	ldr	r1, [sp, #12]
 8005172:	1a5b      	subs	r3, r3, r1
 8005174:	42ab      	cmp	r3, r5
 8005176:	dcf2      	bgt.n	800515e <_printf_i+0x21e>
 8005178:	e7eb      	b.n	8005152 <_printf_i+0x212>
 800517a:	2500      	movs	r5, #0
 800517c:	f104 0619 	add.w	r6, r4, #25
 8005180:	e7f5      	b.n	800516e <_printf_i+0x22e>
 8005182:	bf00      	nop
 8005184:	08007686 	.word	0x08007686
 8005188:	08007697 	.word	0x08007697

0800518c <siprintf>:
 800518c:	b40e      	push	{r1, r2, r3}
 800518e:	b500      	push	{lr}
 8005190:	b09c      	sub	sp, #112	; 0x70
 8005192:	ab1d      	add	r3, sp, #116	; 0x74
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	9006      	str	r0, [sp, #24]
 8005198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800519c:	4809      	ldr	r0, [pc, #36]	; (80051c4 <siprintf+0x38>)
 800519e:	9107      	str	r1, [sp, #28]
 80051a0:	9104      	str	r1, [sp, #16]
 80051a2:	4909      	ldr	r1, [pc, #36]	; (80051c8 <siprintf+0x3c>)
 80051a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	6800      	ldr	r0, [r0, #0]
 80051ac:	9301      	str	r3, [sp, #4]
 80051ae:	a902      	add	r1, sp, #8
 80051b0:	f001 fb34 	bl	800681c <_svfiprintf_r>
 80051b4:	9b02      	ldr	r3, [sp, #8]
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
 80051ba:	b01c      	add	sp, #112	; 0x70
 80051bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80051c0:	b003      	add	sp, #12
 80051c2:	4770      	bx	lr
 80051c4:	2000000c 	.word	0x2000000c
 80051c8:	ffff0208 	.word	0xffff0208

080051cc <quorem>:
 80051cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d0:	6903      	ldr	r3, [r0, #16]
 80051d2:	690c      	ldr	r4, [r1, #16]
 80051d4:	42a3      	cmp	r3, r4
 80051d6:	4607      	mov	r7, r0
 80051d8:	f2c0 8081 	blt.w	80052de <quorem+0x112>
 80051dc:	3c01      	subs	r4, #1
 80051de:	f101 0814 	add.w	r8, r1, #20
 80051e2:	f100 0514 	add.w	r5, r0, #20
 80051e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051ea:	9301      	str	r3, [sp, #4]
 80051ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051f4:	3301      	adds	r3, #1
 80051f6:	429a      	cmp	r2, r3
 80051f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005200:	fbb2 f6f3 	udiv	r6, r2, r3
 8005204:	d331      	bcc.n	800526a <quorem+0x9e>
 8005206:	f04f 0e00 	mov.w	lr, #0
 800520a:	4640      	mov	r0, r8
 800520c:	46ac      	mov	ip, r5
 800520e:	46f2      	mov	sl, lr
 8005210:	f850 2b04 	ldr.w	r2, [r0], #4
 8005214:	b293      	uxth	r3, r2
 8005216:	fb06 e303 	mla	r3, r6, r3, lr
 800521a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800521e:	b29b      	uxth	r3, r3
 8005220:	ebaa 0303 	sub.w	r3, sl, r3
 8005224:	0c12      	lsrs	r2, r2, #16
 8005226:	f8dc a000 	ldr.w	sl, [ip]
 800522a:	fb06 e202 	mla	r2, r6, r2, lr
 800522e:	fa13 f38a 	uxtah	r3, r3, sl
 8005232:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005236:	fa1f fa82 	uxth.w	sl, r2
 800523a:	f8dc 2000 	ldr.w	r2, [ip]
 800523e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005242:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005246:	b29b      	uxth	r3, r3
 8005248:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800524c:	4581      	cmp	r9, r0
 800524e:	f84c 3b04 	str.w	r3, [ip], #4
 8005252:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005256:	d2db      	bcs.n	8005210 <quorem+0x44>
 8005258:	f855 300b 	ldr.w	r3, [r5, fp]
 800525c:	b92b      	cbnz	r3, 800526a <quorem+0x9e>
 800525e:	9b01      	ldr	r3, [sp, #4]
 8005260:	3b04      	subs	r3, #4
 8005262:	429d      	cmp	r5, r3
 8005264:	461a      	mov	r2, r3
 8005266:	d32e      	bcc.n	80052c6 <quorem+0xfa>
 8005268:	613c      	str	r4, [r7, #16]
 800526a:	4638      	mov	r0, r7
 800526c:	f001 f8c0 	bl	80063f0 <__mcmp>
 8005270:	2800      	cmp	r0, #0
 8005272:	db24      	blt.n	80052be <quorem+0xf2>
 8005274:	3601      	adds	r6, #1
 8005276:	4628      	mov	r0, r5
 8005278:	f04f 0c00 	mov.w	ip, #0
 800527c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005280:	f8d0 e000 	ldr.w	lr, [r0]
 8005284:	b293      	uxth	r3, r2
 8005286:	ebac 0303 	sub.w	r3, ip, r3
 800528a:	0c12      	lsrs	r2, r2, #16
 800528c:	fa13 f38e 	uxtah	r3, r3, lr
 8005290:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005298:	b29b      	uxth	r3, r3
 800529a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800529e:	45c1      	cmp	r9, r8
 80052a0:	f840 3b04 	str.w	r3, [r0], #4
 80052a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80052a8:	d2e8      	bcs.n	800527c <quorem+0xb0>
 80052aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052b2:	b922      	cbnz	r2, 80052be <quorem+0xf2>
 80052b4:	3b04      	subs	r3, #4
 80052b6:	429d      	cmp	r5, r3
 80052b8:	461a      	mov	r2, r3
 80052ba:	d30a      	bcc.n	80052d2 <quorem+0x106>
 80052bc:	613c      	str	r4, [r7, #16]
 80052be:	4630      	mov	r0, r6
 80052c0:	b003      	add	sp, #12
 80052c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d1cc      	bne.n	8005268 <quorem+0x9c>
 80052ce:	3c01      	subs	r4, #1
 80052d0:	e7c7      	b.n	8005262 <quorem+0x96>
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	3b04      	subs	r3, #4
 80052d6:	2a00      	cmp	r2, #0
 80052d8:	d1f0      	bne.n	80052bc <quorem+0xf0>
 80052da:	3c01      	subs	r4, #1
 80052dc:	e7eb      	b.n	80052b6 <quorem+0xea>
 80052de:	2000      	movs	r0, #0
 80052e0:	e7ee      	b.n	80052c0 <quorem+0xf4>
 80052e2:	0000      	movs	r0, r0
 80052e4:	0000      	movs	r0, r0
	...

080052e8 <_dtoa_r>:
 80052e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ed2d 8b02 	vpush	{d8}
 80052f0:	ec57 6b10 	vmov	r6, r7, d0
 80052f4:	b095      	sub	sp, #84	; 0x54
 80052f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052fc:	9105      	str	r1, [sp, #20]
 80052fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8005302:	4604      	mov	r4, r0
 8005304:	9209      	str	r2, [sp, #36]	; 0x24
 8005306:	930f      	str	r3, [sp, #60]	; 0x3c
 8005308:	b975      	cbnz	r5, 8005328 <_dtoa_r+0x40>
 800530a:	2010      	movs	r0, #16
 800530c:	f000 fddc 	bl	8005ec8 <malloc>
 8005310:	4602      	mov	r2, r0
 8005312:	6260      	str	r0, [r4, #36]	; 0x24
 8005314:	b920      	cbnz	r0, 8005320 <_dtoa_r+0x38>
 8005316:	4bb2      	ldr	r3, [pc, #712]	; (80055e0 <_dtoa_r+0x2f8>)
 8005318:	21ea      	movs	r1, #234	; 0xea
 800531a:	48b2      	ldr	r0, [pc, #712]	; (80055e4 <_dtoa_r+0x2fc>)
 800531c:	f001 fb8e 	bl	8006a3c <__assert_func>
 8005320:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005324:	6005      	str	r5, [r0, #0]
 8005326:	60c5      	str	r5, [r0, #12]
 8005328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800532a:	6819      	ldr	r1, [r3, #0]
 800532c:	b151      	cbz	r1, 8005344 <_dtoa_r+0x5c>
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	604a      	str	r2, [r1, #4]
 8005332:	2301      	movs	r3, #1
 8005334:	4093      	lsls	r3, r2
 8005336:	608b      	str	r3, [r1, #8]
 8005338:	4620      	mov	r0, r4
 800533a:	f000 fe1b 	bl	8005f74 <_Bfree>
 800533e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	1e3b      	subs	r3, r7, #0
 8005346:	bfb9      	ittee	lt
 8005348:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800534c:	9303      	strlt	r3, [sp, #12]
 800534e:	2300      	movge	r3, #0
 8005350:	f8c8 3000 	strge.w	r3, [r8]
 8005354:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005358:	4ba3      	ldr	r3, [pc, #652]	; (80055e8 <_dtoa_r+0x300>)
 800535a:	bfbc      	itt	lt
 800535c:	2201      	movlt	r2, #1
 800535e:	f8c8 2000 	strlt.w	r2, [r8]
 8005362:	ea33 0309 	bics.w	r3, r3, r9
 8005366:	d11b      	bne.n	80053a0 <_dtoa_r+0xb8>
 8005368:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800536a:	f242 730f 	movw	r3, #9999	; 0x270f
 800536e:	6013      	str	r3, [r2, #0]
 8005370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005374:	4333      	orrs	r3, r6
 8005376:	f000 857a 	beq.w	8005e6e <_dtoa_r+0xb86>
 800537a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800537c:	b963      	cbnz	r3, 8005398 <_dtoa_r+0xb0>
 800537e:	4b9b      	ldr	r3, [pc, #620]	; (80055ec <_dtoa_r+0x304>)
 8005380:	e024      	b.n	80053cc <_dtoa_r+0xe4>
 8005382:	4b9b      	ldr	r3, [pc, #620]	; (80055f0 <_dtoa_r+0x308>)
 8005384:	9300      	str	r3, [sp, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9800      	ldr	r0, [sp, #0]
 800538e:	b015      	add	sp, #84	; 0x54
 8005390:	ecbd 8b02 	vpop	{d8}
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	4b94      	ldr	r3, [pc, #592]	; (80055ec <_dtoa_r+0x304>)
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	3303      	adds	r3, #3
 800539e:	e7f3      	b.n	8005388 <_dtoa_r+0xa0>
 80053a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80053a4:	2200      	movs	r2, #0
 80053a6:	ec51 0b17 	vmov	r0, r1, d7
 80053aa:	2300      	movs	r3, #0
 80053ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80053b0:	f7fb fb92 	bl	8000ad8 <__aeabi_dcmpeq>
 80053b4:	4680      	mov	r8, r0
 80053b6:	b158      	cbz	r0, 80053d0 <_dtoa_r+0xe8>
 80053b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80053ba:	2301      	movs	r3, #1
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 8551 	beq.w	8005e68 <_dtoa_r+0xb80>
 80053c6:	488b      	ldr	r0, [pc, #556]	; (80055f4 <_dtoa_r+0x30c>)
 80053c8:	6018      	str	r0, [r3, #0]
 80053ca:	1e43      	subs	r3, r0, #1
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	e7dd      	b.n	800538c <_dtoa_r+0xa4>
 80053d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80053d4:	aa12      	add	r2, sp, #72	; 0x48
 80053d6:	a913      	add	r1, sp, #76	; 0x4c
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 f8ad 	bl	8006538 <__d2b>
 80053de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80053e2:	4683      	mov	fp, r0
 80053e4:	2d00      	cmp	r5, #0
 80053e6:	d07c      	beq.n	80054e2 <_dtoa_r+0x1fa>
 80053e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80053ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80053f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005402:	4b7d      	ldr	r3, [pc, #500]	; (80055f8 <_dtoa_r+0x310>)
 8005404:	2200      	movs	r2, #0
 8005406:	4630      	mov	r0, r6
 8005408:	4639      	mov	r1, r7
 800540a:	f7fa ff45 	bl	8000298 <__aeabi_dsub>
 800540e:	a36e      	add	r3, pc, #440	; (adr r3, 80055c8 <_dtoa_r+0x2e0>)
 8005410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005414:	f7fb f8f8 	bl	8000608 <__aeabi_dmul>
 8005418:	a36d      	add	r3, pc, #436	; (adr r3, 80055d0 <_dtoa_r+0x2e8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff3d 	bl	800029c <__adddf3>
 8005422:	4606      	mov	r6, r0
 8005424:	4628      	mov	r0, r5
 8005426:	460f      	mov	r7, r1
 8005428:	f7fb f884 	bl	8000534 <__aeabi_i2d>
 800542c:	a36a      	add	r3, pc, #424	; (adr r3, 80055d8 <_dtoa_r+0x2f0>)
 800542e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005432:	f7fb f8e9 	bl	8000608 <__aeabi_dmul>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4630      	mov	r0, r6
 800543c:	4639      	mov	r1, r7
 800543e:	f7fa ff2d 	bl	800029c <__adddf3>
 8005442:	4606      	mov	r6, r0
 8005444:	460f      	mov	r7, r1
 8005446:	f7fb fb8f 	bl	8000b68 <__aeabi_d2iz>
 800544a:	2200      	movs	r2, #0
 800544c:	4682      	mov	sl, r0
 800544e:	2300      	movs	r3, #0
 8005450:	4630      	mov	r0, r6
 8005452:	4639      	mov	r1, r7
 8005454:	f7fb fb4a 	bl	8000aec <__aeabi_dcmplt>
 8005458:	b148      	cbz	r0, 800546e <_dtoa_r+0x186>
 800545a:	4650      	mov	r0, sl
 800545c:	f7fb f86a 	bl	8000534 <__aeabi_i2d>
 8005460:	4632      	mov	r2, r6
 8005462:	463b      	mov	r3, r7
 8005464:	f7fb fb38 	bl	8000ad8 <__aeabi_dcmpeq>
 8005468:	b908      	cbnz	r0, 800546e <_dtoa_r+0x186>
 800546a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800546e:	f1ba 0f16 	cmp.w	sl, #22
 8005472:	d854      	bhi.n	800551e <_dtoa_r+0x236>
 8005474:	4b61      	ldr	r3, [pc, #388]	; (80055fc <_dtoa_r+0x314>)
 8005476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800547a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005482:	f7fb fb33 	bl	8000aec <__aeabi_dcmplt>
 8005486:	2800      	cmp	r0, #0
 8005488:	d04b      	beq.n	8005522 <_dtoa_r+0x23a>
 800548a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800548e:	2300      	movs	r3, #0
 8005490:	930e      	str	r3, [sp, #56]	; 0x38
 8005492:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005494:	1b5d      	subs	r5, r3, r5
 8005496:	1e6b      	subs	r3, r5, #1
 8005498:	9304      	str	r3, [sp, #16]
 800549a:	bf43      	ittte	mi
 800549c:	2300      	movmi	r3, #0
 800549e:	f1c5 0801 	rsbmi	r8, r5, #1
 80054a2:	9304      	strmi	r3, [sp, #16]
 80054a4:	f04f 0800 	movpl.w	r8, #0
 80054a8:	f1ba 0f00 	cmp.w	sl, #0
 80054ac:	db3b      	blt.n	8005526 <_dtoa_r+0x23e>
 80054ae:	9b04      	ldr	r3, [sp, #16]
 80054b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80054b4:	4453      	add	r3, sl
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	2300      	movs	r3, #0
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9b05      	ldr	r3, [sp, #20]
 80054be:	2b09      	cmp	r3, #9
 80054c0:	d869      	bhi.n	8005596 <_dtoa_r+0x2ae>
 80054c2:	2b05      	cmp	r3, #5
 80054c4:	bfc4      	itt	gt
 80054c6:	3b04      	subgt	r3, #4
 80054c8:	9305      	strgt	r3, [sp, #20]
 80054ca:	9b05      	ldr	r3, [sp, #20]
 80054cc:	f1a3 0302 	sub.w	r3, r3, #2
 80054d0:	bfcc      	ite	gt
 80054d2:	2500      	movgt	r5, #0
 80054d4:	2501      	movle	r5, #1
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d869      	bhi.n	80055ae <_dtoa_r+0x2c6>
 80054da:	e8df f003 	tbb	[pc, r3]
 80054de:	4e2c      	.short	0x4e2c
 80054e0:	5a4c      	.short	0x5a4c
 80054e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80054e6:	441d      	add	r5, r3
 80054e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	bfc1      	itttt	gt
 80054f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80054fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005500:	bfda      	itte	le
 8005502:	f1c3 0320 	rsble	r3, r3, #32
 8005506:	fa06 f003 	lslle.w	r0, r6, r3
 800550a:	4318      	orrgt	r0, r3
 800550c:	f7fb f802 	bl	8000514 <__aeabi_ui2d>
 8005510:	2301      	movs	r3, #1
 8005512:	4606      	mov	r6, r0
 8005514:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005518:	3d01      	subs	r5, #1
 800551a:	9310      	str	r3, [sp, #64]	; 0x40
 800551c:	e771      	b.n	8005402 <_dtoa_r+0x11a>
 800551e:	2301      	movs	r3, #1
 8005520:	e7b6      	b.n	8005490 <_dtoa_r+0x1a8>
 8005522:	900e      	str	r0, [sp, #56]	; 0x38
 8005524:	e7b5      	b.n	8005492 <_dtoa_r+0x1aa>
 8005526:	f1ca 0300 	rsb	r3, sl, #0
 800552a:	9306      	str	r3, [sp, #24]
 800552c:	2300      	movs	r3, #0
 800552e:	eba8 080a 	sub.w	r8, r8, sl
 8005532:	930d      	str	r3, [sp, #52]	; 0x34
 8005534:	e7c2      	b.n	80054bc <_dtoa_r+0x1d4>
 8005536:	2300      	movs	r3, #0
 8005538:	9308      	str	r3, [sp, #32]
 800553a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553c:	2b00      	cmp	r3, #0
 800553e:	dc39      	bgt.n	80055b4 <_dtoa_r+0x2cc>
 8005540:	f04f 0901 	mov.w	r9, #1
 8005544:	f8cd 9004 	str.w	r9, [sp, #4]
 8005548:	464b      	mov	r3, r9
 800554a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800554e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005550:	2200      	movs	r2, #0
 8005552:	6042      	str	r2, [r0, #4]
 8005554:	2204      	movs	r2, #4
 8005556:	f102 0614 	add.w	r6, r2, #20
 800555a:	429e      	cmp	r6, r3
 800555c:	6841      	ldr	r1, [r0, #4]
 800555e:	d92f      	bls.n	80055c0 <_dtoa_r+0x2d8>
 8005560:	4620      	mov	r0, r4
 8005562:	f000 fcc7 	bl	8005ef4 <_Balloc>
 8005566:	9000      	str	r0, [sp, #0]
 8005568:	2800      	cmp	r0, #0
 800556a:	d14b      	bne.n	8005604 <_dtoa_r+0x31c>
 800556c:	4b24      	ldr	r3, [pc, #144]	; (8005600 <_dtoa_r+0x318>)
 800556e:	4602      	mov	r2, r0
 8005570:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005574:	e6d1      	b.n	800531a <_dtoa_r+0x32>
 8005576:	2301      	movs	r3, #1
 8005578:	e7de      	b.n	8005538 <_dtoa_r+0x250>
 800557a:	2300      	movs	r3, #0
 800557c:	9308      	str	r3, [sp, #32]
 800557e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005580:	eb0a 0903 	add.w	r9, sl, r3
 8005584:	f109 0301 	add.w	r3, r9, #1
 8005588:	2b01      	cmp	r3, #1
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	bfb8      	it	lt
 800558e:	2301      	movlt	r3, #1
 8005590:	e7dd      	b.n	800554e <_dtoa_r+0x266>
 8005592:	2301      	movs	r3, #1
 8005594:	e7f2      	b.n	800557c <_dtoa_r+0x294>
 8005596:	2501      	movs	r5, #1
 8005598:	2300      	movs	r3, #0
 800559a:	9305      	str	r3, [sp, #20]
 800559c:	9508      	str	r5, [sp, #32]
 800559e:	f04f 39ff 	mov.w	r9, #4294967295
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80055a8:	2312      	movs	r3, #18
 80055aa:	9209      	str	r2, [sp, #36]	; 0x24
 80055ac:	e7cf      	b.n	800554e <_dtoa_r+0x266>
 80055ae:	2301      	movs	r3, #1
 80055b0:	9308      	str	r3, [sp, #32]
 80055b2:	e7f4      	b.n	800559e <_dtoa_r+0x2b6>
 80055b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80055b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80055bc:	464b      	mov	r3, r9
 80055be:	e7c6      	b.n	800554e <_dtoa_r+0x266>
 80055c0:	3101      	adds	r1, #1
 80055c2:	6041      	str	r1, [r0, #4]
 80055c4:	0052      	lsls	r2, r2, #1
 80055c6:	e7c6      	b.n	8005556 <_dtoa_r+0x26e>
 80055c8:	636f4361 	.word	0x636f4361
 80055cc:	3fd287a7 	.word	0x3fd287a7
 80055d0:	8b60c8b3 	.word	0x8b60c8b3
 80055d4:	3fc68a28 	.word	0x3fc68a28
 80055d8:	509f79fb 	.word	0x509f79fb
 80055dc:	3fd34413 	.word	0x3fd34413
 80055e0:	080076b5 	.word	0x080076b5
 80055e4:	080076cc 	.word	0x080076cc
 80055e8:	7ff00000 	.word	0x7ff00000
 80055ec:	080076b1 	.word	0x080076b1
 80055f0:	080076a8 	.word	0x080076a8
 80055f4:	08007685 	.word	0x08007685
 80055f8:	3ff80000 	.word	0x3ff80000
 80055fc:	080077c8 	.word	0x080077c8
 8005600:	0800772b 	.word	0x0800772b
 8005604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005606:	9a00      	ldr	r2, [sp, #0]
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	2b0e      	cmp	r3, #14
 800560e:	f200 80ad 	bhi.w	800576c <_dtoa_r+0x484>
 8005612:	2d00      	cmp	r5, #0
 8005614:	f000 80aa 	beq.w	800576c <_dtoa_r+0x484>
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	dd36      	ble.n	800568c <_dtoa_r+0x3a4>
 800561e:	4ac3      	ldr	r2, [pc, #780]	; (800592c <_dtoa_r+0x644>)
 8005620:	f00a 030f 	and.w	r3, sl, #15
 8005624:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005628:	ed93 7b00 	vldr	d7, [r3]
 800562c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8005630:	ea4f 172a 	mov.w	r7, sl, asr #4
 8005634:	eeb0 8a47 	vmov.f32	s16, s14
 8005638:	eef0 8a67 	vmov.f32	s17, s15
 800563c:	d016      	beq.n	800566c <_dtoa_r+0x384>
 800563e:	4bbc      	ldr	r3, [pc, #752]	; (8005930 <_dtoa_r+0x648>)
 8005640:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005648:	f7fb f908 	bl	800085c <__aeabi_ddiv>
 800564c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005650:	f007 070f 	and.w	r7, r7, #15
 8005654:	2503      	movs	r5, #3
 8005656:	4eb6      	ldr	r6, [pc, #728]	; (8005930 <_dtoa_r+0x648>)
 8005658:	b957      	cbnz	r7, 8005670 <_dtoa_r+0x388>
 800565a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800565e:	ec53 2b18 	vmov	r2, r3, d8
 8005662:	f7fb f8fb 	bl	800085c <__aeabi_ddiv>
 8005666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800566a:	e029      	b.n	80056c0 <_dtoa_r+0x3d8>
 800566c:	2502      	movs	r5, #2
 800566e:	e7f2      	b.n	8005656 <_dtoa_r+0x36e>
 8005670:	07f9      	lsls	r1, r7, #31
 8005672:	d508      	bpl.n	8005686 <_dtoa_r+0x39e>
 8005674:	ec51 0b18 	vmov	r0, r1, d8
 8005678:	e9d6 2300 	ldrd	r2, r3, [r6]
 800567c:	f7fa ffc4 	bl	8000608 <__aeabi_dmul>
 8005680:	ec41 0b18 	vmov	d8, r0, r1
 8005684:	3501      	adds	r5, #1
 8005686:	107f      	asrs	r7, r7, #1
 8005688:	3608      	adds	r6, #8
 800568a:	e7e5      	b.n	8005658 <_dtoa_r+0x370>
 800568c:	f000 80a6 	beq.w	80057dc <_dtoa_r+0x4f4>
 8005690:	f1ca 0600 	rsb	r6, sl, #0
 8005694:	4ba5      	ldr	r3, [pc, #660]	; (800592c <_dtoa_r+0x644>)
 8005696:	4fa6      	ldr	r7, [pc, #664]	; (8005930 <_dtoa_r+0x648>)
 8005698:	f006 020f 	and.w	r2, r6, #15
 800569c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80056a8:	f7fa ffae 	bl	8000608 <__aeabi_dmul>
 80056ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056b0:	1136      	asrs	r6, r6, #4
 80056b2:	2300      	movs	r3, #0
 80056b4:	2502      	movs	r5, #2
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	f040 8085 	bne.w	80057c6 <_dtoa_r+0x4de>
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1d2      	bne.n	8005666 <_dtoa_r+0x37e>
 80056c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 808c 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80056cc:	4b99      	ldr	r3, [pc, #612]	; (8005934 <_dtoa_r+0x64c>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	4630      	mov	r0, r6
 80056d2:	4639      	mov	r1, r7
 80056d4:	f7fb fa0a 	bl	8000aec <__aeabi_dcmplt>
 80056d8:	2800      	cmp	r0, #0
 80056da:	f000 8081 	beq.w	80057e0 <_dtoa_r+0x4f8>
 80056de:	9b01      	ldr	r3, [sp, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d07d      	beq.n	80057e0 <_dtoa_r+0x4f8>
 80056e4:	f1b9 0f00 	cmp.w	r9, #0
 80056e8:	dd3c      	ble.n	8005764 <_dtoa_r+0x47c>
 80056ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80056ee:	9307      	str	r3, [sp, #28]
 80056f0:	2200      	movs	r2, #0
 80056f2:	4b91      	ldr	r3, [pc, #580]	; (8005938 <_dtoa_r+0x650>)
 80056f4:	4630      	mov	r0, r6
 80056f6:	4639      	mov	r1, r7
 80056f8:	f7fa ff86 	bl	8000608 <__aeabi_dmul>
 80056fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005700:	3501      	adds	r5, #1
 8005702:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8005706:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800570a:	4628      	mov	r0, r5
 800570c:	f7fa ff12 	bl	8000534 <__aeabi_i2d>
 8005710:	4632      	mov	r2, r6
 8005712:	463b      	mov	r3, r7
 8005714:	f7fa ff78 	bl	8000608 <__aeabi_dmul>
 8005718:	4b88      	ldr	r3, [pc, #544]	; (800593c <_dtoa_r+0x654>)
 800571a:	2200      	movs	r2, #0
 800571c:	f7fa fdbe 	bl	800029c <__adddf3>
 8005720:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005724:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800572c:	2b00      	cmp	r3, #0
 800572e:	d15c      	bne.n	80057ea <_dtoa_r+0x502>
 8005730:	4b83      	ldr	r3, [pc, #524]	; (8005940 <_dtoa_r+0x658>)
 8005732:	2200      	movs	r2, #0
 8005734:	4630      	mov	r0, r6
 8005736:	4639      	mov	r1, r7
 8005738:	f7fa fdae 	bl	8000298 <__aeabi_dsub>
 800573c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005740:	4606      	mov	r6, r0
 8005742:	460f      	mov	r7, r1
 8005744:	f7fb f9f0 	bl	8000b28 <__aeabi_dcmpgt>
 8005748:	2800      	cmp	r0, #0
 800574a:	f040 8296 	bne.w	8005c7a <_dtoa_r+0x992>
 800574e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005752:	4630      	mov	r0, r6
 8005754:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005758:	4639      	mov	r1, r7
 800575a:	f7fb f9c7 	bl	8000aec <__aeabi_dcmplt>
 800575e:	2800      	cmp	r0, #0
 8005760:	f040 8288 	bne.w	8005c74 <_dtoa_r+0x98c>
 8005764:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005768:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800576c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800576e:	2b00      	cmp	r3, #0
 8005770:	f2c0 8158 	blt.w	8005a24 <_dtoa_r+0x73c>
 8005774:	f1ba 0f0e 	cmp.w	sl, #14
 8005778:	f300 8154 	bgt.w	8005a24 <_dtoa_r+0x73c>
 800577c:	4b6b      	ldr	r3, [pc, #428]	; (800592c <_dtoa_r+0x644>)
 800577e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005782:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	f280 80e3 	bge.w	8005954 <_dtoa_r+0x66c>
 800578e:	9b01      	ldr	r3, [sp, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	f300 80df 	bgt.w	8005954 <_dtoa_r+0x66c>
 8005796:	f040 826d 	bne.w	8005c74 <_dtoa_r+0x98c>
 800579a:	4b69      	ldr	r3, [pc, #420]	; (8005940 <_dtoa_r+0x658>)
 800579c:	2200      	movs	r2, #0
 800579e:	4640      	mov	r0, r8
 80057a0:	4649      	mov	r1, r9
 80057a2:	f7fa ff31 	bl	8000608 <__aeabi_dmul>
 80057a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80057aa:	f7fb f9b3 	bl	8000b14 <__aeabi_dcmpge>
 80057ae:	9e01      	ldr	r6, [sp, #4]
 80057b0:	4637      	mov	r7, r6
 80057b2:	2800      	cmp	r0, #0
 80057b4:	f040 8243 	bne.w	8005c3e <_dtoa_r+0x956>
 80057b8:	9d00      	ldr	r5, [sp, #0]
 80057ba:	2331      	movs	r3, #49	; 0x31
 80057bc:	f805 3b01 	strb.w	r3, [r5], #1
 80057c0:	f10a 0a01 	add.w	sl, sl, #1
 80057c4:	e23f      	b.n	8005c46 <_dtoa_r+0x95e>
 80057c6:	07f2      	lsls	r2, r6, #31
 80057c8:	d505      	bpl.n	80057d6 <_dtoa_r+0x4ee>
 80057ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ce:	f7fa ff1b 	bl	8000608 <__aeabi_dmul>
 80057d2:	3501      	adds	r5, #1
 80057d4:	2301      	movs	r3, #1
 80057d6:	1076      	asrs	r6, r6, #1
 80057d8:	3708      	adds	r7, #8
 80057da:	e76c      	b.n	80056b6 <_dtoa_r+0x3ce>
 80057dc:	2502      	movs	r5, #2
 80057de:	e76f      	b.n	80056c0 <_dtoa_r+0x3d8>
 80057e0:	9b01      	ldr	r3, [sp, #4]
 80057e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80057e6:	930c      	str	r3, [sp, #48]	; 0x30
 80057e8:	e78d      	b.n	8005706 <_dtoa_r+0x41e>
 80057ea:	9900      	ldr	r1, [sp, #0]
 80057ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80057ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f0:	4b4e      	ldr	r3, [pc, #312]	; (800592c <_dtoa_r+0x644>)
 80057f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80057f6:	4401      	add	r1, r0
 80057f8:	9102      	str	r1, [sp, #8]
 80057fa:	9908      	ldr	r1, [sp, #32]
 80057fc:	eeb0 8a47 	vmov.f32	s16, s14
 8005800:	eef0 8a67 	vmov.f32	s17, s15
 8005804:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005808:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800580c:	2900      	cmp	r1, #0
 800580e:	d045      	beq.n	800589c <_dtoa_r+0x5b4>
 8005810:	494c      	ldr	r1, [pc, #304]	; (8005944 <_dtoa_r+0x65c>)
 8005812:	2000      	movs	r0, #0
 8005814:	f7fb f822 	bl	800085c <__aeabi_ddiv>
 8005818:	ec53 2b18 	vmov	r2, r3, d8
 800581c:	f7fa fd3c 	bl	8000298 <__aeabi_dsub>
 8005820:	9d00      	ldr	r5, [sp, #0]
 8005822:	ec41 0b18 	vmov	d8, r0, r1
 8005826:	4639      	mov	r1, r7
 8005828:	4630      	mov	r0, r6
 800582a:	f7fb f99d 	bl	8000b68 <__aeabi_d2iz>
 800582e:	900c      	str	r0, [sp, #48]	; 0x30
 8005830:	f7fa fe80 	bl	8000534 <__aeabi_i2d>
 8005834:	4602      	mov	r2, r0
 8005836:	460b      	mov	r3, r1
 8005838:	4630      	mov	r0, r6
 800583a:	4639      	mov	r1, r7
 800583c:	f7fa fd2c 	bl	8000298 <__aeabi_dsub>
 8005840:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005842:	3330      	adds	r3, #48	; 0x30
 8005844:	f805 3b01 	strb.w	r3, [r5], #1
 8005848:	ec53 2b18 	vmov	r2, r3, d8
 800584c:	4606      	mov	r6, r0
 800584e:	460f      	mov	r7, r1
 8005850:	f7fb f94c 	bl	8000aec <__aeabi_dcmplt>
 8005854:	2800      	cmp	r0, #0
 8005856:	d165      	bne.n	8005924 <_dtoa_r+0x63c>
 8005858:	4632      	mov	r2, r6
 800585a:	463b      	mov	r3, r7
 800585c:	4935      	ldr	r1, [pc, #212]	; (8005934 <_dtoa_r+0x64c>)
 800585e:	2000      	movs	r0, #0
 8005860:	f7fa fd1a 	bl	8000298 <__aeabi_dsub>
 8005864:	ec53 2b18 	vmov	r2, r3, d8
 8005868:	f7fb f940 	bl	8000aec <__aeabi_dcmplt>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 80b9 	bne.w	80059e4 <_dtoa_r+0x6fc>
 8005872:	9b02      	ldr	r3, [sp, #8]
 8005874:	429d      	cmp	r5, r3
 8005876:	f43f af75 	beq.w	8005764 <_dtoa_r+0x47c>
 800587a:	4b2f      	ldr	r3, [pc, #188]	; (8005938 <_dtoa_r+0x650>)
 800587c:	ec51 0b18 	vmov	r0, r1, d8
 8005880:	2200      	movs	r2, #0
 8005882:	f7fa fec1 	bl	8000608 <__aeabi_dmul>
 8005886:	4b2c      	ldr	r3, [pc, #176]	; (8005938 <_dtoa_r+0x650>)
 8005888:	ec41 0b18 	vmov	d8, r0, r1
 800588c:	2200      	movs	r2, #0
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa feb9 	bl	8000608 <__aeabi_dmul>
 8005896:	4606      	mov	r6, r0
 8005898:	460f      	mov	r7, r1
 800589a:	e7c4      	b.n	8005826 <_dtoa_r+0x53e>
 800589c:	ec51 0b17 	vmov	r0, r1, d7
 80058a0:	f7fa feb2 	bl	8000608 <__aeabi_dmul>
 80058a4:	9b02      	ldr	r3, [sp, #8]
 80058a6:	9d00      	ldr	r5, [sp, #0]
 80058a8:	930c      	str	r3, [sp, #48]	; 0x30
 80058aa:	ec41 0b18 	vmov	d8, r0, r1
 80058ae:	4639      	mov	r1, r7
 80058b0:	4630      	mov	r0, r6
 80058b2:	f7fb f959 	bl	8000b68 <__aeabi_d2iz>
 80058b6:	9011      	str	r0, [sp, #68]	; 0x44
 80058b8:	f7fa fe3c 	bl	8000534 <__aeabi_i2d>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4630      	mov	r0, r6
 80058c2:	4639      	mov	r1, r7
 80058c4:	f7fa fce8 	bl	8000298 <__aeabi_dsub>
 80058c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80058ca:	3330      	adds	r3, #48	; 0x30
 80058cc:	f805 3b01 	strb.w	r3, [r5], #1
 80058d0:	9b02      	ldr	r3, [sp, #8]
 80058d2:	429d      	cmp	r5, r3
 80058d4:	4606      	mov	r6, r0
 80058d6:	460f      	mov	r7, r1
 80058d8:	f04f 0200 	mov.w	r2, #0
 80058dc:	d134      	bne.n	8005948 <_dtoa_r+0x660>
 80058de:	4b19      	ldr	r3, [pc, #100]	; (8005944 <_dtoa_r+0x65c>)
 80058e0:	ec51 0b18 	vmov	r0, r1, d8
 80058e4:	f7fa fcda 	bl	800029c <__adddf3>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4630      	mov	r0, r6
 80058ee:	4639      	mov	r1, r7
 80058f0:	f7fb f91a 	bl	8000b28 <__aeabi_dcmpgt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d175      	bne.n	80059e4 <_dtoa_r+0x6fc>
 80058f8:	ec53 2b18 	vmov	r2, r3, d8
 80058fc:	4911      	ldr	r1, [pc, #68]	; (8005944 <_dtoa_r+0x65c>)
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fcca 	bl	8000298 <__aeabi_dsub>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	4630      	mov	r0, r6
 800590a:	4639      	mov	r1, r7
 800590c:	f7fb f8ee 	bl	8000aec <__aeabi_dcmplt>
 8005910:	2800      	cmp	r0, #0
 8005912:	f43f af27 	beq.w	8005764 <_dtoa_r+0x47c>
 8005916:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005918:	1e6b      	subs	r3, r5, #1
 800591a:	930c      	str	r3, [sp, #48]	; 0x30
 800591c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005920:	2b30      	cmp	r3, #48	; 0x30
 8005922:	d0f8      	beq.n	8005916 <_dtoa_r+0x62e>
 8005924:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005928:	e04a      	b.n	80059c0 <_dtoa_r+0x6d8>
 800592a:	bf00      	nop
 800592c:	080077c8 	.word	0x080077c8
 8005930:	080077a0 	.word	0x080077a0
 8005934:	3ff00000 	.word	0x3ff00000
 8005938:	40240000 	.word	0x40240000
 800593c:	401c0000 	.word	0x401c0000
 8005940:	40140000 	.word	0x40140000
 8005944:	3fe00000 	.word	0x3fe00000
 8005948:	4baf      	ldr	r3, [pc, #700]	; (8005c08 <_dtoa_r+0x920>)
 800594a:	f7fa fe5d 	bl	8000608 <__aeabi_dmul>
 800594e:	4606      	mov	r6, r0
 8005950:	460f      	mov	r7, r1
 8005952:	e7ac      	b.n	80058ae <_dtoa_r+0x5c6>
 8005954:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005958:	9d00      	ldr	r5, [sp, #0]
 800595a:	4642      	mov	r2, r8
 800595c:	464b      	mov	r3, r9
 800595e:	4630      	mov	r0, r6
 8005960:	4639      	mov	r1, r7
 8005962:	f7fa ff7b 	bl	800085c <__aeabi_ddiv>
 8005966:	f7fb f8ff 	bl	8000b68 <__aeabi_d2iz>
 800596a:	9002      	str	r0, [sp, #8]
 800596c:	f7fa fde2 	bl	8000534 <__aeabi_i2d>
 8005970:	4642      	mov	r2, r8
 8005972:	464b      	mov	r3, r9
 8005974:	f7fa fe48 	bl	8000608 <__aeabi_dmul>
 8005978:	4602      	mov	r2, r0
 800597a:	460b      	mov	r3, r1
 800597c:	4630      	mov	r0, r6
 800597e:	4639      	mov	r1, r7
 8005980:	f7fa fc8a 	bl	8000298 <__aeabi_dsub>
 8005984:	9e02      	ldr	r6, [sp, #8]
 8005986:	9f01      	ldr	r7, [sp, #4]
 8005988:	3630      	adds	r6, #48	; 0x30
 800598a:	f805 6b01 	strb.w	r6, [r5], #1
 800598e:	9e00      	ldr	r6, [sp, #0]
 8005990:	1bae      	subs	r6, r5, r6
 8005992:	42b7      	cmp	r7, r6
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	d137      	bne.n	8005a0a <_dtoa_r+0x722>
 800599a:	f7fa fc7f 	bl	800029c <__adddf3>
 800599e:	4642      	mov	r2, r8
 80059a0:	464b      	mov	r3, r9
 80059a2:	4606      	mov	r6, r0
 80059a4:	460f      	mov	r7, r1
 80059a6:	f7fb f8bf 	bl	8000b28 <__aeabi_dcmpgt>
 80059aa:	b9c8      	cbnz	r0, 80059e0 <_dtoa_r+0x6f8>
 80059ac:	4642      	mov	r2, r8
 80059ae:	464b      	mov	r3, r9
 80059b0:	4630      	mov	r0, r6
 80059b2:	4639      	mov	r1, r7
 80059b4:	f7fb f890 	bl	8000ad8 <__aeabi_dcmpeq>
 80059b8:	b110      	cbz	r0, 80059c0 <_dtoa_r+0x6d8>
 80059ba:	9b02      	ldr	r3, [sp, #8]
 80059bc:	07d9      	lsls	r1, r3, #31
 80059be:	d40f      	bmi.n	80059e0 <_dtoa_r+0x6f8>
 80059c0:	4620      	mov	r0, r4
 80059c2:	4659      	mov	r1, fp
 80059c4:	f000 fad6 	bl	8005f74 <_Bfree>
 80059c8:	2300      	movs	r3, #0
 80059ca:	702b      	strb	r3, [r5, #0]
 80059cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059ce:	f10a 0001 	add.w	r0, sl, #1
 80059d2:	6018      	str	r0, [r3, #0]
 80059d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f43f acd8 	beq.w	800538c <_dtoa_r+0xa4>
 80059dc:	601d      	str	r5, [r3, #0]
 80059de:	e4d5      	b.n	800538c <_dtoa_r+0xa4>
 80059e0:	f8cd a01c 	str.w	sl, [sp, #28]
 80059e4:	462b      	mov	r3, r5
 80059e6:	461d      	mov	r5, r3
 80059e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059ec:	2a39      	cmp	r2, #57	; 0x39
 80059ee:	d108      	bne.n	8005a02 <_dtoa_r+0x71a>
 80059f0:	9a00      	ldr	r2, [sp, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d1f7      	bne.n	80059e6 <_dtoa_r+0x6fe>
 80059f6:	9a07      	ldr	r2, [sp, #28]
 80059f8:	9900      	ldr	r1, [sp, #0]
 80059fa:	3201      	adds	r2, #1
 80059fc:	9207      	str	r2, [sp, #28]
 80059fe:	2230      	movs	r2, #48	; 0x30
 8005a00:	700a      	strb	r2, [r1, #0]
 8005a02:	781a      	ldrb	r2, [r3, #0]
 8005a04:	3201      	adds	r2, #1
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	e78c      	b.n	8005924 <_dtoa_r+0x63c>
 8005a0a:	4b7f      	ldr	r3, [pc, #508]	; (8005c08 <_dtoa_r+0x920>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f7fa fdfb 	bl	8000608 <__aeabi_dmul>
 8005a12:	2200      	movs	r2, #0
 8005a14:	2300      	movs	r3, #0
 8005a16:	4606      	mov	r6, r0
 8005a18:	460f      	mov	r7, r1
 8005a1a:	f7fb f85d 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d09b      	beq.n	800595a <_dtoa_r+0x672>
 8005a22:	e7cd      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005a24:	9a08      	ldr	r2, [sp, #32]
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	f000 80c4 	beq.w	8005bb4 <_dtoa_r+0x8cc>
 8005a2c:	9a05      	ldr	r2, [sp, #20]
 8005a2e:	2a01      	cmp	r2, #1
 8005a30:	f300 80a8 	bgt.w	8005b84 <_dtoa_r+0x89c>
 8005a34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	f000 80a0 	beq.w	8005b7c <_dtoa_r+0x894>
 8005a3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005a40:	9e06      	ldr	r6, [sp, #24]
 8005a42:	4645      	mov	r5, r8
 8005a44:	9a04      	ldr	r2, [sp, #16]
 8005a46:	2101      	movs	r1, #1
 8005a48:	441a      	add	r2, r3
 8005a4a:	4620      	mov	r0, r4
 8005a4c:	4498      	add	r8, r3
 8005a4e:	9204      	str	r2, [sp, #16]
 8005a50:	f000 fb4c 	bl	80060ec <__i2b>
 8005a54:	4607      	mov	r7, r0
 8005a56:	2d00      	cmp	r5, #0
 8005a58:	dd0b      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a5a:	9b04      	ldr	r3, [sp, #16]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	dd08      	ble.n	8005a72 <_dtoa_r+0x78a>
 8005a60:	42ab      	cmp	r3, r5
 8005a62:	9a04      	ldr	r2, [sp, #16]
 8005a64:	bfa8      	it	ge
 8005a66:	462b      	movge	r3, r5
 8005a68:	eba8 0803 	sub.w	r8, r8, r3
 8005a6c:	1aed      	subs	r5, r5, r3
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	9304      	str	r3, [sp, #16]
 8005a72:	9b06      	ldr	r3, [sp, #24]
 8005a74:	b1fb      	cbz	r3, 8005ab6 <_dtoa_r+0x7ce>
 8005a76:	9b08      	ldr	r3, [sp, #32]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 809f 	beq.w	8005bbc <_dtoa_r+0x8d4>
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	dd11      	ble.n	8005aa6 <_dtoa_r+0x7be>
 8005a82:	4639      	mov	r1, r7
 8005a84:	4632      	mov	r2, r6
 8005a86:	4620      	mov	r0, r4
 8005a88:	f000 fbec 	bl	8006264 <__pow5mult>
 8005a8c:	465a      	mov	r2, fp
 8005a8e:	4601      	mov	r1, r0
 8005a90:	4607      	mov	r7, r0
 8005a92:	4620      	mov	r0, r4
 8005a94:	f000 fb40 	bl	8006118 <__multiply>
 8005a98:	4659      	mov	r1, fp
 8005a9a:	9007      	str	r0, [sp, #28]
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f000 fa69 	bl	8005f74 <_Bfree>
 8005aa2:	9b07      	ldr	r3, [sp, #28]
 8005aa4:	469b      	mov	fp, r3
 8005aa6:	9b06      	ldr	r3, [sp, #24]
 8005aa8:	1b9a      	subs	r2, r3, r6
 8005aaa:	d004      	beq.n	8005ab6 <_dtoa_r+0x7ce>
 8005aac:	4659      	mov	r1, fp
 8005aae:	4620      	mov	r0, r4
 8005ab0:	f000 fbd8 	bl	8006264 <__pow5mult>
 8005ab4:	4683      	mov	fp, r0
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4620      	mov	r0, r4
 8005aba:	f000 fb17 	bl	80060ec <__i2b>
 8005abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	dd7c      	ble.n	8005bc0 <_dtoa_r+0x8d8>
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4601      	mov	r1, r0
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 fbca 	bl	8006264 <__pow5mult>
 8005ad0:	9b05      	ldr	r3, [sp, #20]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	4606      	mov	r6, r0
 8005ad6:	dd76      	ble.n	8005bc6 <_dtoa_r+0x8de>
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9306      	str	r3, [sp, #24]
 8005adc:	6933      	ldr	r3, [r6, #16]
 8005ade:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005ae2:	6918      	ldr	r0, [r3, #16]
 8005ae4:	f000 fab2 	bl	800604c <__hi0bits>
 8005ae8:	f1c0 0020 	rsb	r0, r0, #32
 8005aec:	9b04      	ldr	r3, [sp, #16]
 8005aee:	4418      	add	r0, r3
 8005af0:	f010 001f 	ands.w	r0, r0, #31
 8005af4:	f000 8086 	beq.w	8005c04 <_dtoa_r+0x91c>
 8005af8:	f1c0 0320 	rsb	r3, r0, #32
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	dd7f      	ble.n	8005c00 <_dtoa_r+0x918>
 8005b00:	f1c0 001c 	rsb	r0, r0, #28
 8005b04:	9b04      	ldr	r3, [sp, #16]
 8005b06:	4403      	add	r3, r0
 8005b08:	4480      	add	r8, r0
 8005b0a:	4405      	add	r5, r0
 8005b0c:	9304      	str	r3, [sp, #16]
 8005b0e:	f1b8 0f00 	cmp.w	r8, #0
 8005b12:	dd05      	ble.n	8005b20 <_dtoa_r+0x838>
 8005b14:	4659      	mov	r1, fp
 8005b16:	4642      	mov	r2, r8
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fbfd 	bl	8006318 <__lshift>
 8005b1e:	4683      	mov	fp, r0
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	dd05      	ble.n	8005b32 <_dtoa_r+0x84a>
 8005b26:	4631      	mov	r1, r6
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f000 fbf4 	bl	8006318 <__lshift>
 8005b30:	4606      	mov	r6, r0
 8005b32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d069      	beq.n	8005c0c <_dtoa_r+0x924>
 8005b38:	4631      	mov	r1, r6
 8005b3a:	4658      	mov	r0, fp
 8005b3c:	f000 fc58 	bl	80063f0 <__mcmp>
 8005b40:	2800      	cmp	r0, #0
 8005b42:	da63      	bge.n	8005c0c <_dtoa_r+0x924>
 8005b44:	2300      	movs	r3, #0
 8005b46:	4659      	mov	r1, fp
 8005b48:	220a      	movs	r2, #10
 8005b4a:	4620      	mov	r0, r4
 8005b4c:	f000 fa34 	bl	8005fb8 <__multadd>
 8005b50:	9b08      	ldr	r3, [sp, #32]
 8005b52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b56:	4683      	mov	fp, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 818f 	beq.w	8005e7c <_dtoa_r+0xb94>
 8005b5e:	4639      	mov	r1, r7
 8005b60:	2300      	movs	r3, #0
 8005b62:	220a      	movs	r2, #10
 8005b64:	4620      	mov	r0, r4
 8005b66:	f000 fa27 	bl	8005fb8 <__multadd>
 8005b6a:	f1b9 0f00 	cmp.w	r9, #0
 8005b6e:	4607      	mov	r7, r0
 8005b70:	f300 808e 	bgt.w	8005c90 <_dtoa_r+0x9a8>
 8005b74:	9b05      	ldr	r3, [sp, #20]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	dc50      	bgt.n	8005c1c <_dtoa_r+0x934>
 8005b7a:	e089      	b.n	8005c90 <_dtoa_r+0x9a8>
 8005b7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005b7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b82:	e75d      	b.n	8005a40 <_dtoa_r+0x758>
 8005b84:	9b01      	ldr	r3, [sp, #4]
 8005b86:	1e5e      	subs	r6, r3, #1
 8005b88:	9b06      	ldr	r3, [sp, #24]
 8005b8a:	42b3      	cmp	r3, r6
 8005b8c:	bfbf      	itttt	lt
 8005b8e:	9b06      	ldrlt	r3, [sp, #24]
 8005b90:	9606      	strlt	r6, [sp, #24]
 8005b92:	1af2      	sublt	r2, r6, r3
 8005b94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005b96:	bfb6      	itet	lt
 8005b98:	189b      	addlt	r3, r3, r2
 8005b9a:	1b9e      	subge	r6, r3, r6
 8005b9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8005b9e:	9b01      	ldr	r3, [sp, #4]
 8005ba0:	bfb8      	it	lt
 8005ba2:	2600      	movlt	r6, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	bfb5      	itete	lt
 8005ba8:	eba8 0503 	sublt.w	r5, r8, r3
 8005bac:	9b01      	ldrge	r3, [sp, #4]
 8005bae:	2300      	movlt	r3, #0
 8005bb0:	4645      	movge	r5, r8
 8005bb2:	e747      	b.n	8005a44 <_dtoa_r+0x75c>
 8005bb4:	9e06      	ldr	r6, [sp, #24]
 8005bb6:	9f08      	ldr	r7, [sp, #32]
 8005bb8:	4645      	mov	r5, r8
 8005bba:	e74c      	b.n	8005a56 <_dtoa_r+0x76e>
 8005bbc:	9a06      	ldr	r2, [sp, #24]
 8005bbe:	e775      	b.n	8005aac <_dtoa_r+0x7c4>
 8005bc0:	9b05      	ldr	r3, [sp, #20]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	dc18      	bgt.n	8005bf8 <_dtoa_r+0x910>
 8005bc6:	9b02      	ldr	r3, [sp, #8]
 8005bc8:	b9b3      	cbnz	r3, 8005bf8 <_dtoa_r+0x910>
 8005bca:	9b03      	ldr	r3, [sp, #12]
 8005bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bd0:	b9a3      	cbnz	r3, 8005bfc <_dtoa_r+0x914>
 8005bd2:	9b03      	ldr	r3, [sp, #12]
 8005bd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	0d1b      	lsrs	r3, r3, #20
 8005bda:	051b      	lsls	r3, r3, #20
 8005bdc:	b12b      	cbz	r3, 8005bea <_dtoa_r+0x902>
 8005bde:	9b04      	ldr	r3, [sp, #16]
 8005be0:	3301      	adds	r3, #1
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	f108 0801 	add.w	r8, r8, #1
 8005be8:	2301      	movs	r3, #1
 8005bea:	9306      	str	r3, [sp, #24]
 8005bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f47f af74 	bne.w	8005adc <_dtoa_r+0x7f4>
 8005bf4:	2001      	movs	r0, #1
 8005bf6:	e779      	b.n	8005aec <_dtoa_r+0x804>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e7f6      	b.n	8005bea <_dtoa_r+0x902>
 8005bfc:	9b02      	ldr	r3, [sp, #8]
 8005bfe:	e7f4      	b.n	8005bea <_dtoa_r+0x902>
 8005c00:	d085      	beq.n	8005b0e <_dtoa_r+0x826>
 8005c02:	4618      	mov	r0, r3
 8005c04:	301c      	adds	r0, #28
 8005c06:	e77d      	b.n	8005b04 <_dtoa_r+0x81c>
 8005c08:	40240000 	.word	0x40240000
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dc38      	bgt.n	8005c84 <_dtoa_r+0x99c>
 8005c12:	9b05      	ldr	r3, [sp, #20]
 8005c14:	2b02      	cmp	r3, #2
 8005c16:	dd35      	ble.n	8005c84 <_dtoa_r+0x99c>
 8005c18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c1c:	f1b9 0f00 	cmp.w	r9, #0
 8005c20:	d10d      	bne.n	8005c3e <_dtoa_r+0x956>
 8005c22:	4631      	mov	r1, r6
 8005c24:	464b      	mov	r3, r9
 8005c26:	2205      	movs	r2, #5
 8005c28:	4620      	mov	r0, r4
 8005c2a:	f000 f9c5 	bl	8005fb8 <__multadd>
 8005c2e:	4601      	mov	r1, r0
 8005c30:	4606      	mov	r6, r0
 8005c32:	4658      	mov	r0, fp
 8005c34:	f000 fbdc 	bl	80063f0 <__mcmp>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	f73f adbd 	bgt.w	80057b8 <_dtoa_r+0x4d0>
 8005c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c40:	9d00      	ldr	r5, [sp, #0]
 8005c42:	ea6f 0a03 	mvn.w	sl, r3
 8005c46:	f04f 0800 	mov.w	r8, #0
 8005c4a:	4631      	mov	r1, r6
 8005c4c:	4620      	mov	r0, r4
 8005c4e:	f000 f991 	bl	8005f74 <_Bfree>
 8005c52:	2f00      	cmp	r7, #0
 8005c54:	f43f aeb4 	beq.w	80059c0 <_dtoa_r+0x6d8>
 8005c58:	f1b8 0f00 	cmp.w	r8, #0
 8005c5c:	d005      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c5e:	45b8      	cmp	r8, r7
 8005c60:	d003      	beq.n	8005c6a <_dtoa_r+0x982>
 8005c62:	4641      	mov	r1, r8
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f985 	bl	8005f74 <_Bfree>
 8005c6a:	4639      	mov	r1, r7
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f000 f981 	bl	8005f74 <_Bfree>
 8005c72:	e6a5      	b.n	80059c0 <_dtoa_r+0x6d8>
 8005c74:	2600      	movs	r6, #0
 8005c76:	4637      	mov	r7, r6
 8005c78:	e7e1      	b.n	8005c3e <_dtoa_r+0x956>
 8005c7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005c7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8005c80:	4637      	mov	r7, r6
 8005c82:	e599      	b.n	80057b8 <_dtoa_r+0x4d0>
 8005c84:	9b08      	ldr	r3, [sp, #32]
 8005c86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80fd 	beq.w	8005e8a <_dtoa_r+0xba2>
 8005c90:	2d00      	cmp	r5, #0
 8005c92:	dd05      	ble.n	8005ca0 <_dtoa_r+0x9b8>
 8005c94:	4639      	mov	r1, r7
 8005c96:	462a      	mov	r2, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fb3d 	bl	8006318 <__lshift>
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	9b06      	ldr	r3, [sp, #24]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d05c      	beq.n	8005d60 <_dtoa_r+0xa78>
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	4620      	mov	r0, r4
 8005caa:	f000 f923 	bl	8005ef4 <_Balloc>
 8005cae:	4605      	mov	r5, r0
 8005cb0:	b928      	cbnz	r0, 8005cbe <_dtoa_r+0x9d6>
 8005cb2:	4b80      	ldr	r3, [pc, #512]	; (8005eb4 <_dtoa_r+0xbcc>)
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005cba:	f7ff bb2e 	b.w	800531a <_dtoa_r+0x32>
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	3202      	adds	r2, #2
 8005cc2:	0092      	lsls	r2, r2, #2
 8005cc4:	f107 010c 	add.w	r1, r7, #12
 8005cc8:	300c      	adds	r0, #12
 8005cca:	f000 f905 	bl	8005ed8 <memcpy>
 8005cce:	2201      	movs	r2, #1
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f000 fb20 	bl	8006318 <__lshift>
 8005cd8:	9b00      	ldr	r3, [sp, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	9b00      	ldr	r3, [sp, #0]
 8005ce0:	444b      	add	r3, r9
 8005ce2:	9307      	str	r3, [sp, #28]
 8005ce4:	9b02      	ldr	r3, [sp, #8]
 8005ce6:	f003 0301 	and.w	r3, r3, #1
 8005cea:	46b8      	mov	r8, r7
 8005cec:	9306      	str	r3, [sp, #24]
 8005cee:	4607      	mov	r7, r0
 8005cf0:	9b01      	ldr	r3, [sp, #4]
 8005cf2:	4631      	mov	r1, r6
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	4658      	mov	r0, fp
 8005cf8:	9302      	str	r3, [sp, #8]
 8005cfa:	f7ff fa67 	bl	80051cc <quorem>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	3330      	adds	r3, #48	; 0x30
 8005d02:	9004      	str	r0, [sp, #16]
 8005d04:	4641      	mov	r1, r8
 8005d06:	4658      	mov	r0, fp
 8005d08:	9308      	str	r3, [sp, #32]
 8005d0a:	f000 fb71 	bl	80063f0 <__mcmp>
 8005d0e:	463a      	mov	r2, r7
 8005d10:	4681      	mov	r9, r0
 8005d12:	4631      	mov	r1, r6
 8005d14:	4620      	mov	r0, r4
 8005d16:	f000 fb87 	bl	8006428 <__mdiff>
 8005d1a:	68c2      	ldr	r2, [r0, #12]
 8005d1c:	9b08      	ldr	r3, [sp, #32]
 8005d1e:	4605      	mov	r5, r0
 8005d20:	bb02      	cbnz	r2, 8005d64 <_dtoa_r+0xa7c>
 8005d22:	4601      	mov	r1, r0
 8005d24:	4658      	mov	r0, fp
 8005d26:	f000 fb63 	bl	80063f0 <__mcmp>
 8005d2a:	9b08      	ldr	r3, [sp, #32]
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8005d36:	f000 f91d 	bl	8005f74 <_Bfree>
 8005d3a:	9b05      	ldr	r3, [sp, #20]
 8005d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3e:	9d01      	ldr	r5, [sp, #4]
 8005d40:	ea43 0102 	orr.w	r1, r3, r2
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	9b08      	ldr	r3, [sp, #32]
 8005d4a:	d10d      	bne.n	8005d68 <_dtoa_r+0xa80>
 8005d4c:	2b39      	cmp	r3, #57	; 0x39
 8005d4e:	d029      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005d50:	f1b9 0f00 	cmp.w	r9, #0
 8005d54:	dd01      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d56:	9b04      	ldr	r3, [sp, #16]
 8005d58:	3331      	adds	r3, #49	; 0x31
 8005d5a:	9a02      	ldr	r2, [sp, #8]
 8005d5c:	7013      	strb	r3, [r2, #0]
 8005d5e:	e774      	b.n	8005c4a <_dtoa_r+0x962>
 8005d60:	4638      	mov	r0, r7
 8005d62:	e7b9      	b.n	8005cd8 <_dtoa_r+0x9f0>
 8005d64:	2201      	movs	r2, #1
 8005d66:	e7e2      	b.n	8005d2e <_dtoa_r+0xa46>
 8005d68:	f1b9 0f00 	cmp.w	r9, #0
 8005d6c:	db06      	blt.n	8005d7c <_dtoa_r+0xa94>
 8005d6e:	9905      	ldr	r1, [sp, #20]
 8005d70:	ea41 0909 	orr.w	r9, r1, r9
 8005d74:	9906      	ldr	r1, [sp, #24]
 8005d76:	ea59 0101 	orrs.w	r1, r9, r1
 8005d7a:	d120      	bne.n	8005dbe <_dtoa_r+0xad6>
 8005d7c:	2a00      	cmp	r2, #0
 8005d7e:	ddec      	ble.n	8005d5a <_dtoa_r+0xa72>
 8005d80:	4659      	mov	r1, fp
 8005d82:	2201      	movs	r2, #1
 8005d84:	4620      	mov	r0, r4
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	f000 fac6 	bl	8006318 <__lshift>
 8005d8c:	4631      	mov	r1, r6
 8005d8e:	4683      	mov	fp, r0
 8005d90:	f000 fb2e 	bl	80063f0 <__mcmp>
 8005d94:	2800      	cmp	r0, #0
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	dc02      	bgt.n	8005da0 <_dtoa_r+0xab8>
 8005d9a:	d1de      	bne.n	8005d5a <_dtoa_r+0xa72>
 8005d9c:	07da      	lsls	r2, r3, #31
 8005d9e:	d5dc      	bpl.n	8005d5a <_dtoa_r+0xa72>
 8005da0:	2b39      	cmp	r3, #57	; 0x39
 8005da2:	d1d8      	bne.n	8005d56 <_dtoa_r+0xa6e>
 8005da4:	9a02      	ldr	r2, [sp, #8]
 8005da6:	2339      	movs	r3, #57	; 0x39
 8005da8:	7013      	strb	r3, [r2, #0]
 8005daa:	462b      	mov	r3, r5
 8005dac:	461d      	mov	r5, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d050      	beq.n	8005e5a <_dtoa_r+0xb72>
 8005db8:	3201      	adds	r2, #1
 8005dba:	701a      	strb	r2, [r3, #0]
 8005dbc:	e745      	b.n	8005c4a <_dtoa_r+0x962>
 8005dbe:	2a00      	cmp	r2, #0
 8005dc0:	dd03      	ble.n	8005dca <_dtoa_r+0xae2>
 8005dc2:	2b39      	cmp	r3, #57	; 0x39
 8005dc4:	d0ee      	beq.n	8005da4 <_dtoa_r+0xabc>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	e7c7      	b.n	8005d5a <_dtoa_r+0xa72>
 8005dca:	9a01      	ldr	r2, [sp, #4]
 8005dcc:	9907      	ldr	r1, [sp, #28]
 8005dce:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005dd2:	428a      	cmp	r2, r1
 8005dd4:	d02a      	beq.n	8005e2c <_dtoa_r+0xb44>
 8005dd6:	4659      	mov	r1, fp
 8005dd8:	2300      	movs	r3, #0
 8005dda:	220a      	movs	r2, #10
 8005ddc:	4620      	mov	r0, r4
 8005dde:	f000 f8eb 	bl	8005fb8 <__multadd>
 8005de2:	45b8      	cmp	r8, r7
 8005de4:	4683      	mov	fp, r0
 8005de6:	f04f 0300 	mov.w	r3, #0
 8005dea:	f04f 020a 	mov.w	r2, #10
 8005dee:	4641      	mov	r1, r8
 8005df0:	4620      	mov	r0, r4
 8005df2:	d107      	bne.n	8005e04 <_dtoa_r+0xb1c>
 8005df4:	f000 f8e0 	bl	8005fb8 <__multadd>
 8005df8:	4680      	mov	r8, r0
 8005dfa:	4607      	mov	r7, r0
 8005dfc:	9b01      	ldr	r3, [sp, #4]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	e775      	b.n	8005cf0 <_dtoa_r+0xa08>
 8005e04:	f000 f8d8 	bl	8005fb8 <__multadd>
 8005e08:	4639      	mov	r1, r7
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	220a      	movs	r2, #10
 8005e10:	4620      	mov	r0, r4
 8005e12:	f000 f8d1 	bl	8005fb8 <__multadd>
 8005e16:	4607      	mov	r7, r0
 8005e18:	e7f0      	b.n	8005dfc <_dtoa_r+0xb14>
 8005e1a:	f1b9 0f00 	cmp.w	r9, #0
 8005e1e:	9a00      	ldr	r2, [sp, #0]
 8005e20:	bfcc      	ite	gt
 8005e22:	464d      	movgt	r5, r9
 8005e24:	2501      	movle	r5, #1
 8005e26:	4415      	add	r5, r2
 8005e28:	f04f 0800 	mov.w	r8, #0
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	2201      	movs	r2, #1
 8005e30:	4620      	mov	r0, r4
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	f000 fa70 	bl	8006318 <__lshift>
 8005e38:	4631      	mov	r1, r6
 8005e3a:	4683      	mov	fp, r0
 8005e3c:	f000 fad8 	bl	80063f0 <__mcmp>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	dcb2      	bgt.n	8005daa <_dtoa_r+0xac2>
 8005e44:	d102      	bne.n	8005e4c <_dtoa_r+0xb64>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	07db      	lsls	r3, r3, #31
 8005e4a:	d4ae      	bmi.n	8005daa <_dtoa_r+0xac2>
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	461d      	mov	r5, r3
 8005e50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e54:	2a30      	cmp	r2, #48	; 0x30
 8005e56:	d0fa      	beq.n	8005e4e <_dtoa_r+0xb66>
 8005e58:	e6f7      	b.n	8005c4a <_dtoa_r+0x962>
 8005e5a:	9a00      	ldr	r2, [sp, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d1a5      	bne.n	8005dac <_dtoa_r+0xac4>
 8005e60:	f10a 0a01 	add.w	sl, sl, #1
 8005e64:	2331      	movs	r3, #49	; 0x31
 8005e66:	e779      	b.n	8005d5c <_dtoa_r+0xa74>
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <_dtoa_r+0xbd0>)
 8005e6a:	f7ff baaf 	b.w	80053cc <_dtoa_r+0xe4>
 8005e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f47f aa86 	bne.w	8005382 <_dtoa_r+0x9a>
 8005e76:	4b11      	ldr	r3, [pc, #68]	; (8005ebc <_dtoa_r+0xbd4>)
 8005e78:	f7ff baa8 	b.w	80053cc <_dtoa_r+0xe4>
 8005e7c:	f1b9 0f00 	cmp.w	r9, #0
 8005e80:	dc03      	bgt.n	8005e8a <_dtoa_r+0xba2>
 8005e82:	9b05      	ldr	r3, [sp, #20]
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	f73f aec9 	bgt.w	8005c1c <_dtoa_r+0x934>
 8005e8a:	9d00      	ldr	r5, [sp, #0]
 8005e8c:	4631      	mov	r1, r6
 8005e8e:	4658      	mov	r0, fp
 8005e90:	f7ff f99c 	bl	80051cc <quorem>
 8005e94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005e98:	f805 3b01 	strb.w	r3, [r5], #1
 8005e9c:	9a00      	ldr	r2, [sp, #0]
 8005e9e:	1aaa      	subs	r2, r5, r2
 8005ea0:	4591      	cmp	r9, r2
 8005ea2:	ddba      	ble.n	8005e1a <_dtoa_r+0xb32>
 8005ea4:	4659      	mov	r1, fp
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	220a      	movs	r2, #10
 8005eaa:	4620      	mov	r0, r4
 8005eac:	f000 f884 	bl	8005fb8 <__multadd>
 8005eb0:	4683      	mov	fp, r0
 8005eb2:	e7eb      	b.n	8005e8c <_dtoa_r+0xba4>
 8005eb4:	0800772b 	.word	0x0800772b
 8005eb8:	08007684 	.word	0x08007684
 8005ebc:	080076a8 	.word	0x080076a8

08005ec0 <_localeconv_r>:
 8005ec0:	4800      	ldr	r0, [pc, #0]	; (8005ec4 <_localeconv_r+0x4>)
 8005ec2:	4770      	bx	lr
 8005ec4:	20000160 	.word	0x20000160

08005ec8 <malloc>:
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <malloc+0xc>)
 8005eca:	4601      	mov	r1, r0
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	f000 bbef 	b.w	80066b0 <_malloc_r>
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c

08005ed8 <memcpy>:
 8005ed8:	440a      	add	r2, r1
 8005eda:	4291      	cmp	r1, r2
 8005edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ee0:	d100      	bne.n	8005ee4 <memcpy+0xc>
 8005ee2:	4770      	bx	lr
 8005ee4:	b510      	push	{r4, lr}
 8005ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005eee:	4291      	cmp	r1, r2
 8005ef0:	d1f9      	bne.n	8005ee6 <memcpy+0xe>
 8005ef2:	bd10      	pop	{r4, pc}

08005ef4 <_Balloc>:
 8005ef4:	b570      	push	{r4, r5, r6, lr}
 8005ef6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005ef8:	4604      	mov	r4, r0
 8005efa:	460d      	mov	r5, r1
 8005efc:	b976      	cbnz	r6, 8005f1c <_Balloc+0x28>
 8005efe:	2010      	movs	r0, #16
 8005f00:	f7ff ffe2 	bl	8005ec8 <malloc>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6260      	str	r0, [r4, #36]	; 0x24
 8005f08:	b920      	cbnz	r0, 8005f14 <_Balloc+0x20>
 8005f0a:	4b18      	ldr	r3, [pc, #96]	; (8005f6c <_Balloc+0x78>)
 8005f0c:	4818      	ldr	r0, [pc, #96]	; (8005f70 <_Balloc+0x7c>)
 8005f0e:	2166      	movs	r1, #102	; 0x66
 8005f10:	f000 fd94 	bl	8006a3c <__assert_func>
 8005f14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f18:	6006      	str	r6, [r0, #0]
 8005f1a:	60c6      	str	r6, [r0, #12]
 8005f1c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005f1e:	68f3      	ldr	r3, [r6, #12]
 8005f20:	b183      	cbz	r3, 8005f44 <_Balloc+0x50>
 8005f22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005f2a:	b9b8      	cbnz	r0, 8005f5c <_Balloc+0x68>
 8005f2c:	2101      	movs	r1, #1
 8005f2e:	fa01 f605 	lsl.w	r6, r1, r5
 8005f32:	1d72      	adds	r2, r6, #5
 8005f34:	0092      	lsls	r2, r2, #2
 8005f36:	4620      	mov	r0, r4
 8005f38:	f000 fb5a 	bl	80065f0 <_calloc_r>
 8005f3c:	b160      	cbz	r0, 8005f58 <_Balloc+0x64>
 8005f3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005f42:	e00e      	b.n	8005f62 <_Balloc+0x6e>
 8005f44:	2221      	movs	r2, #33	; 0x21
 8005f46:	2104      	movs	r1, #4
 8005f48:	4620      	mov	r0, r4
 8005f4a:	f000 fb51 	bl	80065f0 <_calloc_r>
 8005f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005f50:	60f0      	str	r0, [r6, #12]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e4      	bne.n	8005f22 <_Balloc+0x2e>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	bd70      	pop	{r4, r5, r6, pc}
 8005f5c:	6802      	ldr	r2, [r0, #0]
 8005f5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005f62:	2300      	movs	r3, #0
 8005f64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005f68:	e7f7      	b.n	8005f5a <_Balloc+0x66>
 8005f6a:	bf00      	nop
 8005f6c:	080076b5 	.word	0x080076b5
 8005f70:	0800773c 	.word	0x0800773c

08005f74 <_Bfree>:
 8005f74:	b570      	push	{r4, r5, r6, lr}
 8005f76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005f78:	4605      	mov	r5, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	b976      	cbnz	r6, 8005f9c <_Bfree+0x28>
 8005f7e:	2010      	movs	r0, #16
 8005f80:	f7ff ffa2 	bl	8005ec8 <malloc>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6268      	str	r0, [r5, #36]	; 0x24
 8005f88:	b920      	cbnz	r0, 8005f94 <_Bfree+0x20>
 8005f8a:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <_Bfree+0x3c>)
 8005f8c:	4809      	ldr	r0, [pc, #36]	; (8005fb4 <_Bfree+0x40>)
 8005f8e:	218a      	movs	r1, #138	; 0x8a
 8005f90:	f000 fd54 	bl	8006a3c <__assert_func>
 8005f94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005f98:	6006      	str	r6, [r0, #0]
 8005f9a:	60c6      	str	r6, [r0, #12]
 8005f9c:	b13c      	cbz	r4, 8005fae <_Bfree+0x3a>
 8005f9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005fa0:	6862      	ldr	r2, [r4, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005fa8:	6021      	str	r1, [r4, #0]
 8005faa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
 8005fb0:	080076b5 	.word	0x080076b5
 8005fb4:	0800773c 	.word	0x0800773c

08005fb8 <__multadd>:
 8005fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fbc:	690e      	ldr	r6, [r1, #16]
 8005fbe:	4607      	mov	r7, r0
 8005fc0:	4698      	mov	r8, r3
 8005fc2:	460c      	mov	r4, r1
 8005fc4:	f101 0014 	add.w	r0, r1, #20
 8005fc8:	2300      	movs	r3, #0
 8005fca:	6805      	ldr	r5, [r0, #0]
 8005fcc:	b2a9      	uxth	r1, r5
 8005fce:	fb02 8101 	mla	r1, r2, r1, r8
 8005fd2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005fd6:	0c2d      	lsrs	r5, r5, #16
 8005fd8:	fb02 c505 	mla	r5, r2, r5, ip
 8005fdc:	b289      	uxth	r1, r1
 8005fde:	3301      	adds	r3, #1
 8005fe0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005fe4:	429e      	cmp	r6, r3
 8005fe6:	f840 1b04 	str.w	r1, [r0], #4
 8005fea:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005fee:	dcec      	bgt.n	8005fca <__multadd+0x12>
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d022      	beq.n	800603c <__multadd+0x84>
 8005ff6:	68a3      	ldr	r3, [r4, #8]
 8005ff8:	42b3      	cmp	r3, r6
 8005ffa:	dc19      	bgt.n	8006030 <__multadd+0x78>
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	4638      	mov	r0, r7
 8006000:	3101      	adds	r1, #1
 8006002:	f7ff ff77 	bl	8005ef4 <_Balloc>
 8006006:	4605      	mov	r5, r0
 8006008:	b928      	cbnz	r0, 8006016 <__multadd+0x5e>
 800600a:	4602      	mov	r2, r0
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <__multadd+0x8c>)
 800600e:	480e      	ldr	r0, [pc, #56]	; (8006048 <__multadd+0x90>)
 8006010:	21b5      	movs	r1, #181	; 0xb5
 8006012:	f000 fd13 	bl	8006a3c <__assert_func>
 8006016:	6922      	ldr	r2, [r4, #16]
 8006018:	3202      	adds	r2, #2
 800601a:	f104 010c 	add.w	r1, r4, #12
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	300c      	adds	r0, #12
 8006022:	f7ff ff59 	bl	8005ed8 <memcpy>
 8006026:	4621      	mov	r1, r4
 8006028:	4638      	mov	r0, r7
 800602a:	f7ff ffa3 	bl	8005f74 <_Bfree>
 800602e:	462c      	mov	r4, r5
 8006030:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006034:	3601      	adds	r6, #1
 8006036:	f8c3 8014 	str.w	r8, [r3, #20]
 800603a:	6126      	str	r6, [r4, #16]
 800603c:	4620      	mov	r0, r4
 800603e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006042:	bf00      	nop
 8006044:	0800772b 	.word	0x0800772b
 8006048:	0800773c 	.word	0x0800773c

0800604c <__hi0bits>:
 800604c:	0c03      	lsrs	r3, r0, #16
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	b9d3      	cbnz	r3, 8006088 <__hi0bits+0x3c>
 8006052:	0400      	lsls	r0, r0, #16
 8006054:	2310      	movs	r3, #16
 8006056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800605a:	bf04      	itt	eq
 800605c:	0200      	lsleq	r0, r0, #8
 800605e:	3308      	addeq	r3, #8
 8006060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006064:	bf04      	itt	eq
 8006066:	0100      	lsleq	r0, r0, #4
 8006068:	3304      	addeq	r3, #4
 800606a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800606e:	bf04      	itt	eq
 8006070:	0080      	lsleq	r0, r0, #2
 8006072:	3302      	addeq	r3, #2
 8006074:	2800      	cmp	r0, #0
 8006076:	db05      	blt.n	8006084 <__hi0bits+0x38>
 8006078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800607c:	f103 0301 	add.w	r3, r3, #1
 8006080:	bf08      	it	eq
 8006082:	2320      	moveq	r3, #32
 8006084:	4618      	mov	r0, r3
 8006086:	4770      	bx	lr
 8006088:	2300      	movs	r3, #0
 800608a:	e7e4      	b.n	8006056 <__hi0bits+0xa>

0800608c <__lo0bits>:
 800608c:	6803      	ldr	r3, [r0, #0]
 800608e:	f013 0207 	ands.w	r2, r3, #7
 8006092:	4601      	mov	r1, r0
 8006094:	d00b      	beq.n	80060ae <__lo0bits+0x22>
 8006096:	07da      	lsls	r2, r3, #31
 8006098:	d424      	bmi.n	80060e4 <__lo0bits+0x58>
 800609a:	0798      	lsls	r0, r3, #30
 800609c:	bf49      	itett	mi
 800609e:	085b      	lsrmi	r3, r3, #1
 80060a0:	089b      	lsrpl	r3, r3, #2
 80060a2:	2001      	movmi	r0, #1
 80060a4:	600b      	strmi	r3, [r1, #0]
 80060a6:	bf5c      	itt	pl
 80060a8:	600b      	strpl	r3, [r1, #0]
 80060aa:	2002      	movpl	r0, #2
 80060ac:	4770      	bx	lr
 80060ae:	b298      	uxth	r0, r3
 80060b0:	b9b0      	cbnz	r0, 80060e0 <__lo0bits+0x54>
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	2010      	movs	r0, #16
 80060b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80060ba:	bf04      	itt	eq
 80060bc:	0a1b      	lsreq	r3, r3, #8
 80060be:	3008      	addeq	r0, #8
 80060c0:	071a      	lsls	r2, r3, #28
 80060c2:	bf04      	itt	eq
 80060c4:	091b      	lsreq	r3, r3, #4
 80060c6:	3004      	addeq	r0, #4
 80060c8:	079a      	lsls	r2, r3, #30
 80060ca:	bf04      	itt	eq
 80060cc:	089b      	lsreq	r3, r3, #2
 80060ce:	3002      	addeq	r0, #2
 80060d0:	07da      	lsls	r2, r3, #31
 80060d2:	d403      	bmi.n	80060dc <__lo0bits+0x50>
 80060d4:	085b      	lsrs	r3, r3, #1
 80060d6:	f100 0001 	add.w	r0, r0, #1
 80060da:	d005      	beq.n	80060e8 <__lo0bits+0x5c>
 80060dc:	600b      	str	r3, [r1, #0]
 80060de:	4770      	bx	lr
 80060e0:	4610      	mov	r0, r2
 80060e2:	e7e8      	b.n	80060b6 <__lo0bits+0x2a>
 80060e4:	2000      	movs	r0, #0
 80060e6:	4770      	bx	lr
 80060e8:	2020      	movs	r0, #32
 80060ea:	4770      	bx	lr

080060ec <__i2b>:
 80060ec:	b510      	push	{r4, lr}
 80060ee:	460c      	mov	r4, r1
 80060f0:	2101      	movs	r1, #1
 80060f2:	f7ff feff 	bl	8005ef4 <_Balloc>
 80060f6:	4602      	mov	r2, r0
 80060f8:	b928      	cbnz	r0, 8006106 <__i2b+0x1a>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <__i2b+0x24>)
 80060fc:	4805      	ldr	r0, [pc, #20]	; (8006114 <__i2b+0x28>)
 80060fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006102:	f000 fc9b 	bl	8006a3c <__assert_func>
 8006106:	2301      	movs	r3, #1
 8006108:	6144      	str	r4, [r0, #20]
 800610a:	6103      	str	r3, [r0, #16]
 800610c:	bd10      	pop	{r4, pc}
 800610e:	bf00      	nop
 8006110:	0800772b 	.word	0x0800772b
 8006114:	0800773c 	.word	0x0800773c

08006118 <__multiply>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	4614      	mov	r4, r2
 800611e:	690a      	ldr	r2, [r1, #16]
 8006120:	6923      	ldr	r3, [r4, #16]
 8006122:	429a      	cmp	r2, r3
 8006124:	bfb8      	it	lt
 8006126:	460b      	movlt	r3, r1
 8006128:	460d      	mov	r5, r1
 800612a:	bfbc      	itt	lt
 800612c:	4625      	movlt	r5, r4
 800612e:	461c      	movlt	r4, r3
 8006130:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006134:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006138:	68ab      	ldr	r3, [r5, #8]
 800613a:	6869      	ldr	r1, [r5, #4]
 800613c:	eb0a 0709 	add.w	r7, sl, r9
 8006140:	42bb      	cmp	r3, r7
 8006142:	b085      	sub	sp, #20
 8006144:	bfb8      	it	lt
 8006146:	3101      	addlt	r1, #1
 8006148:	f7ff fed4 	bl	8005ef4 <_Balloc>
 800614c:	b930      	cbnz	r0, 800615c <__multiply+0x44>
 800614e:	4602      	mov	r2, r0
 8006150:	4b42      	ldr	r3, [pc, #264]	; (800625c <__multiply+0x144>)
 8006152:	4843      	ldr	r0, [pc, #268]	; (8006260 <__multiply+0x148>)
 8006154:	f240 115d 	movw	r1, #349	; 0x15d
 8006158:	f000 fc70 	bl	8006a3c <__assert_func>
 800615c:	f100 0614 	add.w	r6, r0, #20
 8006160:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8006164:	4633      	mov	r3, r6
 8006166:	2200      	movs	r2, #0
 8006168:	4543      	cmp	r3, r8
 800616a:	d31e      	bcc.n	80061aa <__multiply+0x92>
 800616c:	f105 0c14 	add.w	ip, r5, #20
 8006170:	f104 0314 	add.w	r3, r4, #20
 8006174:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8006178:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800617c:	9202      	str	r2, [sp, #8]
 800617e:	ebac 0205 	sub.w	r2, ip, r5
 8006182:	3a15      	subs	r2, #21
 8006184:	f022 0203 	bic.w	r2, r2, #3
 8006188:	3204      	adds	r2, #4
 800618a:	f105 0115 	add.w	r1, r5, #21
 800618e:	458c      	cmp	ip, r1
 8006190:	bf38      	it	cc
 8006192:	2204      	movcc	r2, #4
 8006194:	9201      	str	r2, [sp, #4]
 8006196:	9a02      	ldr	r2, [sp, #8]
 8006198:	9303      	str	r3, [sp, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d808      	bhi.n	80061b0 <__multiply+0x98>
 800619e:	2f00      	cmp	r7, #0
 80061a0:	dc55      	bgt.n	800624e <__multiply+0x136>
 80061a2:	6107      	str	r7, [r0, #16]
 80061a4:	b005      	add	sp, #20
 80061a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061aa:	f843 2b04 	str.w	r2, [r3], #4
 80061ae:	e7db      	b.n	8006168 <__multiply+0x50>
 80061b0:	f8b3 a000 	ldrh.w	sl, [r3]
 80061b4:	f1ba 0f00 	cmp.w	sl, #0
 80061b8:	d020      	beq.n	80061fc <__multiply+0xe4>
 80061ba:	f105 0e14 	add.w	lr, r5, #20
 80061be:	46b1      	mov	r9, r6
 80061c0:	2200      	movs	r2, #0
 80061c2:	f85e 4b04 	ldr.w	r4, [lr], #4
 80061c6:	f8d9 b000 	ldr.w	fp, [r9]
 80061ca:	b2a1      	uxth	r1, r4
 80061cc:	fa1f fb8b 	uxth.w	fp, fp
 80061d0:	fb0a b101 	mla	r1, sl, r1, fp
 80061d4:	4411      	add	r1, r2
 80061d6:	f8d9 2000 	ldr.w	r2, [r9]
 80061da:	0c24      	lsrs	r4, r4, #16
 80061dc:	0c12      	lsrs	r2, r2, #16
 80061de:	fb0a 2404 	mla	r4, sl, r4, r2
 80061e2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80061e6:	b289      	uxth	r1, r1
 80061e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80061ec:	45f4      	cmp	ip, lr
 80061ee:	f849 1b04 	str.w	r1, [r9], #4
 80061f2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80061f6:	d8e4      	bhi.n	80061c2 <__multiply+0xaa>
 80061f8:	9901      	ldr	r1, [sp, #4]
 80061fa:	5072      	str	r2, [r6, r1]
 80061fc:	9a03      	ldr	r2, [sp, #12]
 80061fe:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006202:	3304      	adds	r3, #4
 8006204:	f1b9 0f00 	cmp.w	r9, #0
 8006208:	d01f      	beq.n	800624a <__multiply+0x132>
 800620a:	6834      	ldr	r4, [r6, #0]
 800620c:	f105 0114 	add.w	r1, r5, #20
 8006210:	46b6      	mov	lr, r6
 8006212:	f04f 0a00 	mov.w	sl, #0
 8006216:	880a      	ldrh	r2, [r1, #0]
 8006218:	f8be b002 	ldrh.w	fp, [lr, #2]
 800621c:	fb09 b202 	mla	r2, r9, r2, fp
 8006220:	4492      	add	sl, r2
 8006222:	b2a4      	uxth	r4, r4
 8006224:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8006228:	f84e 4b04 	str.w	r4, [lr], #4
 800622c:	f851 4b04 	ldr.w	r4, [r1], #4
 8006230:	f8be 2000 	ldrh.w	r2, [lr]
 8006234:	0c24      	lsrs	r4, r4, #16
 8006236:	fb09 2404 	mla	r4, r9, r4, r2
 800623a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800623e:	458c      	cmp	ip, r1
 8006240:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006244:	d8e7      	bhi.n	8006216 <__multiply+0xfe>
 8006246:	9a01      	ldr	r2, [sp, #4]
 8006248:	50b4      	str	r4, [r6, r2]
 800624a:	3604      	adds	r6, #4
 800624c:	e7a3      	b.n	8006196 <__multiply+0x7e>
 800624e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1a5      	bne.n	80061a2 <__multiply+0x8a>
 8006256:	3f01      	subs	r7, #1
 8006258:	e7a1      	b.n	800619e <__multiply+0x86>
 800625a:	bf00      	nop
 800625c:	0800772b 	.word	0x0800772b
 8006260:	0800773c 	.word	0x0800773c

08006264 <__pow5mult>:
 8006264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006268:	4615      	mov	r5, r2
 800626a:	f012 0203 	ands.w	r2, r2, #3
 800626e:	4606      	mov	r6, r0
 8006270:	460f      	mov	r7, r1
 8006272:	d007      	beq.n	8006284 <__pow5mult+0x20>
 8006274:	4c25      	ldr	r4, [pc, #148]	; (800630c <__pow5mult+0xa8>)
 8006276:	3a01      	subs	r2, #1
 8006278:	2300      	movs	r3, #0
 800627a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800627e:	f7ff fe9b 	bl	8005fb8 <__multadd>
 8006282:	4607      	mov	r7, r0
 8006284:	10ad      	asrs	r5, r5, #2
 8006286:	d03d      	beq.n	8006304 <__pow5mult+0xa0>
 8006288:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800628a:	b97c      	cbnz	r4, 80062ac <__pow5mult+0x48>
 800628c:	2010      	movs	r0, #16
 800628e:	f7ff fe1b 	bl	8005ec8 <malloc>
 8006292:	4602      	mov	r2, r0
 8006294:	6270      	str	r0, [r6, #36]	; 0x24
 8006296:	b928      	cbnz	r0, 80062a4 <__pow5mult+0x40>
 8006298:	4b1d      	ldr	r3, [pc, #116]	; (8006310 <__pow5mult+0xac>)
 800629a:	481e      	ldr	r0, [pc, #120]	; (8006314 <__pow5mult+0xb0>)
 800629c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80062a0:	f000 fbcc 	bl	8006a3c <__assert_func>
 80062a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	60c4      	str	r4, [r0, #12]
 80062ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80062b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80062b4:	b94c      	cbnz	r4, 80062ca <__pow5mult+0x66>
 80062b6:	f240 2171 	movw	r1, #625	; 0x271
 80062ba:	4630      	mov	r0, r6
 80062bc:	f7ff ff16 	bl	80060ec <__i2b>
 80062c0:	2300      	movs	r3, #0
 80062c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80062c6:	4604      	mov	r4, r0
 80062c8:	6003      	str	r3, [r0, #0]
 80062ca:	f04f 0900 	mov.w	r9, #0
 80062ce:	07eb      	lsls	r3, r5, #31
 80062d0:	d50a      	bpl.n	80062e8 <__pow5mult+0x84>
 80062d2:	4639      	mov	r1, r7
 80062d4:	4622      	mov	r2, r4
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ff1e 	bl	8006118 <__multiply>
 80062dc:	4639      	mov	r1, r7
 80062de:	4680      	mov	r8, r0
 80062e0:	4630      	mov	r0, r6
 80062e2:	f7ff fe47 	bl	8005f74 <_Bfree>
 80062e6:	4647      	mov	r7, r8
 80062e8:	106d      	asrs	r5, r5, #1
 80062ea:	d00b      	beq.n	8006304 <__pow5mult+0xa0>
 80062ec:	6820      	ldr	r0, [r4, #0]
 80062ee:	b938      	cbnz	r0, 8006300 <__pow5mult+0x9c>
 80062f0:	4622      	mov	r2, r4
 80062f2:	4621      	mov	r1, r4
 80062f4:	4630      	mov	r0, r6
 80062f6:	f7ff ff0f 	bl	8006118 <__multiply>
 80062fa:	6020      	str	r0, [r4, #0]
 80062fc:	f8c0 9000 	str.w	r9, [r0]
 8006300:	4604      	mov	r4, r0
 8006302:	e7e4      	b.n	80062ce <__pow5mult+0x6a>
 8006304:	4638      	mov	r0, r7
 8006306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800630a:	bf00      	nop
 800630c:	08007890 	.word	0x08007890
 8006310:	080076b5 	.word	0x080076b5
 8006314:	0800773c 	.word	0x0800773c

08006318 <__lshift>:
 8006318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800631c:	460c      	mov	r4, r1
 800631e:	6849      	ldr	r1, [r1, #4]
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006326:	68a3      	ldr	r3, [r4, #8]
 8006328:	4607      	mov	r7, r0
 800632a:	4691      	mov	r9, r2
 800632c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006330:	f108 0601 	add.w	r6, r8, #1
 8006334:	42b3      	cmp	r3, r6
 8006336:	db0b      	blt.n	8006350 <__lshift+0x38>
 8006338:	4638      	mov	r0, r7
 800633a:	f7ff fddb 	bl	8005ef4 <_Balloc>
 800633e:	4605      	mov	r5, r0
 8006340:	b948      	cbnz	r0, 8006356 <__lshift+0x3e>
 8006342:	4602      	mov	r2, r0
 8006344:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <__lshift+0xd0>)
 8006346:	4829      	ldr	r0, [pc, #164]	; (80063ec <__lshift+0xd4>)
 8006348:	f240 11d9 	movw	r1, #473	; 0x1d9
 800634c:	f000 fb76 	bl	8006a3c <__assert_func>
 8006350:	3101      	adds	r1, #1
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	e7ee      	b.n	8006334 <__lshift+0x1c>
 8006356:	2300      	movs	r3, #0
 8006358:	f100 0114 	add.w	r1, r0, #20
 800635c:	f100 0210 	add.w	r2, r0, #16
 8006360:	4618      	mov	r0, r3
 8006362:	4553      	cmp	r3, sl
 8006364:	db33      	blt.n	80063ce <__lshift+0xb6>
 8006366:	6920      	ldr	r0, [r4, #16]
 8006368:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800636c:	f104 0314 	add.w	r3, r4, #20
 8006370:	f019 091f 	ands.w	r9, r9, #31
 8006374:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006378:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800637c:	d02b      	beq.n	80063d6 <__lshift+0xbe>
 800637e:	f1c9 0e20 	rsb	lr, r9, #32
 8006382:	468a      	mov	sl, r1
 8006384:	2200      	movs	r2, #0
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	fa00 f009 	lsl.w	r0, r0, r9
 800638c:	4302      	orrs	r2, r0
 800638e:	f84a 2b04 	str.w	r2, [sl], #4
 8006392:	f853 2b04 	ldr.w	r2, [r3], #4
 8006396:	459c      	cmp	ip, r3
 8006398:	fa22 f20e 	lsr.w	r2, r2, lr
 800639c:	d8f3      	bhi.n	8006386 <__lshift+0x6e>
 800639e:	ebac 0304 	sub.w	r3, ip, r4
 80063a2:	3b15      	subs	r3, #21
 80063a4:	f023 0303 	bic.w	r3, r3, #3
 80063a8:	3304      	adds	r3, #4
 80063aa:	f104 0015 	add.w	r0, r4, #21
 80063ae:	4584      	cmp	ip, r0
 80063b0:	bf38      	it	cc
 80063b2:	2304      	movcc	r3, #4
 80063b4:	50ca      	str	r2, [r1, r3]
 80063b6:	b10a      	cbz	r2, 80063bc <__lshift+0xa4>
 80063b8:	f108 0602 	add.w	r6, r8, #2
 80063bc:	3e01      	subs	r6, #1
 80063be:	4638      	mov	r0, r7
 80063c0:	612e      	str	r6, [r5, #16]
 80063c2:	4621      	mov	r1, r4
 80063c4:	f7ff fdd6 	bl	8005f74 <_Bfree>
 80063c8:	4628      	mov	r0, r5
 80063ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80063d2:	3301      	adds	r3, #1
 80063d4:	e7c5      	b.n	8006362 <__lshift+0x4a>
 80063d6:	3904      	subs	r1, #4
 80063d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80063e0:	459c      	cmp	ip, r3
 80063e2:	d8f9      	bhi.n	80063d8 <__lshift+0xc0>
 80063e4:	e7ea      	b.n	80063bc <__lshift+0xa4>
 80063e6:	bf00      	nop
 80063e8:	0800772b 	.word	0x0800772b
 80063ec:	0800773c 	.word	0x0800773c

080063f0 <__mcmp>:
 80063f0:	b530      	push	{r4, r5, lr}
 80063f2:	6902      	ldr	r2, [r0, #16]
 80063f4:	690c      	ldr	r4, [r1, #16]
 80063f6:	1b12      	subs	r2, r2, r4
 80063f8:	d10e      	bne.n	8006418 <__mcmp+0x28>
 80063fa:	f100 0314 	add.w	r3, r0, #20
 80063fe:	3114      	adds	r1, #20
 8006400:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006404:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006408:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800640c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006410:	42a5      	cmp	r5, r4
 8006412:	d003      	beq.n	800641c <__mcmp+0x2c>
 8006414:	d305      	bcc.n	8006422 <__mcmp+0x32>
 8006416:	2201      	movs	r2, #1
 8006418:	4610      	mov	r0, r2
 800641a:	bd30      	pop	{r4, r5, pc}
 800641c:	4283      	cmp	r3, r0
 800641e:	d3f3      	bcc.n	8006408 <__mcmp+0x18>
 8006420:	e7fa      	b.n	8006418 <__mcmp+0x28>
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	e7f7      	b.n	8006418 <__mcmp+0x28>

08006428 <__mdiff>:
 8006428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642c:	460c      	mov	r4, r1
 800642e:	4606      	mov	r6, r0
 8006430:	4611      	mov	r1, r2
 8006432:	4620      	mov	r0, r4
 8006434:	4617      	mov	r7, r2
 8006436:	f7ff ffdb 	bl	80063f0 <__mcmp>
 800643a:	1e05      	subs	r5, r0, #0
 800643c:	d110      	bne.n	8006460 <__mdiff+0x38>
 800643e:	4629      	mov	r1, r5
 8006440:	4630      	mov	r0, r6
 8006442:	f7ff fd57 	bl	8005ef4 <_Balloc>
 8006446:	b930      	cbnz	r0, 8006456 <__mdiff+0x2e>
 8006448:	4b39      	ldr	r3, [pc, #228]	; (8006530 <__mdiff+0x108>)
 800644a:	4602      	mov	r2, r0
 800644c:	f240 2132 	movw	r1, #562	; 0x232
 8006450:	4838      	ldr	r0, [pc, #224]	; (8006534 <__mdiff+0x10c>)
 8006452:	f000 faf3 	bl	8006a3c <__assert_func>
 8006456:	2301      	movs	r3, #1
 8006458:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800645c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	bfa4      	itt	ge
 8006462:	463b      	movge	r3, r7
 8006464:	4627      	movge	r7, r4
 8006466:	4630      	mov	r0, r6
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	bfa6      	itte	ge
 800646c:	461c      	movge	r4, r3
 800646e:	2500      	movge	r5, #0
 8006470:	2501      	movlt	r5, #1
 8006472:	f7ff fd3f 	bl	8005ef4 <_Balloc>
 8006476:	b920      	cbnz	r0, 8006482 <__mdiff+0x5a>
 8006478:	4b2d      	ldr	r3, [pc, #180]	; (8006530 <__mdiff+0x108>)
 800647a:	4602      	mov	r2, r0
 800647c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006480:	e7e6      	b.n	8006450 <__mdiff+0x28>
 8006482:	693e      	ldr	r6, [r7, #16]
 8006484:	60c5      	str	r5, [r0, #12]
 8006486:	6925      	ldr	r5, [r4, #16]
 8006488:	f107 0114 	add.w	r1, r7, #20
 800648c:	f104 0914 	add.w	r9, r4, #20
 8006490:	f100 0e14 	add.w	lr, r0, #20
 8006494:	f107 0210 	add.w	r2, r7, #16
 8006498:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800649c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80064a0:	46f2      	mov	sl, lr
 80064a2:	2700      	movs	r7, #0
 80064a4:	f859 3b04 	ldr.w	r3, [r9], #4
 80064a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80064ac:	fa1f f883 	uxth.w	r8, r3
 80064b0:	fa17 f78b 	uxtah	r7, r7, fp
 80064b4:	0c1b      	lsrs	r3, r3, #16
 80064b6:	eba7 0808 	sub.w	r8, r7, r8
 80064ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80064be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80064c2:	fa1f f888 	uxth.w	r8, r8
 80064c6:	141f      	asrs	r7, r3, #16
 80064c8:	454d      	cmp	r5, r9
 80064ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80064ce:	f84a 3b04 	str.w	r3, [sl], #4
 80064d2:	d8e7      	bhi.n	80064a4 <__mdiff+0x7c>
 80064d4:	1b2b      	subs	r3, r5, r4
 80064d6:	3b15      	subs	r3, #21
 80064d8:	f023 0303 	bic.w	r3, r3, #3
 80064dc:	3304      	adds	r3, #4
 80064de:	3415      	adds	r4, #21
 80064e0:	42a5      	cmp	r5, r4
 80064e2:	bf38      	it	cc
 80064e4:	2304      	movcc	r3, #4
 80064e6:	4419      	add	r1, r3
 80064e8:	4473      	add	r3, lr
 80064ea:	469e      	mov	lr, r3
 80064ec:	460d      	mov	r5, r1
 80064ee:	4565      	cmp	r5, ip
 80064f0:	d30e      	bcc.n	8006510 <__mdiff+0xe8>
 80064f2:	f10c 0203 	add.w	r2, ip, #3
 80064f6:	1a52      	subs	r2, r2, r1
 80064f8:	f022 0203 	bic.w	r2, r2, #3
 80064fc:	3903      	subs	r1, #3
 80064fe:	458c      	cmp	ip, r1
 8006500:	bf38      	it	cc
 8006502:	2200      	movcc	r2, #0
 8006504:	441a      	add	r2, r3
 8006506:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800650a:	b17b      	cbz	r3, 800652c <__mdiff+0x104>
 800650c:	6106      	str	r6, [r0, #16]
 800650e:	e7a5      	b.n	800645c <__mdiff+0x34>
 8006510:	f855 8b04 	ldr.w	r8, [r5], #4
 8006514:	fa17 f488 	uxtah	r4, r7, r8
 8006518:	1422      	asrs	r2, r4, #16
 800651a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800651e:	b2a4      	uxth	r4, r4
 8006520:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006524:	f84e 4b04 	str.w	r4, [lr], #4
 8006528:	1417      	asrs	r7, r2, #16
 800652a:	e7e0      	b.n	80064ee <__mdiff+0xc6>
 800652c:	3e01      	subs	r6, #1
 800652e:	e7ea      	b.n	8006506 <__mdiff+0xde>
 8006530:	0800772b 	.word	0x0800772b
 8006534:	0800773c 	.word	0x0800773c

08006538 <__d2b>:
 8006538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800653c:	4689      	mov	r9, r1
 800653e:	2101      	movs	r1, #1
 8006540:	ec57 6b10 	vmov	r6, r7, d0
 8006544:	4690      	mov	r8, r2
 8006546:	f7ff fcd5 	bl	8005ef4 <_Balloc>
 800654a:	4604      	mov	r4, r0
 800654c:	b930      	cbnz	r0, 800655c <__d2b+0x24>
 800654e:	4602      	mov	r2, r0
 8006550:	4b25      	ldr	r3, [pc, #148]	; (80065e8 <__d2b+0xb0>)
 8006552:	4826      	ldr	r0, [pc, #152]	; (80065ec <__d2b+0xb4>)
 8006554:	f240 310a 	movw	r1, #778	; 0x30a
 8006558:	f000 fa70 	bl	8006a3c <__assert_func>
 800655c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006560:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006564:	bb35      	cbnz	r5, 80065b4 <__d2b+0x7c>
 8006566:	2e00      	cmp	r6, #0
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	d028      	beq.n	80065be <__d2b+0x86>
 800656c:	4668      	mov	r0, sp
 800656e:	9600      	str	r6, [sp, #0]
 8006570:	f7ff fd8c 	bl	800608c <__lo0bits>
 8006574:	9900      	ldr	r1, [sp, #0]
 8006576:	b300      	cbz	r0, 80065ba <__d2b+0x82>
 8006578:	9a01      	ldr	r2, [sp, #4]
 800657a:	f1c0 0320 	rsb	r3, r0, #32
 800657e:	fa02 f303 	lsl.w	r3, r2, r3
 8006582:	430b      	orrs	r3, r1
 8006584:	40c2      	lsrs	r2, r0
 8006586:	6163      	str	r3, [r4, #20]
 8006588:	9201      	str	r2, [sp, #4]
 800658a:	9b01      	ldr	r3, [sp, #4]
 800658c:	61a3      	str	r3, [r4, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf14      	ite	ne
 8006592:	2202      	movne	r2, #2
 8006594:	2201      	moveq	r2, #1
 8006596:	6122      	str	r2, [r4, #16]
 8006598:	b1d5      	cbz	r5, 80065d0 <__d2b+0x98>
 800659a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800659e:	4405      	add	r5, r0
 80065a0:	f8c9 5000 	str.w	r5, [r9]
 80065a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065a8:	f8c8 0000 	str.w	r0, [r8]
 80065ac:	4620      	mov	r0, r4
 80065ae:	b003      	add	sp, #12
 80065b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80065b8:	e7d5      	b.n	8006566 <__d2b+0x2e>
 80065ba:	6161      	str	r1, [r4, #20]
 80065bc:	e7e5      	b.n	800658a <__d2b+0x52>
 80065be:	a801      	add	r0, sp, #4
 80065c0:	f7ff fd64 	bl	800608c <__lo0bits>
 80065c4:	9b01      	ldr	r3, [sp, #4]
 80065c6:	6163      	str	r3, [r4, #20]
 80065c8:	2201      	movs	r2, #1
 80065ca:	6122      	str	r2, [r4, #16]
 80065cc:	3020      	adds	r0, #32
 80065ce:	e7e3      	b.n	8006598 <__d2b+0x60>
 80065d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065d8:	f8c9 0000 	str.w	r0, [r9]
 80065dc:	6918      	ldr	r0, [r3, #16]
 80065de:	f7ff fd35 	bl	800604c <__hi0bits>
 80065e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80065e6:	e7df      	b.n	80065a8 <__d2b+0x70>
 80065e8:	0800772b 	.word	0x0800772b
 80065ec:	0800773c 	.word	0x0800773c

080065f0 <_calloc_r>:
 80065f0:	b513      	push	{r0, r1, r4, lr}
 80065f2:	434a      	muls	r2, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	9201      	str	r2, [sp, #4]
 80065f8:	f000 f85a 	bl	80066b0 <_malloc_r>
 80065fc:	4604      	mov	r4, r0
 80065fe:	b118      	cbz	r0, 8006608 <_calloc_r+0x18>
 8006600:	9a01      	ldr	r2, [sp, #4]
 8006602:	2100      	movs	r1, #0
 8006604:	f7fe f950 	bl	80048a8 <memset>
 8006608:	4620      	mov	r0, r4
 800660a:	b002      	add	sp, #8
 800660c:	bd10      	pop	{r4, pc}
	...

08006610 <_free_r>:
 8006610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006612:	2900      	cmp	r1, #0
 8006614:	d048      	beq.n	80066a8 <_free_r+0x98>
 8006616:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800661a:	9001      	str	r0, [sp, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	f1a1 0404 	sub.w	r4, r1, #4
 8006622:	bfb8      	it	lt
 8006624:	18e4      	addlt	r4, r4, r3
 8006626:	f000 fa65 	bl	8006af4 <__malloc_lock>
 800662a:	4a20      	ldr	r2, [pc, #128]	; (80066ac <_free_r+0x9c>)
 800662c:	9801      	ldr	r0, [sp, #4]
 800662e:	6813      	ldr	r3, [r2, #0]
 8006630:	4615      	mov	r5, r2
 8006632:	b933      	cbnz	r3, 8006642 <_free_r+0x32>
 8006634:	6063      	str	r3, [r4, #4]
 8006636:	6014      	str	r4, [r2, #0]
 8006638:	b003      	add	sp, #12
 800663a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800663e:	f000 ba5f 	b.w	8006b00 <__malloc_unlock>
 8006642:	42a3      	cmp	r3, r4
 8006644:	d90b      	bls.n	800665e <_free_r+0x4e>
 8006646:	6821      	ldr	r1, [r4, #0]
 8006648:	1862      	adds	r2, r4, r1
 800664a:	4293      	cmp	r3, r2
 800664c:	bf04      	itt	eq
 800664e:	681a      	ldreq	r2, [r3, #0]
 8006650:	685b      	ldreq	r3, [r3, #4]
 8006652:	6063      	str	r3, [r4, #4]
 8006654:	bf04      	itt	eq
 8006656:	1852      	addeq	r2, r2, r1
 8006658:	6022      	streq	r2, [r4, #0]
 800665a:	602c      	str	r4, [r5, #0]
 800665c:	e7ec      	b.n	8006638 <_free_r+0x28>
 800665e:	461a      	mov	r2, r3
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	b10b      	cbz	r3, 8006668 <_free_r+0x58>
 8006664:	42a3      	cmp	r3, r4
 8006666:	d9fa      	bls.n	800665e <_free_r+0x4e>
 8006668:	6811      	ldr	r1, [r2, #0]
 800666a:	1855      	adds	r5, r2, r1
 800666c:	42a5      	cmp	r5, r4
 800666e:	d10b      	bne.n	8006688 <_free_r+0x78>
 8006670:	6824      	ldr	r4, [r4, #0]
 8006672:	4421      	add	r1, r4
 8006674:	1854      	adds	r4, r2, r1
 8006676:	42a3      	cmp	r3, r4
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	d1dd      	bne.n	8006638 <_free_r+0x28>
 800667c:	681c      	ldr	r4, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	4421      	add	r1, r4
 8006684:	6011      	str	r1, [r2, #0]
 8006686:	e7d7      	b.n	8006638 <_free_r+0x28>
 8006688:	d902      	bls.n	8006690 <_free_r+0x80>
 800668a:	230c      	movs	r3, #12
 800668c:	6003      	str	r3, [r0, #0]
 800668e:	e7d3      	b.n	8006638 <_free_r+0x28>
 8006690:	6825      	ldr	r5, [r4, #0]
 8006692:	1961      	adds	r1, r4, r5
 8006694:	428b      	cmp	r3, r1
 8006696:	bf04      	itt	eq
 8006698:	6819      	ldreq	r1, [r3, #0]
 800669a:	685b      	ldreq	r3, [r3, #4]
 800669c:	6063      	str	r3, [r4, #4]
 800669e:	bf04      	itt	eq
 80066a0:	1949      	addeq	r1, r1, r5
 80066a2:	6021      	streq	r1, [r4, #0]
 80066a4:	6054      	str	r4, [r2, #4]
 80066a6:	e7c7      	b.n	8006638 <_free_r+0x28>
 80066a8:	b003      	add	sp, #12
 80066aa:	bd30      	pop	{r4, r5, pc}
 80066ac:	2000021c 	.word	0x2000021c

080066b0 <_malloc_r>:
 80066b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066b2:	1ccd      	adds	r5, r1, #3
 80066b4:	f025 0503 	bic.w	r5, r5, #3
 80066b8:	3508      	adds	r5, #8
 80066ba:	2d0c      	cmp	r5, #12
 80066bc:	bf38      	it	cc
 80066be:	250c      	movcc	r5, #12
 80066c0:	2d00      	cmp	r5, #0
 80066c2:	4606      	mov	r6, r0
 80066c4:	db01      	blt.n	80066ca <_malloc_r+0x1a>
 80066c6:	42a9      	cmp	r1, r5
 80066c8:	d903      	bls.n	80066d2 <_malloc_r+0x22>
 80066ca:	230c      	movs	r3, #12
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	2000      	movs	r0, #0
 80066d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066d2:	f000 fa0f 	bl	8006af4 <__malloc_lock>
 80066d6:	4921      	ldr	r1, [pc, #132]	; (800675c <_malloc_r+0xac>)
 80066d8:	680a      	ldr	r2, [r1, #0]
 80066da:	4614      	mov	r4, r2
 80066dc:	b99c      	cbnz	r4, 8006706 <_malloc_r+0x56>
 80066de:	4f20      	ldr	r7, [pc, #128]	; (8006760 <_malloc_r+0xb0>)
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	b923      	cbnz	r3, 80066ee <_malloc_r+0x3e>
 80066e4:	4621      	mov	r1, r4
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f998 	bl	8006a1c <_sbrk_r>
 80066ec:	6038      	str	r0, [r7, #0]
 80066ee:	4629      	mov	r1, r5
 80066f0:	4630      	mov	r0, r6
 80066f2:	f000 f993 	bl	8006a1c <_sbrk_r>
 80066f6:	1c43      	adds	r3, r0, #1
 80066f8:	d123      	bne.n	8006742 <_malloc_r+0x92>
 80066fa:	230c      	movs	r3, #12
 80066fc:	6033      	str	r3, [r6, #0]
 80066fe:	4630      	mov	r0, r6
 8006700:	f000 f9fe 	bl	8006b00 <__malloc_unlock>
 8006704:	e7e3      	b.n	80066ce <_malloc_r+0x1e>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	1b5b      	subs	r3, r3, r5
 800670a:	d417      	bmi.n	800673c <_malloc_r+0x8c>
 800670c:	2b0b      	cmp	r3, #11
 800670e:	d903      	bls.n	8006718 <_malloc_r+0x68>
 8006710:	6023      	str	r3, [r4, #0]
 8006712:	441c      	add	r4, r3
 8006714:	6025      	str	r5, [r4, #0]
 8006716:	e004      	b.n	8006722 <_malloc_r+0x72>
 8006718:	6863      	ldr	r3, [r4, #4]
 800671a:	42a2      	cmp	r2, r4
 800671c:	bf0c      	ite	eq
 800671e:	600b      	streq	r3, [r1, #0]
 8006720:	6053      	strne	r3, [r2, #4]
 8006722:	4630      	mov	r0, r6
 8006724:	f000 f9ec 	bl	8006b00 <__malloc_unlock>
 8006728:	f104 000b 	add.w	r0, r4, #11
 800672c:	1d23      	adds	r3, r4, #4
 800672e:	f020 0007 	bic.w	r0, r0, #7
 8006732:	1ac2      	subs	r2, r0, r3
 8006734:	d0cc      	beq.n	80066d0 <_malloc_r+0x20>
 8006736:	1a1b      	subs	r3, r3, r0
 8006738:	50a3      	str	r3, [r4, r2]
 800673a:	e7c9      	b.n	80066d0 <_malloc_r+0x20>
 800673c:	4622      	mov	r2, r4
 800673e:	6864      	ldr	r4, [r4, #4]
 8006740:	e7cc      	b.n	80066dc <_malloc_r+0x2c>
 8006742:	1cc4      	adds	r4, r0, #3
 8006744:	f024 0403 	bic.w	r4, r4, #3
 8006748:	42a0      	cmp	r0, r4
 800674a:	d0e3      	beq.n	8006714 <_malloc_r+0x64>
 800674c:	1a21      	subs	r1, r4, r0
 800674e:	4630      	mov	r0, r6
 8006750:	f000 f964 	bl	8006a1c <_sbrk_r>
 8006754:	3001      	adds	r0, #1
 8006756:	d1dd      	bne.n	8006714 <_malloc_r+0x64>
 8006758:	e7cf      	b.n	80066fa <_malloc_r+0x4a>
 800675a:	bf00      	nop
 800675c:	2000021c 	.word	0x2000021c
 8006760:	20000220 	.word	0x20000220

08006764 <__ssputs_r>:
 8006764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006768:	688e      	ldr	r6, [r1, #8]
 800676a:	429e      	cmp	r6, r3
 800676c:	4682      	mov	sl, r0
 800676e:	460c      	mov	r4, r1
 8006770:	4690      	mov	r8, r2
 8006772:	461f      	mov	r7, r3
 8006774:	d838      	bhi.n	80067e8 <__ssputs_r+0x84>
 8006776:	898a      	ldrh	r2, [r1, #12]
 8006778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800677c:	d032      	beq.n	80067e4 <__ssputs_r+0x80>
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	6909      	ldr	r1, [r1, #16]
 8006782:	eba5 0901 	sub.w	r9, r5, r1
 8006786:	6965      	ldr	r5, [r4, #20]
 8006788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800678c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006790:	3301      	adds	r3, #1
 8006792:	444b      	add	r3, r9
 8006794:	106d      	asrs	r5, r5, #1
 8006796:	429d      	cmp	r5, r3
 8006798:	bf38      	it	cc
 800679a:	461d      	movcc	r5, r3
 800679c:	0553      	lsls	r3, r2, #21
 800679e:	d531      	bpl.n	8006804 <__ssputs_r+0xa0>
 80067a0:	4629      	mov	r1, r5
 80067a2:	f7ff ff85 	bl	80066b0 <_malloc_r>
 80067a6:	4606      	mov	r6, r0
 80067a8:	b950      	cbnz	r0, 80067c0 <__ssputs_r+0x5c>
 80067aa:	230c      	movs	r3, #12
 80067ac:	f8ca 3000 	str.w	r3, [sl]
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067b6:	81a3      	strh	r3, [r4, #12]
 80067b8:	f04f 30ff 	mov.w	r0, #4294967295
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	6921      	ldr	r1, [r4, #16]
 80067c2:	464a      	mov	r2, r9
 80067c4:	f7ff fb88 	bl	8005ed8 <memcpy>
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	6126      	str	r6, [r4, #16]
 80067d6:	6165      	str	r5, [r4, #20]
 80067d8:	444e      	add	r6, r9
 80067da:	eba5 0509 	sub.w	r5, r5, r9
 80067de:	6026      	str	r6, [r4, #0]
 80067e0:	60a5      	str	r5, [r4, #8]
 80067e2:	463e      	mov	r6, r7
 80067e4:	42be      	cmp	r6, r7
 80067e6:	d900      	bls.n	80067ea <__ssputs_r+0x86>
 80067e8:	463e      	mov	r6, r7
 80067ea:	4632      	mov	r2, r6
 80067ec:	6820      	ldr	r0, [r4, #0]
 80067ee:	4641      	mov	r1, r8
 80067f0:	f000 f966 	bl	8006ac0 <memmove>
 80067f4:	68a3      	ldr	r3, [r4, #8]
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	1b9b      	subs	r3, r3, r6
 80067fa:	4432      	add	r2, r6
 80067fc:	60a3      	str	r3, [r4, #8]
 80067fe:	6022      	str	r2, [r4, #0]
 8006800:	2000      	movs	r0, #0
 8006802:	e7db      	b.n	80067bc <__ssputs_r+0x58>
 8006804:	462a      	mov	r2, r5
 8006806:	f000 f981 	bl	8006b0c <_realloc_r>
 800680a:	4606      	mov	r6, r0
 800680c:	2800      	cmp	r0, #0
 800680e:	d1e1      	bne.n	80067d4 <__ssputs_r+0x70>
 8006810:	6921      	ldr	r1, [r4, #16]
 8006812:	4650      	mov	r0, sl
 8006814:	f7ff fefc 	bl	8006610 <_free_r>
 8006818:	e7c7      	b.n	80067aa <__ssputs_r+0x46>
	...

0800681c <_svfiprintf_r>:
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006820:	4698      	mov	r8, r3
 8006822:	898b      	ldrh	r3, [r1, #12]
 8006824:	061b      	lsls	r3, r3, #24
 8006826:	b09d      	sub	sp, #116	; 0x74
 8006828:	4607      	mov	r7, r0
 800682a:	460d      	mov	r5, r1
 800682c:	4614      	mov	r4, r2
 800682e:	d50e      	bpl.n	800684e <_svfiprintf_r+0x32>
 8006830:	690b      	ldr	r3, [r1, #16]
 8006832:	b963      	cbnz	r3, 800684e <_svfiprintf_r+0x32>
 8006834:	2140      	movs	r1, #64	; 0x40
 8006836:	f7ff ff3b 	bl	80066b0 <_malloc_r>
 800683a:	6028      	str	r0, [r5, #0]
 800683c:	6128      	str	r0, [r5, #16]
 800683e:	b920      	cbnz	r0, 800684a <_svfiprintf_r+0x2e>
 8006840:	230c      	movs	r3, #12
 8006842:	603b      	str	r3, [r7, #0]
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e0d1      	b.n	80069ee <_svfiprintf_r+0x1d2>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	616b      	str	r3, [r5, #20]
 800684e:	2300      	movs	r3, #0
 8006850:	9309      	str	r3, [sp, #36]	; 0x24
 8006852:	2320      	movs	r3, #32
 8006854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006858:	f8cd 800c 	str.w	r8, [sp, #12]
 800685c:	2330      	movs	r3, #48	; 0x30
 800685e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a08 <_svfiprintf_r+0x1ec>
 8006862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006866:	f04f 0901 	mov.w	r9, #1
 800686a:	4623      	mov	r3, r4
 800686c:	469a      	mov	sl, r3
 800686e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006872:	b10a      	cbz	r2, 8006878 <_svfiprintf_r+0x5c>
 8006874:	2a25      	cmp	r2, #37	; 0x25
 8006876:	d1f9      	bne.n	800686c <_svfiprintf_r+0x50>
 8006878:	ebba 0b04 	subs.w	fp, sl, r4
 800687c:	d00b      	beq.n	8006896 <_svfiprintf_r+0x7a>
 800687e:	465b      	mov	r3, fp
 8006880:	4622      	mov	r2, r4
 8006882:	4629      	mov	r1, r5
 8006884:	4638      	mov	r0, r7
 8006886:	f7ff ff6d 	bl	8006764 <__ssputs_r>
 800688a:	3001      	adds	r0, #1
 800688c:	f000 80aa 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 8006890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006892:	445a      	add	r2, fp
 8006894:	9209      	str	r2, [sp, #36]	; 0x24
 8006896:	f89a 3000 	ldrb.w	r3, [sl]
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80a2 	beq.w	80069e4 <_svfiprintf_r+0x1c8>
 80068a0:	2300      	movs	r3, #0
 80068a2:	f04f 32ff 	mov.w	r2, #4294967295
 80068a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068aa:	f10a 0a01 	add.w	sl, sl, #1
 80068ae:	9304      	str	r3, [sp, #16]
 80068b0:	9307      	str	r3, [sp, #28]
 80068b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068b6:	931a      	str	r3, [sp, #104]	; 0x68
 80068b8:	4654      	mov	r4, sl
 80068ba:	2205      	movs	r2, #5
 80068bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c0:	4851      	ldr	r0, [pc, #324]	; (8006a08 <_svfiprintf_r+0x1ec>)
 80068c2:	f7f9 fc95 	bl	80001f0 <memchr>
 80068c6:	9a04      	ldr	r2, [sp, #16]
 80068c8:	b9d8      	cbnz	r0, 8006902 <_svfiprintf_r+0xe6>
 80068ca:	06d0      	lsls	r0, r2, #27
 80068cc:	bf44      	itt	mi
 80068ce:	2320      	movmi	r3, #32
 80068d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068d4:	0711      	lsls	r1, r2, #28
 80068d6:	bf44      	itt	mi
 80068d8:	232b      	movmi	r3, #43	; 0x2b
 80068da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068de:	f89a 3000 	ldrb.w	r3, [sl]
 80068e2:	2b2a      	cmp	r3, #42	; 0x2a
 80068e4:	d015      	beq.n	8006912 <_svfiprintf_r+0xf6>
 80068e6:	9a07      	ldr	r2, [sp, #28]
 80068e8:	4654      	mov	r4, sl
 80068ea:	2000      	movs	r0, #0
 80068ec:	f04f 0c0a 	mov.w	ip, #10
 80068f0:	4621      	mov	r1, r4
 80068f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068f6:	3b30      	subs	r3, #48	; 0x30
 80068f8:	2b09      	cmp	r3, #9
 80068fa:	d94e      	bls.n	800699a <_svfiprintf_r+0x17e>
 80068fc:	b1b0      	cbz	r0, 800692c <_svfiprintf_r+0x110>
 80068fe:	9207      	str	r2, [sp, #28]
 8006900:	e014      	b.n	800692c <_svfiprintf_r+0x110>
 8006902:	eba0 0308 	sub.w	r3, r0, r8
 8006906:	fa09 f303 	lsl.w	r3, r9, r3
 800690a:	4313      	orrs	r3, r2
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	46a2      	mov	sl, r4
 8006910:	e7d2      	b.n	80068b8 <_svfiprintf_r+0x9c>
 8006912:	9b03      	ldr	r3, [sp, #12]
 8006914:	1d19      	adds	r1, r3, #4
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	9103      	str	r1, [sp, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbb      	ittet	lt
 800691e:	425b      	neglt	r3, r3
 8006920:	f042 0202 	orrlt.w	r2, r2, #2
 8006924:	9307      	strge	r3, [sp, #28]
 8006926:	9307      	strlt	r3, [sp, #28]
 8006928:	bfb8      	it	lt
 800692a:	9204      	strlt	r2, [sp, #16]
 800692c:	7823      	ldrb	r3, [r4, #0]
 800692e:	2b2e      	cmp	r3, #46	; 0x2e
 8006930:	d10c      	bne.n	800694c <_svfiprintf_r+0x130>
 8006932:	7863      	ldrb	r3, [r4, #1]
 8006934:	2b2a      	cmp	r3, #42	; 0x2a
 8006936:	d135      	bne.n	80069a4 <_svfiprintf_r+0x188>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	1d1a      	adds	r2, r3, #4
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	9203      	str	r2, [sp, #12]
 8006940:	2b00      	cmp	r3, #0
 8006942:	bfb8      	it	lt
 8006944:	f04f 33ff 	movlt.w	r3, #4294967295
 8006948:	3402      	adds	r4, #2
 800694a:	9305      	str	r3, [sp, #20]
 800694c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a18 <_svfiprintf_r+0x1fc>
 8006950:	7821      	ldrb	r1, [r4, #0]
 8006952:	2203      	movs	r2, #3
 8006954:	4650      	mov	r0, sl
 8006956:	f7f9 fc4b 	bl	80001f0 <memchr>
 800695a:	b140      	cbz	r0, 800696e <_svfiprintf_r+0x152>
 800695c:	2340      	movs	r3, #64	; 0x40
 800695e:	eba0 000a 	sub.w	r0, r0, sl
 8006962:	fa03 f000 	lsl.w	r0, r3, r0
 8006966:	9b04      	ldr	r3, [sp, #16]
 8006968:	4303      	orrs	r3, r0
 800696a:	3401      	adds	r4, #1
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006972:	4826      	ldr	r0, [pc, #152]	; (8006a0c <_svfiprintf_r+0x1f0>)
 8006974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006978:	2206      	movs	r2, #6
 800697a:	f7f9 fc39 	bl	80001f0 <memchr>
 800697e:	2800      	cmp	r0, #0
 8006980:	d038      	beq.n	80069f4 <_svfiprintf_r+0x1d8>
 8006982:	4b23      	ldr	r3, [pc, #140]	; (8006a10 <_svfiprintf_r+0x1f4>)
 8006984:	bb1b      	cbnz	r3, 80069ce <_svfiprintf_r+0x1b2>
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3307      	adds	r3, #7
 800698a:	f023 0307 	bic.w	r3, r3, #7
 800698e:	3308      	adds	r3, #8
 8006990:	9303      	str	r3, [sp, #12]
 8006992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006994:	4433      	add	r3, r6
 8006996:	9309      	str	r3, [sp, #36]	; 0x24
 8006998:	e767      	b.n	800686a <_svfiprintf_r+0x4e>
 800699a:	fb0c 3202 	mla	r2, ip, r2, r3
 800699e:	460c      	mov	r4, r1
 80069a0:	2001      	movs	r0, #1
 80069a2:	e7a5      	b.n	80068f0 <_svfiprintf_r+0xd4>
 80069a4:	2300      	movs	r3, #0
 80069a6:	3401      	adds	r4, #1
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	4619      	mov	r1, r3
 80069ac:	f04f 0c0a 	mov.w	ip, #10
 80069b0:	4620      	mov	r0, r4
 80069b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069b6:	3a30      	subs	r2, #48	; 0x30
 80069b8:	2a09      	cmp	r2, #9
 80069ba:	d903      	bls.n	80069c4 <_svfiprintf_r+0x1a8>
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0c5      	beq.n	800694c <_svfiprintf_r+0x130>
 80069c0:	9105      	str	r1, [sp, #20]
 80069c2:	e7c3      	b.n	800694c <_svfiprintf_r+0x130>
 80069c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069c8:	4604      	mov	r4, r0
 80069ca:	2301      	movs	r3, #1
 80069cc:	e7f0      	b.n	80069b0 <_svfiprintf_r+0x194>
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4b0f      	ldr	r3, [pc, #60]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069d6:	a904      	add	r1, sp, #16
 80069d8:	4638      	mov	r0, r7
 80069da:	f7fe f80d 	bl	80049f8 <_printf_float>
 80069de:	1c42      	adds	r2, r0, #1
 80069e0:	4606      	mov	r6, r0
 80069e2:	d1d6      	bne.n	8006992 <_svfiprintf_r+0x176>
 80069e4:	89ab      	ldrh	r3, [r5, #12]
 80069e6:	065b      	lsls	r3, r3, #25
 80069e8:	f53f af2c 	bmi.w	8006844 <_svfiprintf_r+0x28>
 80069ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ee:	b01d      	add	sp, #116	; 0x74
 80069f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f4:	ab03      	add	r3, sp, #12
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	462a      	mov	r2, r5
 80069fa:	4b06      	ldr	r3, [pc, #24]	; (8006a14 <_svfiprintf_r+0x1f8>)
 80069fc:	a904      	add	r1, sp, #16
 80069fe:	4638      	mov	r0, r7
 8006a00:	f7fe fa9e 	bl	8004f40 <_printf_i>
 8006a04:	e7eb      	b.n	80069de <_svfiprintf_r+0x1c2>
 8006a06:	bf00      	nop
 8006a08:	0800789c 	.word	0x0800789c
 8006a0c:	080078a6 	.word	0x080078a6
 8006a10:	080049f9 	.word	0x080049f9
 8006a14:	08006765 	.word	0x08006765
 8006a18:	080078a2 	.word	0x080078a2

08006a1c <_sbrk_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4d06      	ldr	r5, [pc, #24]	; (8006a38 <_sbrk_r+0x1c>)
 8006a20:	2300      	movs	r3, #0
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	602b      	str	r3, [r5, #0]
 8006a28:	f7fd fea2 	bl	8004770 <_sbrk>
 8006a2c:	1c43      	adds	r3, r0, #1
 8006a2e:	d102      	bne.n	8006a36 <_sbrk_r+0x1a>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	b103      	cbz	r3, 8006a36 <_sbrk_r+0x1a>
 8006a34:	6023      	str	r3, [r4, #0]
 8006a36:	bd38      	pop	{r3, r4, r5, pc}
 8006a38:	2000030c 	.word	0x2000030c

08006a3c <__assert_func>:
 8006a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461a      	mov	r2, r3
 8006a42:	4b09      	ldr	r3, [pc, #36]	; (8006a68 <__assert_func+0x2c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4605      	mov	r5, r0
 8006a48:	68d8      	ldr	r0, [r3, #12]
 8006a4a:	b14c      	cbz	r4, 8006a60 <__assert_func+0x24>
 8006a4c:	4b07      	ldr	r3, [pc, #28]	; (8006a6c <__assert_func+0x30>)
 8006a4e:	9100      	str	r1, [sp, #0]
 8006a50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006a54:	4906      	ldr	r1, [pc, #24]	; (8006a70 <__assert_func+0x34>)
 8006a56:	462b      	mov	r3, r5
 8006a58:	f000 f80e 	bl	8006a78 <fiprintf>
 8006a5c:	f000 faa4 	bl	8006fa8 <abort>
 8006a60:	4b04      	ldr	r3, [pc, #16]	; (8006a74 <__assert_func+0x38>)
 8006a62:	461c      	mov	r4, r3
 8006a64:	e7f3      	b.n	8006a4e <__assert_func+0x12>
 8006a66:	bf00      	nop
 8006a68:	2000000c 	.word	0x2000000c
 8006a6c:	080078ad 	.word	0x080078ad
 8006a70:	080078ba 	.word	0x080078ba
 8006a74:	080078e8 	.word	0x080078e8

08006a78 <fiprintf>:
 8006a78:	b40e      	push	{r1, r2, r3}
 8006a7a:	b503      	push	{r0, r1, lr}
 8006a7c:	4601      	mov	r1, r0
 8006a7e:	ab03      	add	r3, sp, #12
 8006a80:	4805      	ldr	r0, [pc, #20]	; (8006a98 <fiprintf+0x20>)
 8006a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a86:	6800      	ldr	r0, [r0, #0]
 8006a88:	9301      	str	r3, [sp, #4]
 8006a8a:	f000 f88f 	bl	8006bac <_vfiprintf_r>
 8006a8e:	b002      	add	sp, #8
 8006a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a94:	b003      	add	sp, #12
 8006a96:	4770      	bx	lr
 8006a98:	2000000c 	.word	0x2000000c

08006a9c <__ascii_mbtowc>:
 8006a9c:	b082      	sub	sp, #8
 8006a9e:	b901      	cbnz	r1, 8006aa2 <__ascii_mbtowc+0x6>
 8006aa0:	a901      	add	r1, sp, #4
 8006aa2:	b142      	cbz	r2, 8006ab6 <__ascii_mbtowc+0x1a>
 8006aa4:	b14b      	cbz	r3, 8006aba <__ascii_mbtowc+0x1e>
 8006aa6:	7813      	ldrb	r3, [r2, #0]
 8006aa8:	600b      	str	r3, [r1, #0]
 8006aaa:	7812      	ldrb	r2, [r2, #0]
 8006aac:	1e10      	subs	r0, r2, #0
 8006aae:	bf18      	it	ne
 8006ab0:	2001      	movne	r0, #1
 8006ab2:	b002      	add	sp, #8
 8006ab4:	4770      	bx	lr
 8006ab6:	4610      	mov	r0, r2
 8006ab8:	e7fb      	b.n	8006ab2 <__ascii_mbtowc+0x16>
 8006aba:	f06f 0001 	mvn.w	r0, #1
 8006abe:	e7f8      	b.n	8006ab2 <__ascii_mbtowc+0x16>

08006ac0 <memmove>:
 8006ac0:	4288      	cmp	r0, r1
 8006ac2:	b510      	push	{r4, lr}
 8006ac4:	eb01 0402 	add.w	r4, r1, r2
 8006ac8:	d902      	bls.n	8006ad0 <memmove+0x10>
 8006aca:	4284      	cmp	r4, r0
 8006acc:	4623      	mov	r3, r4
 8006ace:	d807      	bhi.n	8006ae0 <memmove+0x20>
 8006ad0:	1e43      	subs	r3, r0, #1
 8006ad2:	42a1      	cmp	r1, r4
 8006ad4:	d008      	beq.n	8006ae8 <memmove+0x28>
 8006ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ada:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ade:	e7f8      	b.n	8006ad2 <memmove+0x12>
 8006ae0:	4402      	add	r2, r0
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	428a      	cmp	r2, r1
 8006ae6:	d100      	bne.n	8006aea <memmove+0x2a>
 8006ae8:	bd10      	pop	{r4, pc}
 8006aea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006aee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006af2:	e7f7      	b.n	8006ae4 <memmove+0x24>

08006af4 <__malloc_lock>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__malloc_lock+0x8>)
 8006af6:	f000 bc17 	b.w	8007328 <__retarget_lock_acquire_recursive>
 8006afa:	bf00      	nop
 8006afc:	20000314 	.word	0x20000314

08006b00 <__malloc_unlock>:
 8006b00:	4801      	ldr	r0, [pc, #4]	; (8006b08 <__malloc_unlock+0x8>)
 8006b02:	f000 bc12 	b.w	800732a <__retarget_lock_release_recursive>
 8006b06:	bf00      	nop
 8006b08:	20000314 	.word	0x20000314

08006b0c <_realloc_r>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	4607      	mov	r7, r0
 8006b10:	4614      	mov	r4, r2
 8006b12:	460e      	mov	r6, r1
 8006b14:	b921      	cbnz	r1, 8006b20 <_realloc_r+0x14>
 8006b16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	f7ff bdc8 	b.w	80066b0 <_malloc_r>
 8006b20:	b922      	cbnz	r2, 8006b2c <_realloc_r+0x20>
 8006b22:	f7ff fd75 	bl	8006610 <_free_r>
 8006b26:	4625      	mov	r5, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b2c:	f000 fc62 	bl	80073f4 <_malloc_usable_size_r>
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d20f      	bcs.n	8006b54 <_realloc_r+0x48>
 8006b34:	4621      	mov	r1, r4
 8006b36:	4638      	mov	r0, r7
 8006b38:	f7ff fdba 	bl	80066b0 <_malloc_r>
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	2800      	cmp	r0, #0
 8006b40:	d0f2      	beq.n	8006b28 <_realloc_r+0x1c>
 8006b42:	4631      	mov	r1, r6
 8006b44:	4622      	mov	r2, r4
 8006b46:	f7ff f9c7 	bl	8005ed8 <memcpy>
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	f7ff fd5f 	bl	8006610 <_free_r>
 8006b52:	e7e9      	b.n	8006b28 <_realloc_r+0x1c>
 8006b54:	4635      	mov	r5, r6
 8006b56:	e7e7      	b.n	8006b28 <_realloc_r+0x1c>

08006b58 <__sfputc_r>:
 8006b58:	6893      	ldr	r3, [r2, #8]
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	b410      	push	{r4}
 8006b60:	6093      	str	r3, [r2, #8]
 8006b62:	da08      	bge.n	8006b76 <__sfputc_r+0x1e>
 8006b64:	6994      	ldr	r4, [r2, #24]
 8006b66:	42a3      	cmp	r3, r4
 8006b68:	db01      	blt.n	8006b6e <__sfputc_r+0x16>
 8006b6a:	290a      	cmp	r1, #10
 8006b6c:	d103      	bne.n	8006b76 <__sfputc_r+0x1e>
 8006b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b72:	f000 b94b 	b.w	8006e0c <__swbuf_r>
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	1c58      	adds	r0, r3, #1
 8006b7a:	6010      	str	r0, [r2, #0]
 8006b7c:	7019      	strb	r1, [r3, #0]
 8006b7e:	4608      	mov	r0, r1
 8006b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <__sfputs_r>:
 8006b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b88:	4606      	mov	r6, r0
 8006b8a:	460f      	mov	r7, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	18d5      	adds	r5, r2, r3
 8006b90:	42ac      	cmp	r4, r5
 8006b92:	d101      	bne.n	8006b98 <__sfputs_r+0x12>
 8006b94:	2000      	movs	r0, #0
 8006b96:	e007      	b.n	8006ba8 <__sfputs_r+0x22>
 8006b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b9c:	463a      	mov	r2, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	f7ff ffda 	bl	8006b58 <__sfputc_r>
 8006ba4:	1c43      	adds	r3, r0, #1
 8006ba6:	d1f3      	bne.n	8006b90 <__sfputs_r+0xa>
 8006ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bac <_vfiprintf_r>:
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	460d      	mov	r5, r1
 8006bb2:	b09d      	sub	sp, #116	; 0x74
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	4698      	mov	r8, r3
 8006bb8:	4606      	mov	r6, r0
 8006bba:	b118      	cbz	r0, 8006bc4 <_vfiprintf_r+0x18>
 8006bbc:	6983      	ldr	r3, [r0, #24]
 8006bbe:	b90b      	cbnz	r3, 8006bc4 <_vfiprintf_r+0x18>
 8006bc0:	f000 fb14 	bl	80071ec <__sinit>
 8006bc4:	4b89      	ldr	r3, [pc, #548]	; (8006dec <_vfiprintf_r+0x240>)
 8006bc6:	429d      	cmp	r5, r3
 8006bc8:	d11b      	bne.n	8006c02 <_vfiprintf_r+0x56>
 8006bca:	6875      	ldr	r5, [r6, #4]
 8006bcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bce:	07d9      	lsls	r1, r3, #31
 8006bd0:	d405      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd2:	89ab      	ldrh	r3, [r5, #12]
 8006bd4:	059a      	lsls	r2, r3, #22
 8006bd6:	d402      	bmi.n	8006bde <_vfiprintf_r+0x32>
 8006bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bda:	f000 fba5 	bl	8007328 <__retarget_lock_acquire_recursive>
 8006bde:	89ab      	ldrh	r3, [r5, #12]
 8006be0:	071b      	lsls	r3, r3, #28
 8006be2:	d501      	bpl.n	8006be8 <_vfiprintf_r+0x3c>
 8006be4:	692b      	ldr	r3, [r5, #16]
 8006be6:	b9eb      	cbnz	r3, 8006c24 <_vfiprintf_r+0x78>
 8006be8:	4629      	mov	r1, r5
 8006bea:	4630      	mov	r0, r6
 8006bec:	f000 f96e 	bl	8006ecc <__swsetup_r>
 8006bf0:	b1c0      	cbz	r0, 8006c24 <_vfiprintf_r+0x78>
 8006bf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bf4:	07dc      	lsls	r4, r3, #31
 8006bf6:	d50e      	bpl.n	8006c16 <_vfiprintf_r+0x6a>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bfc:	b01d      	add	sp, #116	; 0x74
 8006bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c02:	4b7b      	ldr	r3, [pc, #492]	; (8006df0 <_vfiprintf_r+0x244>)
 8006c04:	429d      	cmp	r5, r3
 8006c06:	d101      	bne.n	8006c0c <_vfiprintf_r+0x60>
 8006c08:	68b5      	ldr	r5, [r6, #8]
 8006c0a:	e7df      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c0c:	4b79      	ldr	r3, [pc, #484]	; (8006df4 <_vfiprintf_r+0x248>)
 8006c0e:	429d      	cmp	r5, r3
 8006c10:	bf08      	it	eq
 8006c12:	68f5      	ldreq	r5, [r6, #12]
 8006c14:	e7da      	b.n	8006bcc <_vfiprintf_r+0x20>
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	0598      	lsls	r0, r3, #22
 8006c1a:	d4ed      	bmi.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c1e:	f000 fb84 	bl	800732a <__retarget_lock_release_recursive>
 8006c22:	e7e9      	b.n	8006bf8 <_vfiprintf_r+0x4c>
 8006c24:	2300      	movs	r3, #0
 8006c26:	9309      	str	r3, [sp, #36]	; 0x24
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c32:	2330      	movs	r3, #48	; 0x30
 8006c34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006df8 <_vfiprintf_r+0x24c>
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c3c:	f04f 0901 	mov.w	r9, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	469a      	mov	sl, r3
 8006c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c48:	b10a      	cbz	r2, 8006c4e <_vfiprintf_r+0xa2>
 8006c4a:	2a25      	cmp	r2, #37	; 0x25
 8006c4c:	d1f9      	bne.n	8006c42 <_vfiprintf_r+0x96>
 8006c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c52:	d00b      	beq.n	8006c6c <_vfiprintf_r+0xc0>
 8006c54:	465b      	mov	r3, fp
 8006c56:	4622      	mov	r2, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ff93 	bl	8006b86 <__sfputs_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f000 80aa 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c68:	445a      	add	r2, fp
 8006c6a:	9209      	str	r2, [sp, #36]	; 0x24
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 80a2 	beq.w	8006dba <_vfiprintf_r+0x20e>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	; 0x68
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2205      	movs	r2, #5
 8006c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c96:	4858      	ldr	r0, [pc, #352]	; (8006df8 <_vfiprintf_r+0x24c>)
 8006c98:	f7f9 faaa 	bl	80001f0 <memchr>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	b9d8      	cbnz	r0, 8006cd8 <_vfiprintf_r+0x12c>
 8006ca0:	06d1      	lsls	r1, r2, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2320      	movmi	r3, #32
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006caa:	0713      	lsls	r3, r2, #28
 8006cac:	bf44      	itt	mi
 8006cae:	232b      	movmi	r3, #43	; 0x2b
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006cba:	d015      	beq.n	8006ce8 <_vfiprintf_r+0x13c>
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ccc:	3b30      	subs	r3, #48	; 0x30
 8006cce:	2b09      	cmp	r3, #9
 8006cd0:	d94e      	bls.n	8006d70 <_vfiprintf_r+0x1c4>
 8006cd2:	b1b0      	cbz	r0, 8006d02 <_vfiprintf_r+0x156>
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e014      	b.n	8006d02 <_vfiprintf_r+0x156>
 8006cd8:	eba0 0308 	sub.w	r3, r0, r8
 8006cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	46a2      	mov	sl, r4
 8006ce6:	e7d2      	b.n	8006c8e <_vfiprintf_r+0xe2>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfbb      	ittet	lt
 8006cf4:	425b      	neglt	r3, r3
 8006cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfa:	9307      	strge	r3, [sp, #28]
 8006cfc:	9307      	strlt	r3, [sp, #28]
 8006cfe:	bfb8      	it	lt
 8006d00:	9204      	strlt	r2, [sp, #16]
 8006d02:	7823      	ldrb	r3, [r4, #0]
 8006d04:	2b2e      	cmp	r3, #46	; 0x2e
 8006d06:	d10c      	bne.n	8006d22 <_vfiprintf_r+0x176>
 8006d08:	7863      	ldrb	r3, [r4, #1]
 8006d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d0c:	d135      	bne.n	8006d7a <_vfiprintf_r+0x1ce>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	bfb8      	it	lt
 8006d1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d1e:	3402      	adds	r4, #2
 8006d20:	9305      	str	r3, [sp, #20]
 8006d22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006e08 <_vfiprintf_r+0x25c>
 8006d26:	7821      	ldrb	r1, [r4, #0]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	4650      	mov	r0, sl
 8006d2c:	f7f9 fa60 	bl	80001f0 <memchr>
 8006d30:	b140      	cbz	r0, 8006d44 <_vfiprintf_r+0x198>
 8006d32:	2340      	movs	r3, #64	; 0x40
 8006d34:	eba0 000a 	sub.w	r0, r0, sl
 8006d38:	fa03 f000 	lsl.w	r0, r3, r0
 8006d3c:	9b04      	ldr	r3, [sp, #16]
 8006d3e:	4303      	orrs	r3, r0
 8006d40:	3401      	adds	r4, #1
 8006d42:	9304      	str	r3, [sp, #16]
 8006d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d48:	482c      	ldr	r0, [pc, #176]	; (8006dfc <_vfiprintf_r+0x250>)
 8006d4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d4e:	2206      	movs	r2, #6
 8006d50:	f7f9 fa4e 	bl	80001f0 <memchr>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	d03f      	beq.n	8006dd8 <_vfiprintf_r+0x22c>
 8006d58:	4b29      	ldr	r3, [pc, #164]	; (8006e00 <_vfiprintf_r+0x254>)
 8006d5a:	bb1b      	cbnz	r3, 8006da4 <_vfiprintf_r+0x1f8>
 8006d5c:	9b03      	ldr	r3, [sp, #12]
 8006d5e:	3307      	adds	r3, #7
 8006d60:	f023 0307 	bic.w	r3, r3, #7
 8006d64:	3308      	adds	r3, #8
 8006d66:	9303      	str	r3, [sp, #12]
 8006d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d6a:	443b      	add	r3, r7
 8006d6c:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6e:	e767      	b.n	8006c40 <_vfiprintf_r+0x94>
 8006d70:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d74:	460c      	mov	r4, r1
 8006d76:	2001      	movs	r0, #1
 8006d78:	e7a5      	b.n	8006cc6 <_vfiprintf_r+0x11a>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	3401      	adds	r4, #1
 8006d7e:	9305      	str	r3, [sp, #20]
 8006d80:	4619      	mov	r1, r3
 8006d82:	f04f 0c0a 	mov.w	ip, #10
 8006d86:	4620      	mov	r0, r4
 8006d88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d8c:	3a30      	subs	r2, #48	; 0x30
 8006d8e:	2a09      	cmp	r2, #9
 8006d90:	d903      	bls.n	8006d9a <_vfiprintf_r+0x1ee>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d0c5      	beq.n	8006d22 <_vfiprintf_r+0x176>
 8006d96:	9105      	str	r1, [sp, #20]
 8006d98:	e7c3      	b.n	8006d22 <_vfiprintf_r+0x176>
 8006d9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d9e:	4604      	mov	r4, r0
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f0      	b.n	8006d86 <_vfiprintf_r+0x1da>
 8006da4:	ab03      	add	r3, sp, #12
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	462a      	mov	r2, r5
 8006daa:	4b16      	ldr	r3, [pc, #88]	; (8006e04 <_vfiprintf_r+0x258>)
 8006dac:	a904      	add	r1, sp, #16
 8006dae:	4630      	mov	r0, r6
 8006db0:	f7fd fe22 	bl	80049f8 <_printf_float>
 8006db4:	4607      	mov	r7, r0
 8006db6:	1c78      	adds	r0, r7, #1
 8006db8:	d1d6      	bne.n	8006d68 <_vfiprintf_r+0x1bc>
 8006dba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006dbc:	07d9      	lsls	r1, r3, #31
 8006dbe:	d405      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc0:	89ab      	ldrh	r3, [r5, #12]
 8006dc2:	059a      	lsls	r2, r3, #22
 8006dc4:	d402      	bmi.n	8006dcc <_vfiprintf_r+0x220>
 8006dc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dc8:	f000 faaf 	bl	800732a <__retarget_lock_release_recursive>
 8006dcc:	89ab      	ldrh	r3, [r5, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af12 	bmi.w	8006bf8 <_vfiprintf_r+0x4c>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	e711      	b.n	8006bfc <_vfiprintf_r+0x50>
 8006dd8:	ab03      	add	r3, sp, #12
 8006dda:	9300      	str	r3, [sp, #0]
 8006ddc:	462a      	mov	r2, r5
 8006dde:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <_vfiprintf_r+0x258>)
 8006de0:	a904      	add	r1, sp, #16
 8006de2:	4630      	mov	r0, r6
 8006de4:	f7fe f8ac 	bl	8004f40 <_printf_i>
 8006de8:	e7e4      	b.n	8006db4 <_vfiprintf_r+0x208>
 8006dea:	bf00      	nop
 8006dec:	08007a14 	.word	0x08007a14
 8006df0:	08007a34 	.word	0x08007a34
 8006df4:	080079f4 	.word	0x080079f4
 8006df8:	0800789c 	.word	0x0800789c
 8006dfc:	080078a6 	.word	0x080078a6
 8006e00:	080049f9 	.word	0x080049f9
 8006e04:	08006b87 	.word	0x08006b87
 8006e08:	080078a2 	.word	0x080078a2

08006e0c <__swbuf_r>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	460e      	mov	r6, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	4605      	mov	r5, r0
 8006e14:	b118      	cbz	r0, 8006e1e <__swbuf_r+0x12>
 8006e16:	6983      	ldr	r3, [r0, #24]
 8006e18:	b90b      	cbnz	r3, 8006e1e <__swbuf_r+0x12>
 8006e1a:	f000 f9e7 	bl	80071ec <__sinit>
 8006e1e:	4b21      	ldr	r3, [pc, #132]	; (8006ea4 <__swbuf_r+0x98>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d12b      	bne.n	8006e7c <__swbuf_r+0x70>
 8006e24:	686c      	ldr	r4, [r5, #4]
 8006e26:	69a3      	ldr	r3, [r4, #24]
 8006e28:	60a3      	str	r3, [r4, #8]
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	071a      	lsls	r2, r3, #28
 8006e2e:	d52f      	bpl.n	8006e90 <__swbuf_r+0x84>
 8006e30:	6923      	ldr	r3, [r4, #16]
 8006e32:	b36b      	cbz	r3, 8006e90 <__swbuf_r+0x84>
 8006e34:	6923      	ldr	r3, [r4, #16]
 8006e36:	6820      	ldr	r0, [r4, #0]
 8006e38:	1ac0      	subs	r0, r0, r3
 8006e3a:	6963      	ldr	r3, [r4, #20]
 8006e3c:	b2f6      	uxtb	r6, r6
 8006e3e:	4283      	cmp	r3, r0
 8006e40:	4637      	mov	r7, r6
 8006e42:	dc04      	bgt.n	8006e4e <__swbuf_r+0x42>
 8006e44:	4621      	mov	r1, r4
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 f93c 	bl	80070c4 <_fflush_r>
 8006e4c:	bb30      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	3b01      	subs	r3, #1
 8006e52:	60a3      	str	r3, [r4, #8]
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	6022      	str	r2, [r4, #0]
 8006e5a:	701e      	strb	r6, [r3, #0]
 8006e5c:	6963      	ldr	r3, [r4, #20]
 8006e5e:	3001      	adds	r0, #1
 8006e60:	4283      	cmp	r3, r0
 8006e62:	d004      	beq.n	8006e6e <__swbuf_r+0x62>
 8006e64:	89a3      	ldrh	r3, [r4, #12]
 8006e66:	07db      	lsls	r3, r3, #31
 8006e68:	d506      	bpl.n	8006e78 <__swbuf_r+0x6c>
 8006e6a:	2e0a      	cmp	r6, #10
 8006e6c:	d104      	bne.n	8006e78 <__swbuf_r+0x6c>
 8006e6e:	4621      	mov	r1, r4
 8006e70:	4628      	mov	r0, r5
 8006e72:	f000 f927 	bl	80070c4 <_fflush_r>
 8006e76:	b988      	cbnz	r0, 8006e9c <__swbuf_r+0x90>
 8006e78:	4638      	mov	r0, r7
 8006e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <__swbuf_r+0x9c>)
 8006e7e:	429c      	cmp	r4, r3
 8006e80:	d101      	bne.n	8006e86 <__swbuf_r+0x7a>
 8006e82:	68ac      	ldr	r4, [r5, #8]
 8006e84:	e7cf      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e86:	4b09      	ldr	r3, [pc, #36]	; (8006eac <__swbuf_r+0xa0>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	bf08      	it	eq
 8006e8c:	68ec      	ldreq	r4, [r5, #12]
 8006e8e:	e7ca      	b.n	8006e26 <__swbuf_r+0x1a>
 8006e90:	4621      	mov	r1, r4
 8006e92:	4628      	mov	r0, r5
 8006e94:	f000 f81a 	bl	8006ecc <__swsetup_r>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d0cb      	beq.n	8006e34 <__swbuf_r+0x28>
 8006e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006ea0:	e7ea      	b.n	8006e78 <__swbuf_r+0x6c>
 8006ea2:	bf00      	nop
 8006ea4:	08007a14 	.word	0x08007a14
 8006ea8:	08007a34 	.word	0x08007a34
 8006eac:	080079f4 	.word	0x080079f4

08006eb0 <__ascii_wctomb>:
 8006eb0:	b149      	cbz	r1, 8006ec6 <__ascii_wctomb+0x16>
 8006eb2:	2aff      	cmp	r2, #255	; 0xff
 8006eb4:	bf85      	ittet	hi
 8006eb6:	238a      	movhi	r3, #138	; 0x8a
 8006eb8:	6003      	strhi	r3, [r0, #0]
 8006eba:	700a      	strbls	r2, [r1, #0]
 8006ebc:	f04f 30ff 	movhi.w	r0, #4294967295
 8006ec0:	bf98      	it	ls
 8006ec2:	2001      	movls	r0, #1
 8006ec4:	4770      	bx	lr
 8006ec6:	4608      	mov	r0, r1
 8006ec8:	4770      	bx	lr
	...

08006ecc <__swsetup_r>:
 8006ecc:	4b32      	ldr	r3, [pc, #200]	; (8006f98 <__swsetup_r+0xcc>)
 8006ece:	b570      	push	{r4, r5, r6, lr}
 8006ed0:	681d      	ldr	r5, [r3, #0]
 8006ed2:	4606      	mov	r6, r0
 8006ed4:	460c      	mov	r4, r1
 8006ed6:	b125      	cbz	r5, 8006ee2 <__swsetup_r+0x16>
 8006ed8:	69ab      	ldr	r3, [r5, #24]
 8006eda:	b913      	cbnz	r3, 8006ee2 <__swsetup_r+0x16>
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f985 	bl	80071ec <__sinit>
 8006ee2:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <__swsetup_r+0xd0>)
 8006ee4:	429c      	cmp	r4, r3
 8006ee6:	d10f      	bne.n	8006f08 <__swsetup_r+0x3c>
 8006ee8:	686c      	ldr	r4, [r5, #4]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ef0:	0719      	lsls	r1, r3, #28
 8006ef2:	d42c      	bmi.n	8006f4e <__swsetup_r+0x82>
 8006ef4:	06dd      	lsls	r5, r3, #27
 8006ef6:	d411      	bmi.n	8006f1c <__swsetup_r+0x50>
 8006ef8:	2309      	movs	r3, #9
 8006efa:	6033      	str	r3, [r6, #0]
 8006efc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f00:	81a3      	strh	r3, [r4, #12]
 8006f02:	f04f 30ff 	mov.w	r0, #4294967295
 8006f06:	e03e      	b.n	8006f86 <__swsetup_r+0xba>
 8006f08:	4b25      	ldr	r3, [pc, #148]	; (8006fa0 <__swsetup_r+0xd4>)
 8006f0a:	429c      	cmp	r4, r3
 8006f0c:	d101      	bne.n	8006f12 <__swsetup_r+0x46>
 8006f0e:	68ac      	ldr	r4, [r5, #8]
 8006f10:	e7eb      	b.n	8006eea <__swsetup_r+0x1e>
 8006f12:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <__swsetup_r+0xd8>)
 8006f14:	429c      	cmp	r4, r3
 8006f16:	bf08      	it	eq
 8006f18:	68ec      	ldreq	r4, [r5, #12]
 8006f1a:	e7e6      	b.n	8006eea <__swsetup_r+0x1e>
 8006f1c:	0758      	lsls	r0, r3, #29
 8006f1e:	d512      	bpl.n	8006f46 <__swsetup_r+0x7a>
 8006f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f22:	b141      	cbz	r1, 8006f36 <__swsetup_r+0x6a>
 8006f24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f28:	4299      	cmp	r1, r3
 8006f2a:	d002      	beq.n	8006f32 <__swsetup_r+0x66>
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	f7ff fb6f 	bl	8006610 <_free_r>
 8006f32:	2300      	movs	r3, #0
 8006f34:	6363      	str	r3, [r4, #52]	; 0x34
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006f3c:	81a3      	strh	r3, [r4, #12]
 8006f3e:	2300      	movs	r3, #0
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	6923      	ldr	r3, [r4, #16]
 8006f44:	6023      	str	r3, [r4, #0]
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	f043 0308 	orr.w	r3, r3, #8
 8006f4c:	81a3      	strh	r3, [r4, #12]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	b94b      	cbnz	r3, 8006f66 <__swsetup_r+0x9a>
 8006f52:	89a3      	ldrh	r3, [r4, #12]
 8006f54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f5c:	d003      	beq.n	8006f66 <__swsetup_r+0x9a>
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4630      	mov	r0, r6
 8006f62:	f000 fa07 	bl	8007374 <__smakebuf_r>
 8006f66:	89a0      	ldrh	r0, [r4, #12]
 8006f68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f6c:	f010 0301 	ands.w	r3, r0, #1
 8006f70:	d00a      	beq.n	8006f88 <__swsetup_r+0xbc>
 8006f72:	2300      	movs	r3, #0
 8006f74:	60a3      	str	r3, [r4, #8]
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	425b      	negs	r3, r3
 8006f7a:	61a3      	str	r3, [r4, #24]
 8006f7c:	6923      	ldr	r3, [r4, #16]
 8006f7e:	b943      	cbnz	r3, 8006f92 <__swsetup_r+0xc6>
 8006f80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f84:	d1ba      	bne.n	8006efc <__swsetup_r+0x30>
 8006f86:	bd70      	pop	{r4, r5, r6, pc}
 8006f88:	0781      	lsls	r1, r0, #30
 8006f8a:	bf58      	it	pl
 8006f8c:	6963      	ldrpl	r3, [r4, #20]
 8006f8e:	60a3      	str	r3, [r4, #8]
 8006f90:	e7f4      	b.n	8006f7c <__swsetup_r+0xb0>
 8006f92:	2000      	movs	r0, #0
 8006f94:	e7f7      	b.n	8006f86 <__swsetup_r+0xba>
 8006f96:	bf00      	nop
 8006f98:	2000000c 	.word	0x2000000c
 8006f9c:	08007a14 	.word	0x08007a14
 8006fa0:	08007a34 	.word	0x08007a34
 8006fa4:	080079f4 	.word	0x080079f4

08006fa8 <abort>:
 8006fa8:	b508      	push	{r3, lr}
 8006faa:	2006      	movs	r0, #6
 8006fac:	f000 fa52 	bl	8007454 <raise>
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fd fb65 	bl	8004680 <_exit>
	...

08006fb8 <__sflush_r>:
 8006fb8:	898a      	ldrh	r2, [r1, #12]
 8006fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	0710      	lsls	r0, r2, #28
 8006fc2:	460c      	mov	r4, r1
 8006fc4:	d458      	bmi.n	8007078 <__sflush_r+0xc0>
 8006fc6:	684b      	ldr	r3, [r1, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	dc05      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	dc02      	bgt.n	8006fd8 <__sflush_r+0x20>
 8006fd2:	2000      	movs	r0, #0
 8006fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fda:	2e00      	cmp	r6, #0
 8006fdc:	d0f9      	beq.n	8006fd2 <__sflush_r+0x1a>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006fe4:	682f      	ldr	r7, [r5, #0]
 8006fe6:	602b      	str	r3, [r5, #0]
 8006fe8:	d032      	beq.n	8007050 <__sflush_r+0x98>
 8006fea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	075a      	lsls	r2, r3, #29
 8006ff0:	d505      	bpl.n	8006ffe <__sflush_r+0x46>
 8006ff2:	6863      	ldr	r3, [r4, #4]
 8006ff4:	1ac0      	subs	r0, r0, r3
 8006ff6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ff8:	b10b      	cbz	r3, 8006ffe <__sflush_r+0x46>
 8006ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ffc:	1ac0      	subs	r0, r0, r3
 8006ffe:	2300      	movs	r3, #0
 8007000:	4602      	mov	r2, r0
 8007002:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007004:	6a21      	ldr	r1, [r4, #32]
 8007006:	4628      	mov	r0, r5
 8007008:	47b0      	blx	r6
 800700a:	1c43      	adds	r3, r0, #1
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	d106      	bne.n	800701e <__sflush_r+0x66>
 8007010:	6829      	ldr	r1, [r5, #0]
 8007012:	291d      	cmp	r1, #29
 8007014:	d82c      	bhi.n	8007070 <__sflush_r+0xb8>
 8007016:	4a2a      	ldr	r2, [pc, #168]	; (80070c0 <__sflush_r+0x108>)
 8007018:	40ca      	lsrs	r2, r1
 800701a:	07d6      	lsls	r6, r2, #31
 800701c:	d528      	bpl.n	8007070 <__sflush_r+0xb8>
 800701e:	2200      	movs	r2, #0
 8007020:	6062      	str	r2, [r4, #4]
 8007022:	04d9      	lsls	r1, r3, #19
 8007024:	6922      	ldr	r2, [r4, #16]
 8007026:	6022      	str	r2, [r4, #0]
 8007028:	d504      	bpl.n	8007034 <__sflush_r+0x7c>
 800702a:	1c42      	adds	r2, r0, #1
 800702c:	d101      	bne.n	8007032 <__sflush_r+0x7a>
 800702e:	682b      	ldr	r3, [r5, #0]
 8007030:	b903      	cbnz	r3, 8007034 <__sflush_r+0x7c>
 8007032:	6560      	str	r0, [r4, #84]	; 0x54
 8007034:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007036:	602f      	str	r7, [r5, #0]
 8007038:	2900      	cmp	r1, #0
 800703a:	d0ca      	beq.n	8006fd2 <__sflush_r+0x1a>
 800703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007040:	4299      	cmp	r1, r3
 8007042:	d002      	beq.n	800704a <__sflush_r+0x92>
 8007044:	4628      	mov	r0, r5
 8007046:	f7ff fae3 	bl	8006610 <_free_r>
 800704a:	2000      	movs	r0, #0
 800704c:	6360      	str	r0, [r4, #52]	; 0x34
 800704e:	e7c1      	b.n	8006fd4 <__sflush_r+0x1c>
 8007050:	6a21      	ldr	r1, [r4, #32]
 8007052:	2301      	movs	r3, #1
 8007054:	4628      	mov	r0, r5
 8007056:	47b0      	blx	r6
 8007058:	1c41      	adds	r1, r0, #1
 800705a:	d1c7      	bne.n	8006fec <__sflush_r+0x34>
 800705c:	682b      	ldr	r3, [r5, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d0c4      	beq.n	8006fec <__sflush_r+0x34>
 8007062:	2b1d      	cmp	r3, #29
 8007064:	d001      	beq.n	800706a <__sflush_r+0xb2>
 8007066:	2b16      	cmp	r3, #22
 8007068:	d101      	bne.n	800706e <__sflush_r+0xb6>
 800706a:	602f      	str	r7, [r5, #0]
 800706c:	e7b1      	b.n	8006fd2 <__sflush_r+0x1a>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007074:	81a3      	strh	r3, [r4, #12]
 8007076:	e7ad      	b.n	8006fd4 <__sflush_r+0x1c>
 8007078:	690f      	ldr	r7, [r1, #16]
 800707a:	2f00      	cmp	r7, #0
 800707c:	d0a9      	beq.n	8006fd2 <__sflush_r+0x1a>
 800707e:	0793      	lsls	r3, r2, #30
 8007080:	680e      	ldr	r6, [r1, #0]
 8007082:	bf08      	it	eq
 8007084:	694b      	ldreq	r3, [r1, #20]
 8007086:	600f      	str	r7, [r1, #0]
 8007088:	bf18      	it	ne
 800708a:	2300      	movne	r3, #0
 800708c:	eba6 0807 	sub.w	r8, r6, r7
 8007090:	608b      	str	r3, [r1, #8]
 8007092:	f1b8 0f00 	cmp.w	r8, #0
 8007096:	dd9c      	ble.n	8006fd2 <__sflush_r+0x1a>
 8007098:	6a21      	ldr	r1, [r4, #32]
 800709a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800709c:	4643      	mov	r3, r8
 800709e:	463a      	mov	r2, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	47b0      	blx	r6
 80070a4:	2800      	cmp	r0, #0
 80070a6:	dc06      	bgt.n	80070b6 <__sflush_r+0xfe>
 80070a8:	89a3      	ldrh	r3, [r4, #12]
 80070aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070ae:	81a3      	strh	r3, [r4, #12]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e78e      	b.n	8006fd4 <__sflush_r+0x1c>
 80070b6:	4407      	add	r7, r0
 80070b8:	eba8 0800 	sub.w	r8, r8, r0
 80070bc:	e7e9      	b.n	8007092 <__sflush_r+0xda>
 80070be:	bf00      	nop
 80070c0:	20400001 	.word	0x20400001

080070c4 <_fflush_r>:
 80070c4:	b538      	push	{r3, r4, r5, lr}
 80070c6:	690b      	ldr	r3, [r1, #16]
 80070c8:	4605      	mov	r5, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	b913      	cbnz	r3, 80070d4 <_fflush_r+0x10>
 80070ce:	2500      	movs	r5, #0
 80070d0:	4628      	mov	r0, r5
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	b118      	cbz	r0, 80070de <_fflush_r+0x1a>
 80070d6:	6983      	ldr	r3, [r0, #24]
 80070d8:	b90b      	cbnz	r3, 80070de <_fflush_r+0x1a>
 80070da:	f000 f887 	bl	80071ec <__sinit>
 80070de:	4b14      	ldr	r3, [pc, #80]	; (8007130 <_fflush_r+0x6c>)
 80070e0:	429c      	cmp	r4, r3
 80070e2:	d11b      	bne.n	800711c <_fflush_r+0x58>
 80070e4:	686c      	ldr	r4, [r5, #4]
 80070e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0ef      	beq.n	80070ce <_fflush_r+0xa>
 80070ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070f0:	07d0      	lsls	r0, r2, #31
 80070f2:	d404      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f4:	0599      	lsls	r1, r3, #22
 80070f6:	d402      	bmi.n	80070fe <_fflush_r+0x3a>
 80070f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070fa:	f000 f915 	bl	8007328 <__retarget_lock_acquire_recursive>
 80070fe:	4628      	mov	r0, r5
 8007100:	4621      	mov	r1, r4
 8007102:	f7ff ff59 	bl	8006fb8 <__sflush_r>
 8007106:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007108:	07da      	lsls	r2, r3, #31
 800710a:	4605      	mov	r5, r0
 800710c:	d4e0      	bmi.n	80070d0 <_fflush_r+0xc>
 800710e:	89a3      	ldrh	r3, [r4, #12]
 8007110:	059b      	lsls	r3, r3, #22
 8007112:	d4dd      	bmi.n	80070d0 <_fflush_r+0xc>
 8007114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007116:	f000 f908 	bl	800732a <__retarget_lock_release_recursive>
 800711a:	e7d9      	b.n	80070d0 <_fflush_r+0xc>
 800711c:	4b05      	ldr	r3, [pc, #20]	; (8007134 <_fflush_r+0x70>)
 800711e:	429c      	cmp	r4, r3
 8007120:	d101      	bne.n	8007126 <_fflush_r+0x62>
 8007122:	68ac      	ldr	r4, [r5, #8]
 8007124:	e7df      	b.n	80070e6 <_fflush_r+0x22>
 8007126:	4b04      	ldr	r3, [pc, #16]	; (8007138 <_fflush_r+0x74>)
 8007128:	429c      	cmp	r4, r3
 800712a:	bf08      	it	eq
 800712c:	68ec      	ldreq	r4, [r5, #12]
 800712e:	e7da      	b.n	80070e6 <_fflush_r+0x22>
 8007130:	08007a14 	.word	0x08007a14
 8007134:	08007a34 	.word	0x08007a34
 8007138:	080079f4 	.word	0x080079f4

0800713c <std>:
 800713c:	2300      	movs	r3, #0
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	e9c0 3300 	strd	r3, r3, [r0]
 8007146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714a:	6083      	str	r3, [r0, #8]
 800714c:	8181      	strh	r1, [r0, #12]
 800714e:	6643      	str	r3, [r0, #100]	; 0x64
 8007150:	81c2      	strh	r2, [r0, #14]
 8007152:	6183      	str	r3, [r0, #24]
 8007154:	4619      	mov	r1, r3
 8007156:	2208      	movs	r2, #8
 8007158:	305c      	adds	r0, #92	; 0x5c
 800715a:	f7fd fba5 	bl	80048a8 <memset>
 800715e:	4b05      	ldr	r3, [pc, #20]	; (8007174 <std+0x38>)
 8007160:	6263      	str	r3, [r4, #36]	; 0x24
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <std+0x3c>)
 8007164:	62a3      	str	r3, [r4, #40]	; 0x28
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <std+0x40>)
 8007168:	62e3      	str	r3, [r4, #44]	; 0x2c
 800716a:	4b05      	ldr	r3, [pc, #20]	; (8007180 <std+0x44>)
 800716c:	6224      	str	r4, [r4, #32]
 800716e:	6323      	str	r3, [r4, #48]	; 0x30
 8007170:	bd10      	pop	{r4, pc}
 8007172:	bf00      	nop
 8007174:	0800748d 	.word	0x0800748d
 8007178:	080074af 	.word	0x080074af
 800717c:	080074e7 	.word	0x080074e7
 8007180:	0800750b 	.word	0x0800750b

08007184 <_cleanup_r>:
 8007184:	4901      	ldr	r1, [pc, #4]	; (800718c <_cleanup_r+0x8>)
 8007186:	f000 b8af 	b.w	80072e8 <_fwalk_reent>
 800718a:	bf00      	nop
 800718c:	080070c5 	.word	0x080070c5

08007190 <__sfmoreglue>:
 8007190:	b570      	push	{r4, r5, r6, lr}
 8007192:	1e4a      	subs	r2, r1, #1
 8007194:	2568      	movs	r5, #104	; 0x68
 8007196:	4355      	muls	r5, r2
 8007198:	460e      	mov	r6, r1
 800719a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800719e:	f7ff fa87 	bl	80066b0 <_malloc_r>
 80071a2:	4604      	mov	r4, r0
 80071a4:	b140      	cbz	r0, 80071b8 <__sfmoreglue+0x28>
 80071a6:	2100      	movs	r1, #0
 80071a8:	e9c0 1600 	strd	r1, r6, [r0]
 80071ac:	300c      	adds	r0, #12
 80071ae:	60a0      	str	r0, [r4, #8]
 80071b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80071b4:	f7fd fb78 	bl	80048a8 <memset>
 80071b8:	4620      	mov	r0, r4
 80071ba:	bd70      	pop	{r4, r5, r6, pc}

080071bc <__sfp_lock_acquire>:
 80071bc:	4801      	ldr	r0, [pc, #4]	; (80071c4 <__sfp_lock_acquire+0x8>)
 80071be:	f000 b8b3 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071c2:	bf00      	nop
 80071c4:	20000318 	.word	0x20000318

080071c8 <__sfp_lock_release>:
 80071c8:	4801      	ldr	r0, [pc, #4]	; (80071d0 <__sfp_lock_release+0x8>)
 80071ca:	f000 b8ae 	b.w	800732a <__retarget_lock_release_recursive>
 80071ce:	bf00      	nop
 80071d0:	20000318 	.word	0x20000318

080071d4 <__sinit_lock_acquire>:
 80071d4:	4801      	ldr	r0, [pc, #4]	; (80071dc <__sinit_lock_acquire+0x8>)
 80071d6:	f000 b8a7 	b.w	8007328 <__retarget_lock_acquire_recursive>
 80071da:	bf00      	nop
 80071dc:	20000313 	.word	0x20000313

080071e0 <__sinit_lock_release>:
 80071e0:	4801      	ldr	r0, [pc, #4]	; (80071e8 <__sinit_lock_release+0x8>)
 80071e2:	f000 b8a2 	b.w	800732a <__retarget_lock_release_recursive>
 80071e6:	bf00      	nop
 80071e8:	20000313 	.word	0x20000313

080071ec <__sinit>:
 80071ec:	b510      	push	{r4, lr}
 80071ee:	4604      	mov	r4, r0
 80071f0:	f7ff fff0 	bl	80071d4 <__sinit_lock_acquire>
 80071f4:	69a3      	ldr	r3, [r4, #24]
 80071f6:	b11b      	cbz	r3, 8007200 <__sinit+0x14>
 80071f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071fc:	f7ff bff0 	b.w	80071e0 <__sinit_lock_release>
 8007200:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007204:	6523      	str	r3, [r4, #80]	; 0x50
 8007206:	4b13      	ldr	r3, [pc, #76]	; (8007254 <__sinit+0x68>)
 8007208:	4a13      	ldr	r2, [pc, #76]	; (8007258 <__sinit+0x6c>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	62a2      	str	r2, [r4, #40]	; 0x28
 800720e:	42a3      	cmp	r3, r4
 8007210:	bf04      	itt	eq
 8007212:	2301      	moveq	r3, #1
 8007214:	61a3      	streq	r3, [r4, #24]
 8007216:	4620      	mov	r0, r4
 8007218:	f000 f820 	bl	800725c <__sfp>
 800721c:	6060      	str	r0, [r4, #4]
 800721e:	4620      	mov	r0, r4
 8007220:	f000 f81c 	bl	800725c <__sfp>
 8007224:	60a0      	str	r0, [r4, #8]
 8007226:	4620      	mov	r0, r4
 8007228:	f000 f818 	bl	800725c <__sfp>
 800722c:	2200      	movs	r2, #0
 800722e:	60e0      	str	r0, [r4, #12]
 8007230:	2104      	movs	r1, #4
 8007232:	6860      	ldr	r0, [r4, #4]
 8007234:	f7ff ff82 	bl	800713c <std>
 8007238:	68a0      	ldr	r0, [r4, #8]
 800723a:	2201      	movs	r2, #1
 800723c:	2109      	movs	r1, #9
 800723e:	f7ff ff7d 	bl	800713c <std>
 8007242:	68e0      	ldr	r0, [r4, #12]
 8007244:	2202      	movs	r2, #2
 8007246:	2112      	movs	r1, #18
 8007248:	f7ff ff78 	bl	800713c <std>
 800724c:	2301      	movs	r3, #1
 800724e:	61a3      	str	r3, [r4, #24]
 8007250:	e7d2      	b.n	80071f8 <__sinit+0xc>
 8007252:	bf00      	nop
 8007254:	08007670 	.word	0x08007670
 8007258:	08007185 	.word	0x08007185

0800725c <__sfp>:
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	4607      	mov	r7, r0
 8007260:	f7ff ffac 	bl	80071bc <__sfp_lock_acquire>
 8007264:	4b1e      	ldr	r3, [pc, #120]	; (80072e0 <__sfp+0x84>)
 8007266:	681e      	ldr	r6, [r3, #0]
 8007268:	69b3      	ldr	r3, [r6, #24]
 800726a:	b913      	cbnz	r3, 8007272 <__sfp+0x16>
 800726c:	4630      	mov	r0, r6
 800726e:	f7ff ffbd 	bl	80071ec <__sinit>
 8007272:	3648      	adds	r6, #72	; 0x48
 8007274:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007278:	3b01      	subs	r3, #1
 800727a:	d503      	bpl.n	8007284 <__sfp+0x28>
 800727c:	6833      	ldr	r3, [r6, #0]
 800727e:	b30b      	cbz	r3, 80072c4 <__sfp+0x68>
 8007280:	6836      	ldr	r6, [r6, #0]
 8007282:	e7f7      	b.n	8007274 <__sfp+0x18>
 8007284:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007288:	b9d5      	cbnz	r5, 80072c0 <__sfp+0x64>
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <__sfp+0x88>)
 800728c:	60e3      	str	r3, [r4, #12]
 800728e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007292:	6665      	str	r5, [r4, #100]	; 0x64
 8007294:	f000 f847 	bl	8007326 <__retarget_lock_init_recursive>
 8007298:	f7ff ff96 	bl	80071c8 <__sfp_lock_release>
 800729c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80072a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80072a4:	6025      	str	r5, [r4, #0]
 80072a6:	61a5      	str	r5, [r4, #24]
 80072a8:	2208      	movs	r2, #8
 80072aa:	4629      	mov	r1, r5
 80072ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072b0:	f7fd fafa 	bl	80048a8 <memset>
 80072b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072bc:	4620      	mov	r0, r4
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	3468      	adds	r4, #104	; 0x68
 80072c2:	e7d9      	b.n	8007278 <__sfp+0x1c>
 80072c4:	2104      	movs	r1, #4
 80072c6:	4638      	mov	r0, r7
 80072c8:	f7ff ff62 	bl	8007190 <__sfmoreglue>
 80072cc:	4604      	mov	r4, r0
 80072ce:	6030      	str	r0, [r6, #0]
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d1d5      	bne.n	8007280 <__sfp+0x24>
 80072d4:	f7ff ff78 	bl	80071c8 <__sfp_lock_release>
 80072d8:	230c      	movs	r3, #12
 80072da:	603b      	str	r3, [r7, #0]
 80072dc:	e7ee      	b.n	80072bc <__sfp+0x60>
 80072de:	bf00      	nop
 80072e0:	08007670 	.word	0x08007670
 80072e4:	ffff0001 	.word	0xffff0001

080072e8 <_fwalk_reent>:
 80072e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072ec:	4606      	mov	r6, r0
 80072ee:	4688      	mov	r8, r1
 80072f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072f4:	2700      	movs	r7, #0
 80072f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072fa:	f1b9 0901 	subs.w	r9, r9, #1
 80072fe:	d505      	bpl.n	800730c <_fwalk_reent+0x24>
 8007300:	6824      	ldr	r4, [r4, #0]
 8007302:	2c00      	cmp	r4, #0
 8007304:	d1f7      	bne.n	80072f6 <_fwalk_reent+0xe>
 8007306:	4638      	mov	r0, r7
 8007308:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800730c:	89ab      	ldrh	r3, [r5, #12]
 800730e:	2b01      	cmp	r3, #1
 8007310:	d907      	bls.n	8007322 <_fwalk_reent+0x3a>
 8007312:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007316:	3301      	adds	r3, #1
 8007318:	d003      	beq.n	8007322 <_fwalk_reent+0x3a>
 800731a:	4629      	mov	r1, r5
 800731c:	4630      	mov	r0, r6
 800731e:	47c0      	blx	r8
 8007320:	4307      	orrs	r7, r0
 8007322:	3568      	adds	r5, #104	; 0x68
 8007324:	e7e9      	b.n	80072fa <_fwalk_reent+0x12>

08007326 <__retarget_lock_init_recursive>:
 8007326:	4770      	bx	lr

08007328 <__retarget_lock_acquire_recursive>:
 8007328:	4770      	bx	lr

0800732a <__retarget_lock_release_recursive>:
 800732a:	4770      	bx	lr

0800732c <__swhatbuf_r>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	460e      	mov	r6, r1
 8007330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007334:	2900      	cmp	r1, #0
 8007336:	b096      	sub	sp, #88	; 0x58
 8007338:	4614      	mov	r4, r2
 800733a:	461d      	mov	r5, r3
 800733c:	da07      	bge.n	800734e <__swhatbuf_r+0x22>
 800733e:	2300      	movs	r3, #0
 8007340:	602b      	str	r3, [r5, #0]
 8007342:	89b3      	ldrh	r3, [r6, #12]
 8007344:	061a      	lsls	r2, r3, #24
 8007346:	d410      	bmi.n	800736a <__swhatbuf_r+0x3e>
 8007348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800734c:	e00e      	b.n	800736c <__swhatbuf_r+0x40>
 800734e:	466a      	mov	r2, sp
 8007350:	f000 f902 	bl	8007558 <_fstat_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	dbf2      	blt.n	800733e <__swhatbuf_r+0x12>
 8007358:	9a01      	ldr	r2, [sp, #4]
 800735a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800735e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007362:	425a      	negs	r2, r3
 8007364:	415a      	adcs	r2, r3
 8007366:	602a      	str	r2, [r5, #0]
 8007368:	e7ee      	b.n	8007348 <__swhatbuf_r+0x1c>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	2000      	movs	r0, #0
 800736e:	6023      	str	r3, [r4, #0]
 8007370:	b016      	add	sp, #88	; 0x58
 8007372:	bd70      	pop	{r4, r5, r6, pc}

08007374 <__smakebuf_r>:
 8007374:	898b      	ldrh	r3, [r1, #12]
 8007376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007378:	079d      	lsls	r5, r3, #30
 800737a:	4606      	mov	r6, r0
 800737c:	460c      	mov	r4, r1
 800737e:	d507      	bpl.n	8007390 <__smakebuf_r+0x1c>
 8007380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007384:	6023      	str	r3, [r4, #0]
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	2301      	movs	r3, #1
 800738a:	6163      	str	r3, [r4, #20]
 800738c:	b002      	add	sp, #8
 800738e:	bd70      	pop	{r4, r5, r6, pc}
 8007390:	ab01      	add	r3, sp, #4
 8007392:	466a      	mov	r2, sp
 8007394:	f7ff ffca 	bl	800732c <__swhatbuf_r>
 8007398:	9900      	ldr	r1, [sp, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	4630      	mov	r0, r6
 800739e:	f7ff f987 	bl	80066b0 <_malloc_r>
 80073a2:	b948      	cbnz	r0, 80073b8 <__smakebuf_r+0x44>
 80073a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073a8:	059a      	lsls	r2, r3, #22
 80073aa:	d4ef      	bmi.n	800738c <__smakebuf_r+0x18>
 80073ac:	f023 0303 	bic.w	r3, r3, #3
 80073b0:	f043 0302 	orr.w	r3, r3, #2
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	e7e3      	b.n	8007380 <__smakebuf_r+0xc>
 80073b8:	4b0d      	ldr	r3, [pc, #52]	; (80073f0 <__smakebuf_r+0x7c>)
 80073ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80073bc:	89a3      	ldrh	r3, [r4, #12]
 80073be:	6020      	str	r0, [r4, #0]
 80073c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073c4:	81a3      	strh	r3, [r4, #12]
 80073c6:	9b00      	ldr	r3, [sp, #0]
 80073c8:	6163      	str	r3, [r4, #20]
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	6120      	str	r0, [r4, #16]
 80073ce:	b15b      	cbz	r3, 80073e8 <__smakebuf_r+0x74>
 80073d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d4:	4630      	mov	r0, r6
 80073d6:	f000 f8d1 	bl	800757c <_isatty_r>
 80073da:	b128      	cbz	r0, 80073e8 <__smakebuf_r+0x74>
 80073dc:	89a3      	ldrh	r3, [r4, #12]
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0301 	orr.w	r3, r3, #1
 80073e6:	81a3      	strh	r3, [r4, #12]
 80073e8:	89a0      	ldrh	r0, [r4, #12]
 80073ea:	4305      	orrs	r5, r0
 80073ec:	81a5      	strh	r5, [r4, #12]
 80073ee:	e7cd      	b.n	800738c <__smakebuf_r+0x18>
 80073f0:	08007185 	.word	0x08007185

080073f4 <_malloc_usable_size_r>:
 80073f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f8:	1f18      	subs	r0, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfbc      	itt	lt
 80073fe:	580b      	ldrlt	r3, [r1, r0]
 8007400:	18c0      	addlt	r0, r0, r3
 8007402:	4770      	bx	lr

08007404 <_raise_r>:
 8007404:	291f      	cmp	r1, #31
 8007406:	b538      	push	{r3, r4, r5, lr}
 8007408:	4604      	mov	r4, r0
 800740a:	460d      	mov	r5, r1
 800740c:	d904      	bls.n	8007418 <_raise_r+0x14>
 800740e:	2316      	movs	r3, #22
 8007410:	6003      	str	r3, [r0, #0]
 8007412:	f04f 30ff 	mov.w	r0, #4294967295
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800741a:	b112      	cbz	r2, 8007422 <_raise_r+0x1e>
 800741c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007420:	b94b      	cbnz	r3, 8007436 <_raise_r+0x32>
 8007422:	4620      	mov	r0, r4
 8007424:	f000 f830 	bl	8007488 <_getpid_r>
 8007428:	462a      	mov	r2, r5
 800742a:	4601      	mov	r1, r0
 800742c:	4620      	mov	r0, r4
 800742e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007432:	f000 b817 	b.w	8007464 <_kill_r>
 8007436:	2b01      	cmp	r3, #1
 8007438:	d00a      	beq.n	8007450 <_raise_r+0x4c>
 800743a:	1c59      	adds	r1, r3, #1
 800743c:	d103      	bne.n	8007446 <_raise_r+0x42>
 800743e:	2316      	movs	r3, #22
 8007440:	6003      	str	r3, [r0, #0]
 8007442:	2001      	movs	r0, #1
 8007444:	e7e7      	b.n	8007416 <_raise_r+0x12>
 8007446:	2400      	movs	r4, #0
 8007448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800744c:	4628      	mov	r0, r5
 800744e:	4798      	blx	r3
 8007450:	2000      	movs	r0, #0
 8007452:	e7e0      	b.n	8007416 <_raise_r+0x12>

08007454 <raise>:
 8007454:	4b02      	ldr	r3, [pc, #8]	; (8007460 <raise+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfd3 	b.w	8007404 <_raise_r>
 800745e:	bf00      	nop
 8007460:	2000000c 	.word	0x2000000c

08007464 <_kill_r>:
 8007464:	b538      	push	{r3, r4, r5, lr}
 8007466:	4d07      	ldr	r5, [pc, #28]	; (8007484 <_kill_r+0x20>)
 8007468:	2300      	movs	r3, #0
 800746a:	4604      	mov	r4, r0
 800746c:	4608      	mov	r0, r1
 800746e:	4611      	mov	r1, r2
 8007470:	602b      	str	r3, [r5, #0]
 8007472:	f7fd f8f5 	bl	8004660 <_kill>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	d102      	bne.n	8007480 <_kill_r+0x1c>
 800747a:	682b      	ldr	r3, [r5, #0]
 800747c:	b103      	cbz	r3, 8007480 <_kill_r+0x1c>
 800747e:	6023      	str	r3, [r4, #0]
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	bf00      	nop
 8007484:	2000030c 	.word	0x2000030c

08007488 <_getpid_r>:
 8007488:	f7fd b8e2 	b.w	8004650 <_getpid>

0800748c <__sread>:
 800748c:	b510      	push	{r4, lr}
 800748e:	460c      	mov	r4, r1
 8007490:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007494:	f000 f894 	bl	80075c0 <_read_r>
 8007498:	2800      	cmp	r0, #0
 800749a:	bfab      	itete	ge
 800749c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800749e:	89a3      	ldrhlt	r3, [r4, #12]
 80074a0:	181b      	addge	r3, r3, r0
 80074a2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074a6:	bfac      	ite	ge
 80074a8:	6563      	strge	r3, [r4, #84]	; 0x54
 80074aa:	81a3      	strhlt	r3, [r4, #12]
 80074ac:	bd10      	pop	{r4, pc}

080074ae <__swrite>:
 80074ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b2:	461f      	mov	r7, r3
 80074b4:	898b      	ldrh	r3, [r1, #12]
 80074b6:	05db      	lsls	r3, r3, #23
 80074b8:	4605      	mov	r5, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	4616      	mov	r6, r2
 80074be:	d505      	bpl.n	80074cc <__swrite+0x1e>
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2302      	movs	r3, #2
 80074c6:	2200      	movs	r2, #0
 80074c8:	f000 f868 	bl	800759c <_lseek_r>
 80074cc:	89a3      	ldrh	r3, [r4, #12]
 80074ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074d6:	81a3      	strh	r3, [r4, #12]
 80074d8:	4632      	mov	r2, r6
 80074da:	463b      	mov	r3, r7
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	f000 b817 	b.w	8007514 <_write_r>

080074e6 <__sseek>:
 80074e6:	b510      	push	{r4, lr}
 80074e8:	460c      	mov	r4, r1
 80074ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ee:	f000 f855 	bl	800759c <_lseek_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	bf15      	itete	ne
 80074f8:	6560      	strne	r0, [r4, #84]	; 0x54
 80074fa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80074fe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007502:	81a3      	strheq	r3, [r4, #12]
 8007504:	bf18      	it	ne
 8007506:	81a3      	strhne	r3, [r4, #12]
 8007508:	bd10      	pop	{r4, pc}

0800750a <__sclose>:
 800750a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750e:	f000 b813 	b.w	8007538 <_close_r>
	...

08007514 <_write_r>:
 8007514:	b538      	push	{r3, r4, r5, lr}
 8007516:	4d07      	ldr	r5, [pc, #28]	; (8007534 <_write_r+0x20>)
 8007518:	4604      	mov	r4, r0
 800751a:	4608      	mov	r0, r1
 800751c:	4611      	mov	r1, r2
 800751e:	2200      	movs	r2, #0
 8007520:	602a      	str	r2, [r5, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	f7fd f8d3 	bl	80046ce <_write>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_write_r+0x1e>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_write_r+0x1e>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	2000030c 	.word	0x2000030c

08007538 <_close_r>:
 8007538:	b538      	push	{r3, r4, r5, lr}
 800753a:	4d06      	ldr	r5, [pc, #24]	; (8007554 <_close_r+0x1c>)
 800753c:	2300      	movs	r3, #0
 800753e:	4604      	mov	r4, r0
 8007540:	4608      	mov	r0, r1
 8007542:	602b      	str	r3, [r5, #0]
 8007544:	f7fd f8df 	bl	8004706 <_close>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_close_r+0x1a>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_close_r+0x1a>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	2000030c 	.word	0x2000030c

08007558 <_fstat_r>:
 8007558:	b538      	push	{r3, r4, r5, lr}
 800755a:	4d07      	ldr	r5, [pc, #28]	; (8007578 <_fstat_r+0x20>)
 800755c:	2300      	movs	r3, #0
 800755e:	4604      	mov	r4, r0
 8007560:	4608      	mov	r0, r1
 8007562:	4611      	mov	r1, r2
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	f7fd f8da 	bl	800471e <_fstat>
 800756a:	1c43      	adds	r3, r0, #1
 800756c:	d102      	bne.n	8007574 <_fstat_r+0x1c>
 800756e:	682b      	ldr	r3, [r5, #0]
 8007570:	b103      	cbz	r3, 8007574 <_fstat_r+0x1c>
 8007572:	6023      	str	r3, [r4, #0]
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	2000030c 	.word	0x2000030c

0800757c <_isatty_r>:
 800757c:	b538      	push	{r3, r4, r5, lr}
 800757e:	4d06      	ldr	r5, [pc, #24]	; (8007598 <_isatty_r+0x1c>)
 8007580:	2300      	movs	r3, #0
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	602b      	str	r3, [r5, #0]
 8007588:	f7fd f8d9 	bl	800473e <_isatty>
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	d102      	bne.n	8007596 <_isatty_r+0x1a>
 8007590:	682b      	ldr	r3, [r5, #0]
 8007592:	b103      	cbz	r3, 8007596 <_isatty_r+0x1a>
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	bd38      	pop	{r3, r4, r5, pc}
 8007598:	2000030c 	.word	0x2000030c

0800759c <_lseek_r>:
 800759c:	b538      	push	{r3, r4, r5, lr}
 800759e:	4d07      	ldr	r5, [pc, #28]	; (80075bc <_lseek_r+0x20>)
 80075a0:	4604      	mov	r4, r0
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	2200      	movs	r2, #0
 80075a8:	602a      	str	r2, [r5, #0]
 80075aa:	461a      	mov	r2, r3
 80075ac:	f7fd f8d2 	bl	8004754 <_lseek>
 80075b0:	1c43      	adds	r3, r0, #1
 80075b2:	d102      	bne.n	80075ba <_lseek_r+0x1e>
 80075b4:	682b      	ldr	r3, [r5, #0]
 80075b6:	b103      	cbz	r3, 80075ba <_lseek_r+0x1e>
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	2000030c 	.word	0x2000030c

080075c0 <_read_r>:
 80075c0:	b538      	push	{r3, r4, r5, lr}
 80075c2:	4d07      	ldr	r5, [pc, #28]	; (80075e0 <_read_r+0x20>)
 80075c4:	4604      	mov	r4, r0
 80075c6:	4608      	mov	r0, r1
 80075c8:	4611      	mov	r1, r2
 80075ca:	2200      	movs	r2, #0
 80075cc:	602a      	str	r2, [r5, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	f7fd f860 	bl	8004694 <_read>
 80075d4:	1c43      	adds	r3, r0, #1
 80075d6:	d102      	bne.n	80075de <_read_r+0x1e>
 80075d8:	682b      	ldr	r3, [r5, #0]
 80075da:	b103      	cbz	r3, 80075de <_read_r+0x1e>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	bd38      	pop	{r3, r4, r5, pc}
 80075e0:	2000030c 	.word	0x2000030c

080075e4 <_init>:
 80075e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075e6:	bf00      	nop
 80075e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ea:	bc08      	pop	{r3}
 80075ec:	469e      	mov	lr, r3
 80075ee:	4770      	bx	lr

080075f0 <_fini>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr
